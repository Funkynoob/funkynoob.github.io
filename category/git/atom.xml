<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.riversea.top</id>
    <title>Funkynoob的个人博客 • Posts by &#34;git&#34; category</title>
    <link href="https://blog.riversea.top" />
    <updated>2024-02-17T12:42:54.000Z</updated>
    <category term="docker" />
    <category term="Git" />
    <category term="Nginx" />
    <category term="ORM框架" />
    <category term="MyBatis" />
    <category term="redis" />
    <category term="spring" />
    <entry>
        <id>https://blog.riversea.top/2024/02/17/git/</id>
        <title>Git学习</title>
        <link rel="alternate" href="https://blog.riversea.top/2024/02/17/git/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;起步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#起步&#34;&gt;#&lt;/a&gt; 起步&lt;/h1&gt;
&lt;h2 id=&#34;关于版本控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于版本控制&#34;&gt;#&lt;/a&gt; 关于版本控制&lt;/h2&gt;
&lt;p&gt;什么是 “版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特 定版本修订情况的系统。&lt;/p&gt;
&lt;p&gt;如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴 望拥有的功能），采用版本控制系统（VCS）是个明智的选择。 有了它你就可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地 方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。 使用版本控制系统通常还意 味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。 但额外增加 的工作量却微乎其微。&lt;/p&gt;
&lt;h2 id=&#34;本地版本控制系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本地版本控制系统&#34;&gt;#&lt;/a&gt; 本地版本控制系统&lt;/h2&gt;
&lt;p&gt;许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。&lt;/p&gt;
&lt;img src=&#34;local_vcs.png&#34; alt=&#34;本地版本控制&#34;/&gt;
&lt;h2 id=&#34;集中化的版本控制系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集中化的版本控制系统&#34;&gt;#&lt;/a&gt; 集中化的版本控制系统&lt;/h2&gt;
&lt;p&gt;接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，** 集中化的版本控制系统 （Centralized Version Control Systems，简称 CVCS）** 应运而生。 这类系统，诸如  &lt;code&gt;CVS&lt;/code&gt; 、 &lt;code&gt;Subversion&lt;/code&gt;  以及  &lt;code&gt;Perforce&lt;/code&gt;  等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。 多年以来，这已成为版本控制系统的标准做法。&lt;/p&gt;
&lt;img src=&#34;centry_vcs.png&#34; alt=&#34;集中化的版本控制&#34;/&gt;
&lt;p&gt;这种做法带来了许多好处，特别是相较于老式的本地  &lt;code&gt;VCS&lt;/code&gt;  来说。 现在，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个  &lt;code&gt;CVCS&lt;/code&gt;  要远比在各个客户端上维护本地数据库来得轻松容易。&lt;/p&gt;
&lt;p&gt;事分两面，有好有坏。 这么做最显而易见的缺点是中央服务器的单点故障。 如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据 —— 包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。 本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。&lt;/p&gt;
&lt;h2 id=&#34;分布式版本控制系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分布式版本控制系统&#34;&gt;#&lt;/a&gt; 分布式版本控制系统&lt;/h2&gt;
&lt;p&gt;于是 ** 分布式版本控制系统（Distributed Version Control System，简称 DVCS）** 面世了。 在这类系统中，像  &lt;code&gt;Git&lt;/code&gt; 、 &lt;code&gt;Mercurial&lt;/code&gt; 、 &lt;code&gt;Bazaar&lt;/code&gt;  以及  &lt;code&gt;Darcs&lt;/code&gt;  等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。&lt;/p&gt;
&lt;img src=&#34;distributed_vcs.png&#34; alt=&#34;分布式版本控制&#34;/&gt;
&lt;p&gt;更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。&lt;/p&gt;
&lt;h1 id=&#34;git的一些特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git的一些特点&#34;&gt;#&lt;/a&gt; Git 的一些特点&lt;/h1&gt;
&lt;h2 id=&#34;基于快照而非差异&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于快照而非差异&#34;&gt;#&lt;/a&gt; 基于快照，而非差异&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  和其它版本控制系统（包括  &lt;code&gt;Subversion&lt;/code&gt;  和近似工具）的主要差别在于  &lt;code&gt;Git&lt;/code&gt;  对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，这类系统（ &lt;code&gt;CVS&lt;/code&gt; 、 &lt;code&gt;Subversion&lt;/code&gt; 、 &lt;code&gt;Perforce&lt;/code&gt; 、 &lt;code&gt;Bazaar&lt;/code&gt;  等等）将它们存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异（它们通常称作&lt;strong&gt;基于差异（delta-based）的版本控制&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;基于差异的版本控制系统工作流如下：&lt;/p&gt;
&lt;img src=&#34;vcs_diff.png&#34; alt=&#34;基于差异的版本控制系统&#34; /&gt;
&lt;p&gt;基于快照的版本控制系统工作流如下：&lt;/p&gt;
&lt;img src=&#34;vcs_git.png&#34; alt=&#34;基于快照的版本控制系统&#34; /&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  不按照以上方式对待或保存数据。反之， &lt;code&gt;Git&lt;/code&gt;  更像是把数据看作是对小型文件系统的一系列快照。 在  &lt;code&gt;Git&lt;/code&gt;  中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。 为了效率，如果文件没有修改， &lt;code&gt;Git&lt;/code&gt;  不再重新存储该文件，而是只保留一个链接指向之前存储的文件。  &lt;code&gt;Git&lt;/code&gt;  对待数据更像是一个&lt;strong&gt;快照流&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  更像是一个小型的文件系统，提供了许多以此为基础构建的超强工具，而不只是一个简单的  &lt;code&gt;VCS&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;近乎所有操作都是本地执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#近乎所有操作都是本地执行&#34;&gt;#&lt;/a&gt; 近乎所有操作都是本地执行&lt;/h2&gt;
&lt;p&gt;离线时可以本地进行更新或提交，联网后再提交至远程仓库。&lt;/p&gt;
&lt;h2 id=&#34;保证完整性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#保证完整性&#34;&gt;#&lt;/a&gt; 保证完整性&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  中所有的数据在存储前都计算校验和，然后以校验和来引用。这意味着不可能在  &lt;code&gt;Git&lt;/code&gt;  不知情时更改任何文件内容或目录内容。 &lt;code&gt;Git&lt;/code&gt;  用以计算校验和的机制叫做  &lt;code&gt;SHA-1&lt;/code&gt;  散列（ &lt;code&gt;hash&lt;/code&gt; ，哈希）。这是一个由  &lt;code&gt;40&lt;/code&gt;  个十六进制字符（ &lt;code&gt;0-9&lt;/code&gt;  和  &lt;code&gt;a-f&lt;/code&gt; ）组 成的字符串，基于  &lt;code&gt;Git&lt;/code&gt;  中文件的内容或目录结构计算出来。  &lt;code&gt;SHA-1&lt;/code&gt;  哈希看起来是这样：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powerpowershell&#34;&gt;24b9da6552252987aa493b52f8696cd6d3b00373&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。&lt;/p&gt;
&lt;h2 id=&#34;git一般只添加不删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git一般只添加不删除&#34;&gt;#&lt;/a&gt; Git 一般只添加不删除&lt;/h2&gt;
&lt;p&gt;你执行的  &lt;code&gt;Git&lt;/code&gt;  操作，几乎只往  &lt;code&gt;Git&lt;/code&gt;  数据库中添加数据。你很难使用  &lt;code&gt;Git&lt;/code&gt;  从数据库中删除数据，也就是说  &lt;code&gt;Git&lt;/code&gt;  几乎不会执行任何可能导致文件不可恢复的操作。一旦提交快照到  &lt;code&gt;Git&lt;/code&gt;  中，就难以丢失数据，特别是如果你定期的推送数据库到其它仓库的话，但是未提交更新时有可能丢失或弄乱修改的内容的风险。&lt;/p&gt;
&lt;p&gt;更深度探讨  &lt;code&gt;Git&lt;/code&gt;  如何保存数据及恢复丢失数据的话题，请参考&lt;a href=&#34;#%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C&#34;&gt;撤销操作&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三种状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种状态&#34;&gt;#&lt;/a&gt; 三种状态&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  有三种状态，你的文件可能处于其中之一：  &lt;code&gt;已提交（committed）&lt;/code&gt; 、 &lt;code&gt;已修改（modified）&lt;/code&gt; 和  &lt;code&gt;已暂存（staged&lt;/code&gt; ）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;已修改表示修改了文件，但还没保存到数据库中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已提交表示数据已经安全地保存在本地数据库中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这会让我们的  &lt;code&gt;Git&lt;/code&gt;  项目拥有三个阶段：工作区、暂存区以及  &lt;code&gt;Git&lt;/code&gt;  目录。&lt;/p&gt;
&lt;img src=&#34;git_container.png&#34; alt=&#34;工作目录、暂存区域以及 Git 仓库&#34; /&gt;
&lt;p&gt;工作区是对项目的某个版本独立提取出来的内容。 这些从  &lt;code&gt;Git&lt;/code&gt;  仓库的压缩数据库中提取出来的文件，放在磁盘上 供你使用或修改。&lt;/p&gt;
&lt;p&gt;暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在  &lt;code&gt;Git&lt;/code&gt;  仓库目录中。 按照  &lt;code&gt;Git&lt;/code&gt;  的术语叫做 “索引”，不过一般说法还是叫 “暂存区”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  仓库目录是  &lt;code&gt;Git&lt;/code&gt;  用来保存项目的元数据和对象数据库的地方。 这是  &lt;code&gt;Git&lt;/code&gt;  中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。&lt;/p&gt;
&lt;h3 id=&#34;git流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git流程&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Git&lt;/code&gt;  流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在工作区&lt;strong&gt;修改文件 (modified)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将下次提交的更改选择性暂存，将部分更改&lt;strong&gt;添加到暂存区 (staged)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;提交更新，找到暂存区的文件，将快照永久性地&lt;strong&gt;存储到 Git 目录 (committed)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果  &lt;code&gt;Git&lt;/code&gt;  目录中保存着特定版本的文件，就属于&lt;strong&gt;已提交&lt;/strong&gt;状态。 如果文件已修改并放入暂存区，就属于&lt;strong&gt;已暂存&lt;/strong&gt;状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是&lt;strong&gt;已修改&lt;/strong&gt;状态&lt;/p&gt;
&lt;h1 id=&#34;git配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git配置&#34;&gt;#&lt;/a&gt; Git 配置&lt;/h1&gt;
&lt;h2 id=&#34;初次运行配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初次运行配置&#34;&gt;#&lt;/a&gt; 初次运行配置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  自带  &lt;code&gt;git config&lt;/code&gt;  工具来帮助设置  &lt;code&gt;Git&lt;/code&gt;  外观和行为配置变量，变量分别存储在 3 个不同地文件中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/etc/gitconfig&lt;/code&gt;  文件：位于  &lt;code&gt;Git&lt;/code&gt;  目录下，包含系统上每一个用户以及仓库的通用配置。执行 &lt;code&gt;git config --list --system&lt;/code&gt; 访问该文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt;  或  &lt;code&gt;~/.config/config&lt;/code&gt;  文件（ &lt;code&gt;windows&lt;/code&gt;  中位于  &lt;code&gt;%USERPROFILE%&lt;/code&gt;  目录下的  &lt;code&gt;.gitconfig&lt;/code&gt;  文件）：只针对当前用户。执行 &lt;code&gt;git config --list --global&lt;/code&gt; 访问该文件，&lt;strong&gt;这会对你系统上所有的仓库生效&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;当前使用仓库的  &lt;code&gt;Git&lt;/code&gt;  目录中的  &lt;code&gt;.config&lt;/code&gt;  文件  &lt;code&gt;.config&lt;/code&gt;  ：只针对该仓库。执行 &lt;code&gt;git config --list --local&lt;/code&gt; 访问该文件。默认情况使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置文件会通过 &lt;code&gt;3 &amp;gt; 2 &amp;gt; 1&lt;/code&gt;  的顺序进行配置覆盖&lt;/p&gt;
&lt;p&gt;可以执行 &lt;code&gt;git config --list --show-origin&lt;/code&gt; 查看所有的配置变量以及它们所在的文件&lt;/p&gt;
&lt;h2 id=&#34;配置用户信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置用户信息&#34;&gt;#&lt;/a&gt; 配置用户信息&lt;/h2&gt;
&lt;p&gt;每一次  &lt;code&gt;Git&lt;/code&gt;  提交都会将这些信息写入提交中且&lt;strong&gt;不可更改&lt;/strong&gt;。邮箱可以不存在，只是用来标识某个用户&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; user.name &amp;lt;username&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置提交用户名&lt;/span&gt;&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; user.email &amp;lt;emai&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置提交邮箱&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以通过  &lt;code&gt;git config &amp;lt;key&amp;gt;&lt;/code&gt;  的 方式查看某一变量&lt;/p&gt;
&lt;h2 id=&#34;配置文本编辑器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置文本编辑器&#34;&gt;#&lt;/a&gt; 配置文本编辑器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git config --global core.editor &amp;lt;editor&amp;gt;&lt;/code&gt; ，若在 windows 中则需添加绝对路径 &lt;code&gt;$ git config --global core.editor &amp;lt;path/to/editor&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;检查配置信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检查配置信息&#34;&gt;#&lt;/a&gt; 检查配置信息&lt;/h2&gt;
&lt;p&gt;使用  &lt;code&gt;git config --list&lt;/code&gt;  命令查看所有配置的变量，Git 会读取所有  &lt;code&gt;.gitconfig&lt;/code&gt;  文件，可能会包含相同变量，Git 只使用最后被找到的变量。&lt;/p&gt;
&lt;h2 id=&#34;获取帮助&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取帮助&#34;&gt;#&lt;/a&gt; 获取帮助&lt;/h2&gt;
&lt;p&gt;下面是三种等价配置&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git help &amp;lt;verb&amp;gt;&lt;br&gt;git &amp;lt;verb&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--help&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;man&lt;/span&gt; git-&amp;lt;verb&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若不想获取太详细的信息，则使用 &lt;code&gt;git &amp;lt;verb&amp;gt; -h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如，要想获得  &lt;code&gt;git config&lt;/code&gt;  命令的手册，执行  &lt;code&gt;git help config&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;git基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git基础&#34;&gt;#&lt;/a&gt; Git 基础&lt;/h1&gt;
&lt;h2 id=&#34;获取仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取仓库&#34;&gt;#&lt;/a&gt; 获取仓库&lt;/h2&gt;
&lt;p&gt;两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将尚未成为仓库的文件夹变成仓库&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过 cd 命令进入文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行  &lt;code&gt;git init&lt;/code&gt;  将该文件夹变为仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该命令将创建一个名为  &lt;code&gt;.git&lt;/code&gt;  的子目录，默认为隐藏目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建并编写文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加文件至暂存区&lt;/p&gt;
 &lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git add .&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以执行以下命令进行提交&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git commit &lt;span class=&#34;hljs-literal&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;initial project version&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从其他服务器克隆一个已存在的 Git 仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行  &lt;code&gt;git clone &amp;lt;url&amp;gt; [name]&lt;/code&gt;  命令获取 Git 仓库
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[name]&lt;/code&gt;  ：设置  &lt;code&gt;clone&lt;/code&gt;  之后的本地仓库名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;更新记录至仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更新记录至仓库&#34;&gt;#&lt;/a&gt; 更新记录至仓库&lt;/h2&gt;
&lt;p&gt;工作目录下的文件有且只有&lt;strong&gt;已跟踪&lt;/strong&gt;和&lt;strong&gt;未跟踪&lt;/strong&gt;两种状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;已跟踪&lt;/strong&gt;指已被纳入版本控制的文件，在上一次快照有记录。工作一段时间后它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是  &lt;code&gt;Git&lt;/code&gt;  已经知道的文件。&lt;/p&gt;
&lt;p&gt;工作目录中除&lt;strong&gt;已跟踪&lt;/strong&gt;文件外的其它所有文件都属于&lt;strong&gt;未跟踪&lt;/strong&gt;文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为  &lt;code&gt;Git&lt;/code&gt;  刚刚检出了它们，而你尚未编辑过它们。&lt;/p&gt;
&lt;p&gt;编辑过某些文件之后，由于自上次提交后你对它们做了修改， &lt;code&gt;Git&lt;/code&gt;  将它们标记为已修改文件。 在工作时，你可以选择性地将这些修改过的文件放入暂存区，然后提交所有已暂存的修改，如此反复。&lt;/p&gt;
&lt;p&gt;文件周期变化如下：&lt;/p&gt;
&lt;img src=&#34;git_wk.png&#34; alt=&#34;文件的状态变化周期&#34; /&gt;
&lt;p&gt;使用 &lt;code&gt;git add&lt;/code&gt;  命令后即代表该文件被追踪&lt;/p&gt;
&lt;h2 id=&#34;检查当前文件状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检查当前文件状态&#34;&gt;#&lt;/a&gt; 检查当前文件状态&lt;/h2&gt;
&lt;p&gt;运行 &lt;code&gt;git status&lt;/code&gt;  命令查看哪些文件处于什么状态。如果在克隆仓库后立即使用此命令，会看到类似这样的输出：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master #分支名默认为master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;. #该分支同远程服务器上对应的分支没有偏离&lt;br&gt;nothing to commit, working directory clean &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则  &lt;code&gt;Git&lt;/code&gt;  会在&lt;a href=&#34;#%E6%96%B0%E6%B7%BB%E5%8A%A0%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6&#34;&gt;新添加跟踪文件&lt;/a&gt;中列出来&lt;/p&gt;
&lt;h3 id=&#34;新添加跟踪文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新添加跟踪文件&#34;&gt;#&lt;/a&gt; 新添加跟踪文件&lt;/h3&gt;
&lt;p&gt;例：新建 README.txt 文件&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;git status&lt;/code&gt;  命令，会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Untracked files:&lt;br&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;br&gt;  README.txt&lt;br&gt;nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在状态报告中可以看到新建的  &lt;code&gt;README.txt&lt;/code&gt;  文件出现在  &lt;code&gt;Untracked files&lt;/code&gt;  下面，代表其未被跟踪。即未曾出现在快照中。&lt;/p&gt;
&lt;h3 id=&#34;跟踪新文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跟踪新文件&#34;&gt;#&lt;/a&gt; 跟踪新文件&lt;/h3&gt;
&lt;p&gt;运行 &lt;code&gt;git add README.txt&lt;/code&gt;  命令，会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README.txt&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Changes to be committed&lt;/strong&gt; 代表该文件已被放入&lt;strong&gt;暂存区 (staged)&lt;/strong&gt;，现在已被跟踪&lt;/p&gt;
&lt;h3 id=&#34;暂存已经修改的文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#暂存已经修改的文件&#34;&gt;#&lt;/a&gt; 暂存已经修改的文件&lt;/h3&gt;
&lt;p&gt;例：该目录中有一被跟踪的  &lt;code&gt;README.md&lt;/code&gt;  文件，我们对其修改后，会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README&lt;br&gt;Changes not staged for commit:&lt;br&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;br&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working&lt;br&gt;directory)&lt;br&gt;  modified: README.md&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文件  &lt;code&gt;README.md&lt;/code&gt;  出现在  &lt;code&gt;Changes not staged for commit&lt;/code&gt;  这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。再次运行&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git add README.md &lt;span class=&#34;hljs-comment&#34;&gt;#添加README.md至暂存区&lt;/span&gt;&lt;br&gt;git status&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README.txt&lt;br&gt;  modified: README.md&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在两个文件都已暂存，下次提交时就会一并记录到仓库。&lt;/p&gt;
&lt;p&gt;此时若你再次修改  &lt;code&gt;README.md&lt;/code&gt;  或  &lt;code&gt;README.txt&lt;/code&gt;  会出现以下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README.txt&lt;br&gt;  modified: README.md&lt;br&gt;Changes not staged for commit:&lt;br&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;br&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working&lt;br&gt;directory)&lt;br&gt;  modified: README.md&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代表着  &lt;code&gt;Git&lt;/code&gt;  只不过暂存了你运行  &lt;code&gt;git add&lt;/code&gt;  命令时的版本。如果你现在提交，版本将会是你最后一次运行  &lt;code&gt;git add&lt;/code&gt;  命令时的那个版本，而不是你运行  &lt;code&gt;git commit&lt;/code&gt;  时，在工作目录中的当前版本。所以，运行了  &lt;code&gt;git add&lt;/code&gt;  之后又作了修订的文件，需要重新运行  &lt;code&gt;git add&lt;/code&gt;  把最新版本重新暂存起来：&lt;/p&gt;
&lt;h2 id=&#34;状态简览&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#状态简览&#34;&gt;#&lt;/a&gt; 状态简览&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git status -s&lt;/code&gt;  或 &lt;code&gt;git status --short&lt;/code&gt;  可简略查看信息，例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status -s&lt;/span&gt;&lt;br&gt; M README&lt;br&gt;MM Rakefile&lt;br&gt;A lib/git.rb&lt;br&gt;M lib/simplegit.rb&lt;br&gt;?? LICENSE.txt&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;??&lt;/code&gt;  标记：新添加的未跟踪文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt; A&lt;/code&gt;  标记：新添加到暂存区中的文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;M &lt;/code&gt;  标记：修改过的文件&lt;/p&gt;
&lt;p&gt;输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示：  &lt;code&gt;README&lt;/code&gt;  文件 在工作区已修改但尚未暂存，而  &lt;code&gt;lib/simplegit.rb&lt;/code&gt;  文件已修改且已暂存。  &lt;code&gt;Rakefile&lt;/code&gt;  文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。&lt;/p&gt;
&lt;h2 id=&#34;忽略文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#忽略文件&#34;&gt;#&lt;/a&gt; 忽略文件&lt;/h2&gt;
&lt;p&gt;忽略文件  &lt;code&gt;.gitignore&lt;/code&gt;  的格式规范如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有空行或者以  &lt;code&gt;#&lt;/code&gt;  开头的行都会被 Git 忽略。&lt;/li&gt;
&lt;li&gt;可以使用标准的  &lt;code&gt;glob&lt;/code&gt;  模式匹配，它会递归地应用在整个工作区中。 (shell 所使用的简化了的正则表达式)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;  匹配零个或多个任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;  匹配括号中的任一字符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[0-9a-z]&lt;/code&gt;  表示可以匹配到  &lt;code&gt;0-9&lt;/code&gt;  ，或者  &lt;code&gt;a-z&lt;/code&gt;  的任一字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;  匹配任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;  表示匹配零个或多个中间目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;匹配模式可以以  &lt;code&gt;/&lt;/code&gt;  开头防止递归。 匹配模式可以以  &lt;code&gt;/&lt;/code&gt;  结尾指定目录。&lt;/li&gt;
&lt;li&gt;要忽略指定模式以外的文件或目录，可以在模式前加上叹号  &lt;code&gt;!&lt;/code&gt;  取反。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看已暂存和未暂存的修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看已暂存和未暂存的修改&#34;&gt;#&lt;/a&gt; 查看已暂存和未暂存的修改&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#当前做的哪些更新尚未暂存？&lt;/span&gt;&lt;br&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;--staged&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#有哪些更新已暂存并准备好下次提交？&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;提交更新&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提交更新&#34;&gt;#&lt;/a&gt; 提交更新&lt;/h2&gt;
&lt;p&gt;执行  &lt;code&gt;git commit&lt;/code&gt;  命令将暂存区的文件提交至仓库。此时 Git 会启动默认的编辑器，编辑器包含首行为一个空行 — 用于写入提示信息，其余为最后一次执行  &lt;code&gt;git add&lt;/code&gt;  命令的注释信息内容。关闭编辑器后， &lt;code&gt;Git&lt;/code&gt;  会丢弃注释信息，用输入的提交说明完成一次提交。也可直接执行  &lt;code&gt;git commit -m &amp;quot;&amp;lt;msg&amp;gt;&amp;quot;&lt;/code&gt;  。成功后， &lt;code&gt;Git&lt;/code&gt;  会提示你当前位于哪个分支，本 次提交的完整  &lt;code&gt;SHA-1&lt;/code&gt;  校验和是什么，以及在本次提交中，有多少文件修订过，多少行添加和删改过。&lt;/p&gt;
&lt;p&gt;执行  &lt;code&gt;git commit -a&lt;/code&gt;  可以跳过暂存区，直接将未放入暂存区的已跟踪文件进行提交。&lt;/p&gt;
&lt;h2 id=&#34;移除文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移除文件&#34;&gt;#&lt;/a&gt; 移除文件&lt;/h2&gt;
&lt;p&gt;要从  &lt;code&gt;Git&lt;/code&gt;  中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用  &lt;code&gt;git rm&lt;/code&gt;  命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单纯删除工作区文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用  &lt;code&gt;linux&lt;/code&gt;  命令 &lt;code&gt;rm&lt;/code&gt;  就能解决&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用  &lt;code&gt;git status&lt;/code&gt;  后会出现如下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes not staged for commit:&lt;br&gt;  (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;br&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working&lt;br&gt;directory)&lt;br&gt;  deleted: 文件名&lt;br&gt;no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必须再次使用  &lt;code&gt;git rm&lt;/code&gt;  命令记录这次移除文件操作。下一次提交时，该文件不再列入版本管理，可以说该文件在  &lt;code&gt;Git&lt;/code&gt;  仓库中的新版本已经不存在了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除已放入暂存区的文件或已经修改的文件&lt;/p&gt;
 &lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;-f&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#会将已放入暂存区的文件删除(工作区的文件将会一并删除)，会暂存一条删除的变化，用于提交&lt;/span&gt;&lt;br&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;--cached&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#会将已放入暂存区的文件删除但仍会保留工作区的文件&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移动文件修改文件名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移动文件修改文件名称&#34;&gt;#&lt;/a&gt; 移动文件 (修改文件名称)&lt;/h2&gt;
&lt;p&gt;不像其它的  &lt;code&gt;VCS&lt;/code&gt;  系统， &lt;code&gt;Git&lt;/code&gt;  并不显式跟踪文件移动操作。 如果在  &lt;code&gt;Git&lt;/code&gt;  中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过  &lt;code&gt;Git&lt;/code&gt;  非常聪明，它会推断出究竟发生了什么。&lt;/p&gt;
&lt;p&gt;要在  &lt;code&gt;Git&lt;/code&gt;  中对文件改名，使用下面的命令&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;mv&lt;/span&gt; &amp;lt;old&lt;span class=&#34;hljs-operator&#34;&gt;-file&lt;/span&gt;&lt;span class=&#34;hljs-literal&#34;&gt;-name&lt;/span&gt;&amp;gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;new-file&lt;/span&gt;&lt;span class=&#34;hljs-literal&#34;&gt;-name&lt;/span&gt;&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它会恰如预期般正常工作。 实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;mv&lt;/span&gt; README.md README&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  renamed: README.md -&amp;gt; README&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实，运行  &lt;code&gt;git mv&lt;/code&gt;  就相当于运行了下面三条命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;mv&lt;/span&gt; README.md README&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;rm&lt;/span&gt; README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git add README&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此分开操作， &lt;code&gt;Git&lt;/code&gt;  也会意识到这是一次重命名，所以不管何种方式结果都一样。 两者唯一的区别在于， &lt;code&gt;git mv&lt;/code&gt;  是一条命令而非三条命令，直接使用  &lt;code&gt;git mv&lt;/code&gt;  方便得多。 不过在使用其他工具重命名文件时，记得在提交前  &lt;code&gt;git rm&lt;/code&gt;  删除旧文件名，再  &lt;code&gt;git add&lt;/code&gt;  添加新文件名。&lt;/p&gt;
&lt;h2 id=&#34;查看提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看提交历史&#34;&gt;#&lt;/a&gt; 查看提交历史&lt;/h2&gt;
&lt;p&gt;在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。完成这个任务最简单而又有效的工具是  &lt;code&gt;git log&lt;/code&gt;  命令。&lt;/p&gt;
&lt;p&gt;我们使用一个非常简单的 “simplegit” 项目作为示例。 运行下面的命令获取该项目：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git clone https://github.com/schacon/simplegit&lt;span class=&#34;hljs-literal&#34;&gt;-progit&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你在此项目中运行  &lt;code&gt;git log&lt;/code&gt;  命令时，可以看到下面的输出：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 16:40:33 2008 -0700&lt;br&gt;  removed unnecessary test&lt;br&gt;commit a11bef06a3f659402fe7563abf99ad00de2209e6&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 10:31:28 2008 -0700&lt;br&gt;  first commit&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不传入任何参数的默认情况下， &lt;code&gt;git log&lt;/code&gt;  会按时间先后顺序列出所有的提交，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 &lt;strong&gt;SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;补丁式的提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#补丁式的提交历史&#34;&gt;#&lt;/a&gt; 补丁式的提交历史&lt;/h3&gt;
&lt;p&gt;使用下面的命令查看补丁：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;-p&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--patch&lt;/span&gt; [-&lt;span class=&#34;hljs-type&#34;&gt;n&lt;/span&gt;] &lt;span class=&#34;hljs-comment&#34;&gt;#以补丁的方式查看提交历史，n用来限制的日志条目数量&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如显示前两条日志条目：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; -p -2&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;diff --git a/Rakefile b/Rakefile&lt;br&gt;index a874b73..8f94139 100644&lt;br&gt;--- a/Rakefile&lt;br&gt;+++ b/Rakefile&lt;br&gt;@@ -5,7 +5,7 @@ require &amp;#x27;rake/gempackagetask&amp;#x27;&lt;br&gt; spec = Gem::Specification.new do |s|&lt;br&gt;  s.platform = Gem::Platform::RUBY&lt;br&gt;  s.name = &amp;quot;simplegit&amp;quot;&lt;br&gt;- s.version = &amp;quot;0.1.0&amp;quot;&lt;br&gt;+ s.version = &amp;quot;0.1.1&amp;quot;&lt;br&gt;  s.author = &amp;quot;Scott Chacon&amp;quot;&lt;br&gt;  s.email = &amp;quot;schacon@gee-mail.com&amp;quot;&lt;br&gt;  s.summary = &amp;quot;A simple gem for using Git in Ruby code.&amp;quot;&lt;br&gt;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 16:40:33 2008 -0700&lt;br&gt;  removed unnecessary test&lt;br&gt;diff --git a/lib/simplegit.rb b/lib/simplegit.rb&lt;br&gt;index a0a60ae..47c6340 100644&lt;br&gt;--- a/lib/simplegit.rb&lt;br&gt;+++ b/lib/simplegit.rb&lt;br&gt;@@ -18,8 +18,3 @@ class SimpleGit&lt;br&gt;  end&lt;br&gt; end&lt;br&gt;-&lt;br&gt;-if $0 == __FILE__&lt;br&gt;- git = SimpleGit.new&lt;br&gt;- puts git.show&lt;br&gt;-end&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该选项除了显示基本信息之外，还附带了每次提交的变化。&lt;/p&gt;
&lt;h3 id=&#34;统计式的提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#统计式的提交历史&#34;&gt;#&lt;/a&gt; 统计式的提交历史&lt;/h3&gt;
&lt;p&gt;你也使用以下命令为  &lt;code&gt;git log&lt;/code&gt;  显示一系列简略的统计信息：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;--stat&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令会有以下输出：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; --&lt;span class=&#34;hljs-built_in&#34;&gt;stat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt; Rakefile | 2 +-&lt;br&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;br&gt;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 16:40:33 2008 -0700&lt;br&gt;  removed unnecessary test&lt;br&gt; lib/simplegit.rb | 5 -----&lt;br&gt; 1 file changed, 5 deletions(-)&lt;br&gt;commit a11bef06a3f659402fe7563abf99ad00de2209e6&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 10:31:28 2008 -0700&lt;br&gt;  first commit&lt;br&gt; README | 6 ++++++&lt;br&gt; Rakefile | 23 +++++++++++++++++++++++&lt;br&gt; lib/simplegit.rb | 25 +++++++++++++++++++++++++&lt;br&gt; 3 files changed, 54 insertions(+)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;格式化式的提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化式的提交历史&#34;&gt;#&lt;/a&gt; 格式化式的提交历史&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;  的  &lt;code&gt;--pretty&lt;/code&gt;  选项会提供一系列不同的格式化输出&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;--pretty&lt;/span&gt;=[&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt;|&lt;span class=&#34;hljs-type&#34;&gt;full&lt;/span&gt;|&lt;span class=&#34;hljs-type&#34;&gt;fully&lt;/span&gt;|&lt;span class=&#34;hljs-type&#34;&gt;oneline&lt;/span&gt;]&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--short: 包括提交哈希值、分支、作者、提交信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--full: 包括提交哈希值、分支、作者、提交者、提交信息 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--fuller: 包括提交哈希值、分支、作者、写作日期、提交者、提交日期、提交信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--oneline: 每次提交总共一行：包括提交哈希值、分支、提交信息&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了上述操作， &lt;code&gt;--pretty&lt;/code&gt;  选项提供了更强大的格式参数  &lt;code&gt;format&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;--pretty&lt;/span&gt;=format:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;format&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;常用选项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用选项&#34;&gt;#&lt;/a&gt; 常用选项&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交的完整哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交的简写哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;树的完整哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;树的简写哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父提交的完整哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父提交的简写哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%an&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者的电子邮件地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ad&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者修订日期（可以用 --date = 选项 来定制格式）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者修订日期，按多久以前的方式显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交者的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交者的电子邮件地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交日期（距今多长时间）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交说明&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;选项&lt;/td&gt;
&lt;td&gt;说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-----------------&lt;/td&gt;
&lt;td&gt;------------------------------------------------------------&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按补丁格式显示每个提交引入的差异&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示每次提交的文件修改统计信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--shortstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;只显示  &lt;code&gt;--stat&lt;/code&gt;  中最后的行数修改添加移除统计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅在提交信息后显示已修改的文件清单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示新增、修改、删除的文件清单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示  &lt;code&gt;SHA-1&lt;/code&gt;  校验和所有 40 个字符中的前几个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--relative-date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用较短的相对时间而不是完整格式显示日期（比如 “2 weeks ago”）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在日志旁以  &lt;code&gt;ASCII&lt;/code&gt;  图形显示分支与合并历史&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用其他格式显示历史提交信息。可用的选项包括  &lt;code&gt;oneline&lt;/code&gt; 、 &lt;code&gt;short&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、 &lt;code&gt;fuller &lt;/code&gt; 和  &lt;code&gt;format&lt;/code&gt; （用来定义自己的格式）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--oneline&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--pretty=oneline --abbrev-commit&lt;/code&gt;  合用的简写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;限制日志输出数量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#限制日志输出数量&#34;&gt;#&lt;/a&gt; 限制日志输出数量&lt;/h3&gt;
&lt;p&gt;使用如下方式限制日志输出数量：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &amp;lt;&lt;span class=&#34;hljs-literal&#34;&gt;-n&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#限制n条日志的输出&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;通过日期限制日志输出数量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过日期限制日志输出数量&#34;&gt;#&lt;/a&gt; 通过日期限制日志输出数量&lt;/h4&gt;
&lt;p&gt;使用以下命令限制日志输出数量：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &amp;lt;&lt;span class=&#34;hljs-literal&#34;&gt;--since&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--until&lt;/span&gt;&amp;gt;=&amp;lt;n&amp;gt;.&amp;lt;seconds|minutes|hours|days|monthes|years&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#代表自现在n秒|分钟|小时|日|月份|年的日志&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令可用的格式十分丰富 —— 可以是类似 “2008-01-15” 的具体的某一天，也可以是类似 “2 years 1 day 3 minutes ago” 的相对日期。&lt;/p&gt;
&lt;p&gt;还可以过滤出匹配指定条件的提交。 用  &lt;code&gt;--author&lt;/code&gt;  选项显示指定作者的提交，用  &lt;code&gt;--grep&lt;/code&gt;  选项搜索提交说明中 的关键字。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;你可以指定多个  &lt;code&gt;--author&lt;/code&gt;  和  &lt;code&gt;--grep&lt;/code&gt;  搜索条件，这样会只输出匹配 任意  &lt;code&gt;--author&lt;/code&gt;  模式和任意  &lt;code&gt;--grep&lt;/code&gt;  模式的提交。然而，如果你添加了  &lt;code&gt;--all-match&lt;/code&gt;  选项， 则只会输出匹配所有  &lt;code&gt;--grep&lt;/code&gt;  模式的提交。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个非常有用的过滤器是  &lt;code&gt;-S&lt;/code&gt; （俗称 “pickaxe” 选项，取 “用鹤嘴锄在土里捡石头” 之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;-s&lt;/span&gt; &amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一个很实用的  &lt;code&gt;git log&lt;/code&gt;  选项是路径（path）， 如果只关心某些文件或者目录的历史提交，可以在  &lt;code&gt;git log&lt;/code&gt;  选项的最后指定它们的路径。 因为是放在最后位置上的选项，所以用两个短划线（–）隔开之前的选项和后面限 定的路径名。&lt;/p&gt;
&lt;h4 id=&#34;常用选项-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用选项-2&#34;&gt;#&lt;/a&gt; 常用选项&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示最近的  &lt;code&gt;n&lt;/code&gt;  条提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--since&lt;/code&gt; ,  &lt;code&gt;--after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示指定时间之后的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--until&lt;/code&gt; ,  &lt;code&gt;--before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示指定时间之前的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示作者匹配指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--committer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示提交者匹配指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示提交说明中包含指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示添加或删除内容匹配指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;撤销操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#撤销操作&#34;&gt;#&lt;/a&gt; 撤销操作&lt;/h2&gt;
&lt;p&gt;在任何一个阶段，你都有可能想要撤消某些操作。 这里，我们将会学习几个撤消你所做修改的基本工具。 注意，有些撤消操作是不可逆的。 这是在使用  &lt;code&gt;Git&lt;/code&gt;  的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。&lt;/p&gt;
&lt;h3 id=&#34;撤销提交&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#撤销提交&#34;&gt;#&lt;/a&gt; 撤销提交&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git commit &lt;span class=&#34;hljs-literal&#34;&gt;--amend&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#该命令会将暂存区中的文件加入上次提交中，同时可以对上次所写的提示信息进行修改。第二次提交将会修改第一次提交&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;取消暂存的文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#取消暂存的文件&#34;&gt;#&lt;/a&gt; 取消暂存的文件&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git restore &lt;span class=&#34;hljs-literal&#34;&gt;--staged&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将暂存区的文件变为恢复至为暂存的状态，并保留使用add命令之后的修改。&lt;/span&gt;&lt;br&gt;git reset HEAD &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将暂存区的文件变为恢复至为暂存的状态，并保留使用add命令之后的修改。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;  确实是个危险的命令，如果加上了  &lt;code&gt;--hard&lt;/code&gt;  选项则更是如此。 然而在上述场景中，工作目录中的文件尚未修改，因此相对安全一些。&lt;/p&gt;
&lt;p&gt;到目前为止这个神奇的调用就是你需要对  &lt;code&gt;git reset&lt;/code&gt;  命令了解的全部。 我们将会在&lt;a href=&#34;#%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86&#34;&gt;重置揭密&lt;/a&gt;中了解 reset 的 更多细节以及如何掌握它做一些真正有趣的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;撤销文件的修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#撤销文件的修改&#34;&gt;#&lt;/a&gt; 撤销文件的修改&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;--&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将工作区的文件恢复至最后一次提交的状态。&lt;/span&gt;&lt;br&gt;git restore &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将工作区的文件恢复至最后一次提交的状态。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;请务必记得  &lt;code&gt;git checkout --&lt;/code&gt;  是一个危险的命令。 你对那个文件在本地的任何修改都会消失 ——  &lt;code&gt;Git&lt;/code&gt;  会用最近提交的版本覆盖掉它。除非你确实清楚不想要对那个文件的本地修改了，否则请不要使用这个命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;记住，在  &lt;code&gt;Git&lt;/code&gt;  中任何已提交的东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用  &lt;code&gt;--amend&lt;/code&gt;  选项覆盖的提交也可以恢复（阅读&lt;a href=&#34;#%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D&#34;&gt;数据恢复&lt;/a&gt;了解数据恢复）。 然而，任何你未提交的东西丢失后很可能再也找不到了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程仓库&#34;&gt;#&lt;/a&gt; 远程仓库&lt;/h2&gt;
&lt;p&gt;远程仓库是指托管在因特网或其他网络中的你的项目的版本库。你可以有好几个远程仓库，通常有些仓库对你只读，有些则可以读写。 与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。管理远程仓库包括了解如何添加远程仓库、移除无效的远程仓库、管理不同的远程分支并定义它们是否被跟踪等等。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git clone &amp;lt;url&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;# Git 会自动为该 URL 创建一个名为 origin 的仓库名。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查看远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看远程仓库&#34;&gt;#&lt;/a&gt; 查看远程仓库&lt;/h3&gt;
&lt;p&gt;使用如下命令，会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到  &lt;code&gt;origin&lt;/code&gt;  —— 这是  &lt;code&gt;Git&lt;/code&gt;  给你克隆的仓库服务器的默认名字&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote &lt;span class=&#34;hljs-comment&#34;&gt;#查看已创建的仓库名&lt;/span&gt;&lt;br&gt;git remote &lt;span class=&#34;hljs-literal&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#可以查看需要读写远程仓库使用的 Git 保存的简写与其对应的 URL&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;查看单个远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看单个远程仓库&#34;&gt;#&lt;/a&gt; 查看单个远程仓库&lt;/h4&gt;
&lt;p&gt;如果想要查看某一个远程仓库的更多信息，可以运行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote show &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#查看某个指定仓库&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它同样会列出远程仓库的  &lt;code&gt;URL&lt;/code&gt;  与跟踪分支的信息。 这些信息非常有用，它告诉你正处于哪个分支，并且如果运行  &lt;code&gt;git pull&lt;/code&gt; ， 就会抓取所有的远程引用，然后将远程  &lt;code&gt;master&lt;/code&gt;  分支合并到本地  &lt;code&gt;master&lt;/code&gt;  分支。 它也会列出拉取到的所有远程引用。&lt;/p&gt;
&lt;p&gt;这个命令会列出当你在特定的分支上执行  &lt;code&gt;git push&lt;/code&gt;  会自动地推送到哪一个远程分支。它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，还有当你执行  &lt;code&gt;git pull&lt;/code&gt;  时哪些本地分支可以与它跟踪的远程分支自动合并。&lt;/p&gt;
&lt;h3 id=&#34;添加远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加远程仓库&#34;&gt;#&lt;/a&gt; 添加远程仓库&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote add &amp;lt;repo&amp;gt; &amp;lt;url&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#为指定的 URL 创建仓库&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;远程仓库的重命名与移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程仓库的重命名与移除&#34;&gt;#&lt;/a&gt; 远程仓库的重命名与移除&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote rename &amp;lt;old&lt;span class=&#34;hljs-literal&#34;&gt;-repo&lt;/span&gt;&amp;gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;new-repo&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#重命名,值得注意的是这同样也会修改你所有远程跟踪的分支名字&lt;/span&gt;&lt;br&gt;git remote remove &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除某个远程仓库，所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;推送到远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推送到远程仓库&#34;&gt;#&lt;/a&gt; 推送到远程仓库&lt;/h3&gt;
&lt;p&gt;当你想分享你的项目时，必须将其推送到上游，使用以下命令推送至远程仓库&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;repo&amp;gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#向指定仓库推送指定的分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;从远程仓库中抓取与拉取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#从远程仓库中抓取与拉取&#34;&gt;#&lt;/a&gt; 从远程仓库中抓取与拉取&lt;/h3&gt;
&lt;p&gt;从远程仓库中获得数据，可以执行如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git fetch &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#拉取远程仓库的默认分支的最新内容&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;必须注意  &lt;code&gt;git fetch&lt;/code&gt;  命令只会将数据下载到你的本地仓库 ——&lt;strong&gt; 它并不会自动合并或修改你当前的工作&lt;/strong&gt;。当准备好时你必须手动将其合并入你的工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你的当前分支设置了跟踪远程分支（阅读下一节&lt;a href=&#34;#%E5%88%86%E6%94%AF&#34;&gt; Git 分支&lt;/a&gt;了解更多信息），那么可以用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下， &lt;code&gt;git clone&lt;/code&gt;  命令会自动设置本地  &lt;code&gt;master&lt;/code&gt;  分支跟踪克隆的远程仓库的  &lt;code&gt;master&lt;/code&gt;  分支（或其它名字的默认分支）。运行  &lt;code&gt;git pull&lt;/code&gt;  通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git pull &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#拉取远程仓库的默认分支的最新内容并合并分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;打标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打标签&#34;&gt;#&lt;/a&gt; 打标签&lt;/h2&gt;
&lt;p&gt;像其他版本控制系统（ &lt;code&gt;VCS&lt;/code&gt; ）一样， &lt;code&gt;Git&lt;/code&gt;  可以给仓库历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（  &lt;code&gt;v1.0&lt;/code&gt;  、 &lt;code&gt;v2.0&lt;/code&gt;  等等）。&lt;/p&gt;
&lt;h3 id=&#34;列出标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列出标签&#34;&gt;#&lt;/a&gt; 列出标签&lt;/h3&gt;
&lt;p&gt;在 Git 中列出已有的标签非常简单，只需要输入如下命令，就能按字母顺序列出标签：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git tag [-l]|[--list]&lt;/span&gt;&lt;br&gt;v1.0&lt;br&gt;v2.0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以按照特定的模式查找标签。 例如， &lt;code&gt;Git&lt;/code&gt;  自身的源代码仓库包含标签的数量超过  &lt;code&gt;500&lt;/code&gt;  个。 如果只对  &lt;code&gt;1.8.5&lt;/code&gt;  系列感兴趣，可以运行：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git tag -l &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;v1.8.5*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;v1.8.5&lt;br&gt;v1.8.5-rc0&lt;br&gt;v1.8.5-rc1&lt;br&gt;v1.8.5-rc2&lt;br&gt;v1.8.5-rc3&lt;br&gt;v1.8.5.1&lt;br&gt;v1.8.5.2&lt;br&gt;v1.8.5.3&lt;br&gt;v1.8.5.4&lt;br&gt;v1.8.5.5&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-l&lt;/span&gt; &amp;lt;regex&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#按照正则模式查找标签&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;按照通配符列出标签需要  &lt;code&gt;-l&lt;/code&gt;  或  &lt;code&gt;--list&lt;/code&gt;  选项，如果你只想要完整的标签列表，那么运行  &lt;code&gt;git tag&lt;/code&gt;  就会默认假定你想要一个列表，它会直接给你列出来， 此时的  &lt;code&gt;-l&lt;/code&gt;  或  &lt;code&gt;--list&lt;/code&gt;  是可选的。 然而，如果你提供了一个匹配标签名的通配模式，那么  &lt;code&gt;-l&lt;/code&gt;  或  &lt;code&gt;--list&lt;/code&gt;  就是强制使用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;创建标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建标签&#34;&gt;#&lt;/a&gt; 创建标签&lt;/h3&gt;
&lt;p&gt;Git 支持两种标签：&lt;strong&gt;轻量标签（lightweight&lt;/strong&gt;）与 &lt;strong&gt;附注标签（annotated）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;轻量标签很像一个不会改变的分支 —— 它只是某个特定提交的引用。&lt;/p&gt;
&lt;p&gt;附注标签是存储在  &lt;code&gt;Git&lt;/code&gt;  数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件 地址、日期时间，此外还有一个标签信息，并且可以使用  &lt;code&gt;GNU Privacy Guard （GPG）&lt;/code&gt; 签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。&lt;/p&gt;
&lt;h4 id=&#34;附注标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#附注标签&#34;&gt;#&lt;/a&gt; 附注标签&lt;/h4&gt;
&lt;p&gt;使用以下方式添加附注标签：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-a&lt;/span&gt; &amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;msg&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-m&lt;/code&gt;  选项指定了一条将会存储在标签中的信息。如果没有为附注标签指定一条信息， &lt;code&gt;Git&lt;/code&gt;  会启动编辑器要求你输入信息。&lt;/p&gt;
&lt;p&gt;通过使用  &lt;code&gt;git show&lt;/code&gt;  命令可以看到标签信息和与之对应的提交信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git show v1.4&lt;/span&gt;&lt;br&gt;tag v1.4&lt;br&gt;Tagger: Ben Straub &amp;lt;ben@straub.cc&amp;gt;&lt;br&gt;Date: Sat May 3 20:19:12 2014 -0700&lt;br&gt;my version 1.4&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;轻量标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#轻量标签&#34;&gt;#&lt;/a&gt; 轻量标签&lt;/h4&gt;
&lt;p&gt;轻量标签本质上是将提交校验和存储到一个文件中 —— 没有保存任何其他信息。 创建轻量标签，不需要使用  &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-s&lt;/code&gt;  或  &lt;code&gt;-m&lt;/code&gt;  选项，只需要提供标签名字：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时，如果在标签上运行  &lt;code&gt;git show&lt;/code&gt; ，你不会看到额外的标签信息。 命令只会显示出提交信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git show v1.4-lw&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;后期打标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#后期打标签&#34;&gt;#&lt;/a&gt; 后期打标签&lt;/h4&gt;
&lt;p&gt;你也可以对过去的提交打标签。 假设提交历史是这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; --pretty=oneline&lt;/span&gt;&lt;br&gt;15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch &amp;#x27;experiment&amp;#x27;&lt;br&gt;a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support&lt;br&gt;0d52aaab4479697da7686c15f77a3d64d9165190 one more thing&lt;br&gt;6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch &amp;#x27;experiment&amp;#x27;&lt;br&gt;0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function&lt;br&gt;4682c3261057305bdd616e23b64b0857d832627b added a todo file&lt;br&gt;166ae0c4d3f420721acbb115cc33848dfcc2121a started write support&lt;br&gt;9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile&lt;br&gt;964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo&lt;br&gt;8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，假设在  &lt;code&gt;v1.2&lt;/code&gt;  时你忘记给项目打标签，也就是在 “ &lt;code&gt;updated rakefile&lt;/code&gt; ” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-a&lt;/span&gt; v1.&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;fceb02&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;共享标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#共享标签&#34;&gt;#&lt;/a&gt; 共享标签&lt;/h3&gt;
&lt;p&gt;默认情况下， &lt;code&gt;git push&lt;/code&gt;  命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样 —— 你可以运行以下命令来推送标签：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;repo&amp;gt; &amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#推送标签至远程仓库&lt;/span&gt;&lt;br&gt;git push &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--tags&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#推送所有不在远程仓库服务器上的标签至远程仓库&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;  推送两种标签 使用  &lt;code&gt;git push  --tags&lt;/code&gt;  推送标签并不会区分轻量标签和附注标签， 没有简单的选项能够让你只选择推送一种标签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;删除标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除标签&#34;&gt;#&lt;/a&gt; 删除标签&lt;/h3&gt;
&lt;p&gt;要删除掉你本地仓库上的标签，可以使用如下名命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意上述命令并不会从任何远程仓库中移除这个标签，你必须用如下命令来更新远程仓库：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;remote&amp;gt; :refs/tags/&amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外一种高效的删除方式为：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--delete&lt;/span&gt; &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;检出标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检出标签&#34;&gt;#&lt;/a&gt; 检出标签&lt;/h3&gt;
&lt;p&gt;如果你想查看某个标签所指向的文件版本，可以使用如下命令，&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;这个操作使你的仓库处于 “ &lt;strong&gt;分离头指针（detached HEAD）&lt;/strong&gt;” 的状态 —— 这个状态有些不好的副作用&lt;/p&gt;
&lt;p&gt;在 “分离头指针” 状态下，如果你做了某些更改然后提交它们，标签不会发生变化，但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本操作&#34;&gt;#&lt;/a&gt; 基本操作&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag [-&lt;span class=&#34;hljs-type&#34;&gt;l&lt;/span&gt;]|[--&lt;span class=&#34;hljs-type&#34;&gt;list&lt;/span&gt;] &lt;span class=&#34;hljs-comment&#34;&gt;#以字母顺序展示标签&lt;/span&gt;&lt;br&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-l&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--list&lt;/span&gt; &amp;lt;regx&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#通过正则表达式查找标签&lt;/span&gt;&lt;br&gt;git show &amp;lt;tag&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#查看某个标签的内容&lt;/span&gt;&lt;br&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;tag&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除本地某个标签&lt;/span&gt;&lt;br&gt;git push &amp;lt;remote&amp;gt; :refs/tags/&amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除远程仓库的指定标签&lt;/span&gt;&lt;br&gt;git push &amp;lt;remote&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--delete&lt;/span&gt; &amp;lt;remote&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除远程仓库的指定标签&lt;/span&gt;&lt;br&gt;git push &amp;lt;remote&amp;gt; tags &lt;span class=&#34;hljs-comment&#34;&gt;#向远程仓库推送所有标签&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;git别名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git别名&#34;&gt;#&lt;/a&gt; Git 别名&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的  &lt;code&gt;Git&lt;/code&gt;  命令，可以通过  &lt;code&gt;git config&lt;/code&gt;  文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.co checkout&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.br branch&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.ci commit&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.st status&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你你可以使用如下别名来代替一些命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git co &lt;span class=&#34;hljs-comment&#34;&gt;#git checkout&lt;/span&gt;&lt;br&gt;git br &lt;span class=&#34;hljs-comment&#34;&gt;#git branch&lt;/span&gt;&lt;br&gt;git ci &lt;span class=&#34;hljs-comment&#34;&gt;#git commit&lt;/span&gt;&lt;br&gt;git st &lt;span class=&#34;hljs-comment&#34;&gt;#git status&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出， &lt;code&gt;Git&lt;/code&gt;  只是简单地将别名替换为对应的命令。&lt;/p&gt;
&lt;p&gt;然而，你可能想要执行外部命令，而不是一个  &lt;code&gt;Git&lt;/code&gt;  子命令。 如果是那样的话，可以在命令前面加入 &lt;code&gt;!&lt;/code&gt;  符号。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.l &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;!ls&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样当你执行  &lt;code&gt;git l&lt;/code&gt;  命令时，实际上会执行  &lt;code&gt;ls&lt;/code&gt;  命令&lt;/p&gt;
&lt;h1 id=&#34;git分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git分支&#34;&gt;#&lt;/a&gt; Git 分支&lt;/h1&gt;
&lt;p&gt;几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。在很多版本控制系统中，这是一个略微低效的过程 —— 常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。&lt;/p&gt;
&lt;p&gt;然而  &lt;code&gt;Git&lt;/code&gt;  处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同， &lt;code&gt;Git&lt;/code&gt;  鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。理解和精通这一特性，你便会意识到  &lt;code&gt;Git&lt;/code&gt;  是如此的强大而又独特，并且从此真正改变你的开发方式。&lt;/p&gt;
&lt;h2 id=&#34;分支简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支简介&#34;&gt;#&lt;/a&gt; 分支简介&lt;/h2&gt;
&lt;p&gt;在进行提交操作时， &lt;code&gt;Git&lt;/code&gt;  会保存一个&lt;strong&gt;提交对象（commit object）&lt;/strong&gt;。 知道了  &lt;code&gt;Git&lt;/code&gt;  保存数据的方式，我们可以很自然的想到 —— 该提交对象会包含一个指向暂存内容快照的指针。 但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。 首次提交产生的提交对象没有父对象，&lt;strong&gt;普通提交操作产生的提交对象有一个父对象， 而由多个分支合并产生的提交对象有多个父对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用我们在&lt;a href=&#34;#%E4%BF%9D%E8%AF%81%E5%AE%8C%E6%95%B4%E6%80%A7&#34;&gt;完整性&lt;/a&gt;中提到的 &lt;strong&gt;SHA-1 哈希算法&lt;/strong&gt;），然后会把当前版本的文件快照保存到  &lt;code&gt;Git&lt;/code&gt;  仓库中 （ &lt;code&gt;Git&lt;/code&gt;  使用  &lt;code&gt;blob&lt;/code&gt;  对象来保存它们），最终将校验和加入到暂存区域等待提交。&lt;/p&gt;
&lt;p&gt;当使用  &lt;code&gt;git commit&lt;/code&gt;  进行提交操作时， &lt;code&gt;Git&lt;/code&gt;  会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后 在  &lt;code&gt;Git&lt;/code&gt;  仓库中这些校验和保存为树对象。随后， &lt;code&gt;Git&lt;/code&gt;  便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个&lt;strong&gt;树对象（项目根目录）&lt;strong&gt;的&lt;/strong&gt;指针&lt;/strong&gt;。 如此一来， &lt;code&gt;Git&lt;/code&gt;  就可以在需要的时候重现此次保存的快照。 现在， &lt;code&gt;Git&lt;/code&gt;  仓库中有五个对象：三个 &lt;strong&gt;blob 对象（保存着文件快照）&lt;/strong&gt;、一个 ** 树对象（记录着目录结构和 blob 对 象索引）** 以及一个 &lt;strong&gt;提交对象（包含着指向前述树对象的指针和所有提交信息）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首次提交对象及其树结构如下：&lt;/p&gt;
&lt;img src=&#34;ct_first.png&#34; alt=&#34;首次提交对象及其树结构&#34; /&gt;
&lt;p&gt;做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针：&lt;/p&gt;
&lt;img src=&#34;ct.png&#34; alt=&#34;提交对象及其父对象&#34; /&gt;
&lt;h2 id=&#34;git-分支本质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-分支本质&#34;&gt;#&lt;/a&gt; Git 分支本质&lt;/h2&gt;
&lt;p&gt;指向提交对象的可移动&lt;strong&gt;指针&lt;/strong&gt;，默认名字为  &lt;code&gt;master&lt;/code&gt;  。在多次提交操作之后，你其实已经有一个指向最后那个提交对象的  &lt;code&gt;master&lt;/code&gt;  分支。  &lt;code&gt;master&lt;/code&gt;  分支会在每次提交时自动向前移动。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  的  &lt;code&gt;master&lt;/code&gt;  分支并不是一个特殊分支。 它就跟其它分支完全没有区别。 之所以几乎每一个仓库都有  &lt;code&gt;master&lt;/code&gt;  分支，是因为  &lt;code&gt;git init&lt;/code&gt;  命令默认创建它，并且大多数人都懒得去改动它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;git_history.png&#34; alt=&#34;分支及其提交历史&#34;&gt;
&lt;h2 id=&#34;分支新建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支新建&#34;&gt;#&lt;/a&gt; 分支新建&lt;/h2&gt;
&lt;p&gt;使用如下命令创建一个分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#这会在当前所在的提交对象上创建一个指针&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然上述命令并不会让你切换至新创建的分支&lt;/p&gt;
&lt;p&gt;例如：当我想创建一个  &lt;code&gt;testing&lt;/code&gt;  分支，使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch testing&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提交历史会如下显示：&lt;/p&gt;
&lt;img src=&#34;git_new_branch.png&#34; alt=&#34;两个指向相同提交历史的分支&#34;&gt;
&lt;p&gt;那么， &lt;code&gt;Git&lt;/code&gt;  又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为  &lt;code&gt;HEAD&lt;/code&gt;  的特殊指针。&lt;strong&gt;指向当前所在的本地分支&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;git_head.png&#34; alt=&#34;HEAD 指向当前所在的分支&#34;&gt;
&lt;h2 id=&#34;分支切换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支切换&#34;&gt;#&lt;/a&gt; 分支切换&lt;/h2&gt;
&lt;p&gt;执行如下命令切换至对应分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样  &lt;code&gt;HEAD&lt;/code&gt;  就会指向指定的分支了。当你再次提交时，指定的分支和  &lt;code&gt;HEAD&lt;/code&gt;  将会向前移动，其他分支将会留在原地。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;分支切换会改变你工作目录中的文件。在切换分支时，一定要注意&lt;strong&gt;你工作目录里的文件会被改变&lt;/strong&gt;。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果  &lt;code&gt;Git&lt;/code&gt;  不能干净利落地完成这个任务，它将禁止切换分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若你想在创建分支的时候自动切换至新分支，可以执行如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;-b&lt;/span&gt; &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;分支分叉查看&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支分叉查看&#34;&gt;#&lt;/a&gt; 分支分叉查看&lt;/h3&gt;
&lt;p&gt;当你再新创建的分支和旧分支上都做了提交，这个项目的提交历史就会产生分叉，例如：&lt;/p&gt;
&lt;img src=&#34;branch_split.png&#34; alt=&#34;项目分叉历史&#34;&gt;
&lt;p&gt;执行如下命令，查看提交历史、各个分支的指向以及项目的分支分叉情况：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; --oneline --decorate --graph --all&lt;/span&gt;&lt;br&gt;* c2b9e (HEAD, master) made other changes&lt;br&gt;| * 87ab2 (testing) made a change&lt;br&gt;|/&lt;br&gt;* f30ab add feature #32 - ability to add new formats to the&lt;br&gt;* 34ac2 fixed bug #1328 - stack overflow under certain conditions&lt;br&gt;* 98ca9 initial commit of my project&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;由于  &lt;code&gt;Git&lt;/code&gt;  的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分支删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支删除&#34;&gt;#&lt;/a&gt; 分支删除&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除指定分支&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-D&lt;/span&gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#可以强制删除处于未合并状态的分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;分支的合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支的合并&#34;&gt;#&lt;/a&gt; 分支的合并&lt;/h2&gt;
&lt;p&gt;如果你想将两个分支合并在一起，使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;branch&lt;span class=&#34;hljs-literal&#34;&gt;-from&lt;/span&gt;&amp;gt;&lt;br&gt;git merge &amp;lt;branch&lt;span class=&#34;hljs-literal&#34;&gt;-to&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将&amp;lt;branch-from&amp;gt;分支合并到&amp;lt;branch-to&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你成功合并后，就可以删除你不要的分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;简单分支合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单分支合并&#34;&gt;#&lt;/a&gt; 简单分支合并&lt;/h4&gt;
&lt;p&gt;这种情况是，想合并的分支是所处的分支的直接后继。&lt;/p&gt;
&lt;p&gt;执行合并分支命令后， &lt;code&gt;Git&lt;/code&gt;  会提醒你 &lt;strong&gt;Fast-forward (快进)&lt;/strong&gt; ，这意为简单的移动分支指针。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fast-forward (快进)&lt;/strong&gt; ：当你试图合并两个分支时， 如果顺着一个分支走下去能够到达另一个分支，那么  &lt;code&gt;Git&lt;/code&gt;  在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;复杂分支合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂分支合并&#34;&gt;#&lt;/a&gt; 复杂分支合并&lt;/h4&gt;
&lt;p&gt;想合并的分支不为所处的分支的直接后继。换言之，想和并的分支在所处分支之前就已经&lt;strong&gt;分叉开 (diverged)&lt;strong&gt; 了，即两个分支同时拥有一个&lt;/strong&gt;共同的祖先&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这时当执行合并命令时，Git 会将&lt;strong&gt;共同祖先的快照&lt;/strong&gt;，&lt;strong&gt;所处分支的快照&lt;/strong&gt;，&lt;strong&gt;想合并分支的快照&lt;/strong&gt;进行一个简单的三方合并。 &lt;code&gt;Git&lt;/code&gt;  会创建一个新的快照，并同时创建一个提交对象指向它，随后移动所处分支至该提交对象处。此时这个提交对象拥有两个祖先 (所处分支和想和并分支指向的提交对象)。移动所处分支至新的提交对象。&lt;/p&gt;
&lt;h4 id=&#34;遇到冲突时的分支合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#遇到冲突时的分支合并&#34;&gt;#&lt;/a&gt; 遇到冲突时的分支合并&lt;/h4&gt;
&lt;p&gt;有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修 改， &lt;code&gt;Git&lt;/code&gt;  就没法干净的合并它们。&lt;/p&gt;
&lt;p&gt;此时  &lt;code&gt;Git&lt;/code&gt;  做了合并，但是没有自动地创建一个新的合并提交。  &lt;code&gt;Git&lt;/code&gt;  会暂停下来，等待你去解决合并产生的冲突。&lt;/p&gt;
&lt;p&gt;你可以在合并冲突后的任意时刻使用  &lt;code&gt;git status&lt;/code&gt;  命令来查看那些因包含合并冲突而处于 ** 未合并（unmerged）** 状态的文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD:index.html&lt;br&gt;&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;contact : email.support@github.com&amp;lt;/div&amp;gt;&lt;br&gt;=======&lt;br&gt;&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;&lt;br&gt; please contact us at support@github.com&lt;br&gt;&amp;lt;/div&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; iss53:index.html&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在冲突文件中， &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/code&gt;  以下， &lt;code&gt;=======&lt;/code&gt;  以上为  &lt;code&gt;HEAD&lt;/code&gt;  所指向的分支的内容， &lt;code&gt;=======&lt;/code&gt;  以下， &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;  以上为想合并的分支的内容。为了解决冲突，你必须选择使用由  &lt;code&gt;=======&lt;/code&gt;  分割的两部分中的一个，或者你也可以自行合并这些内容。并且删除  &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;  ,  &lt;code&gt;=======&lt;/code&gt;  , 和  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;  这些内容。&lt;/p&gt;
&lt;p&gt;在你解决了所有文件里的冲突之后，对每个文件使用  &lt;code&gt;git add&lt;/code&gt;  命令来将其标记为冲突已解决。或者使用或者 &lt;code&gt;git mergetool&lt;/code&gt;  命令通过  &lt;code&gt;Git&lt;/code&gt;  自带的可视化程序执行修改。一旦暂存这些原本有冲突的文件， &lt;code&gt;Git&lt;/code&gt;  就会将它们标记为冲突已解决。&lt;/p&gt;
&lt;p&gt;如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入  &lt;code&gt;git commit&lt;/code&gt;  来完成合并提交。 默认情况下提交信息看起来像下面这个样子：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Merge branch &amp;#x27;iss53&amp;#x27;&lt;br&gt;Conflicts:&lt;br&gt;  index.html&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# It looks like you may be committing a merge.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;If this is not correct, please remove the file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;.MERGE_HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;and try again.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Please enter the commit message &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; your changes. Lines starting&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;with &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;#&amp;#x27;&lt;/span&gt; will be ignored, and an empty message aborts the commit.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;On branch master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;All conflicts fixed but you are still merging.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Changes to be committed:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;modified: index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;分支管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支管理&#34;&gt;#&lt;/a&gt; 分支管理&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-comment&#34;&gt;#可查看已有分支。其中带*号的为HEAD指向的分支&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#查看各个分支的最后一次提交。&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;--merged&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--no-merged&lt;/span&gt; [&lt;span class=&#34;hljs-type&#34;&gt;branch&lt;/span&gt;] &lt;span class=&#34;hljs-comment&#34;&gt;#查看&amp;lt;已|未&amp;gt;合并到[当前|指定]分支的分支&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-M&lt;/span&gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将当前分支重命名未&amp;lt;branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;远程分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程分支&#34;&gt;#&lt;/a&gt; 远程分支&lt;/h2&gt;
&lt;p&gt;远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过如下命令来显式地获得远程引用的完整列表：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;hljs-literal&#34;&gt;-remote&lt;/span&gt; &amp;lt;remote&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者通过如下命令获得远程分支的更多信息：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote show &amp;lt;remote&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而，一个更常见的做法是利用&lt;strong&gt;远程跟踪分支&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;远程跟踪分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程跟踪分支&#34;&gt;#&lt;/a&gt; 远程跟踪分支&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;远程跟踪分&lt;/strong&gt;支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信，  &lt;code&gt;Git&lt;/code&gt;  就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。&lt;/p&gt;
&lt;p&gt;它们以  &lt;code&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt;  的形式命名。 例如，如果你想要看你最后一次与远程仓库  &lt;code&gt;origin&lt;/code&gt;  通信时  &lt;code&gt;master&lt;/code&gt;  分支的状态，你可以查看  &lt;code&gt;origin/master&lt;/code&gt;  分支。 你与同事合作解决一个问题并且他们推送了一个  &lt;code&gt;iss53&lt;/code&gt;  分支，你可能有自己的本地  &lt;code&gt;iss53&lt;/code&gt;  分支， 然而在服务器上的分支会以  &lt;code&gt;origin/iss53&lt;/code&gt;  来表示。 这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在  &lt;code&gt;git.ourcompany.com&lt;/code&gt;  的  &lt;code&gt;Git&lt;/code&gt;  服 务器。 如果你从这里克隆， &lt;code&gt;Git&lt;/code&gt;  的  &lt;code&gt;clone&lt;/code&gt;  命令会为你自动将其命名为  &lt;code&gt;origin&lt;/code&gt; ，拉取它的所有数据， 创建一个指向它的  &lt;code&gt;master&lt;/code&gt;  分支的指针，并且在本地将其命名为  &lt;code&gt;origin/master&lt;/code&gt; 。  &lt;code&gt;Git&lt;/code&gt;  也会给你一个与  &lt;code&gt;origin&lt;/code&gt;  的 m &lt;code&gt;aster&lt;/code&gt;  分支在指向同一个地方的本地  &lt;code&gt;master&lt;/code&gt;  分支，这样你就有工作的基础。&lt;/p&gt;
&lt;img src=&#34;after_clone.png&#34; alt=&#34;克隆之后的服务器与本地仓库&#34;/&gt;
&lt;p&gt;如果你在本地的  &lt;code&gt;master&lt;/code&gt;  分支做了一些工作，在同一段时间内有其他人推送提交到  &lt;code&gt;git.ourcompany.com&lt;/code&gt;  并且更新了它的  &lt;code&gt;master&lt;/code&gt;  分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与  &lt;code&gt;origin&lt;/code&gt;  服务器连接（并拉取数据），你的  &lt;code&gt;origin/master&lt;/code&gt;  指针就不会移动。&lt;/p&gt;
&lt;img src=&#34;remote_local.png&#34; alt=&#34;本地与远程的工作可以分叉&#34;/&gt;
&lt;p&gt;如果要与给定的远程仓库同步数据，使用以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git fetch &amp;lt;remote&amp;gt;&lt;br&gt;git fetch origin &lt;span class=&#34;hljs-comment&#34;&gt;#本例中&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令查找 “origin” 是哪一个服务器（在本例中，它是  &lt;code&gt;git.ourcompany.com&lt;/code&gt; ），从中抓取本地没有的数据，并且更新本地数据库，移动  &lt;code&gt;origin/master&lt;/code&gt;  指针到更新之后的位置。&lt;/p&gt;
&lt;img src=&#34;fetch.png&#34; alt=&#34; git fetch 更新你的远程跟踪分支&#34;&gt;
&lt;h3 id=&#34;推送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推送&#34;&gt;#&lt;/a&gt; 推送&lt;/h3&gt;
&lt;p&gt;当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。本地的分支并不会自动与远程仓库同步 —— 你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。&lt;/p&gt;
&lt;p&gt;使用如下命令进行推送：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有些工作被简化了。  &lt;code&gt;Git&lt;/code&gt;  自动将  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支名字展开为：&lt;/p&gt;
&lt;figure class=&#34;highlight elixir&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs elixir&#34;&gt;refs/heads/&amp;lt;branch&amp;gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:refs/heads/&amp;lt;branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以运行以下命令进行推送：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push origin &amp;lt;branch&amp;gt;:&amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它会做同样的事 —— 也就是说 “推送本地的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支，将其作为远程仓库的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。&lt;/p&gt;
&lt;p&gt;下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支  &lt;code&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt; ，指向服务器的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支的引用。&lt;/p&gt;
&lt;p&gt;要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支 —— 只有一个不可以修改的  &lt;code&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt;  指针。&lt;/p&gt;
&lt;p&gt;可以运行合并命令将这些工作合并到当前所在的分支。 如果想要在自己的本地分支上工作，可以将其建立在远程跟踪分支之上：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;-b&lt;/span&gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;new-branch&lt;/span&gt;&amp;gt; &amp;lt;old&lt;span class=&#34;hljs-literal&#34;&gt;-sbranch&lt;/span&gt;&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会给你一个用于工作的本地分支，并且起点位于  &lt;code&gt;&amp;lt;old-sbranch&amp;gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;跟踪分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跟踪分支&#34;&gt;#&lt;/a&gt; 跟踪分支&lt;/h3&gt;
&lt;p&gt;从一个远程跟踪分支检出一个本地分支会自动创建所谓的 “跟踪分支”（它跟踪的分支叫做 “上游分支”）。跟踪分支是与远程分支有直接关系的本地分支。如果在一个跟踪分支上输入  &lt;code&gt;git pull&lt;/code&gt; ， &lt;code&gt;Git&lt;/code&gt;  能自动地识别去哪个服务器上抓取、合并到哪个分支。&lt;/p&gt;
&lt;p&gt;当克隆一个仓库时，它通常会自动地创建一个跟踪  &lt;code&gt;origin/master&lt;/code&gt;  的  &lt;code&gt;master&lt;/code&gt;  分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪  &lt;code&gt;master&lt;/code&gt;  分支。 最简单的实例就是像之前看到的那样，运行 &lt;code&gt;git checkout -b &amp;lt;new-branch&amp;gt; &amp;lt;old-sbranch&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是一个十分常用 的操作所以 Git 提供了  &lt;code&gt;--track&lt;/code&gt;  快捷方式：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;--track&lt;/span&gt; &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#创建一个跟踪&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;的跟踪分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么  &lt;code&gt;Git&lt;/code&gt;  就会为你创建一个跟踪分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;-b&lt;/span&gt; &amp;lt;branch&amp;gt; &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用  &lt;code&gt;-u&lt;/code&gt;  或  &lt;code&gt;--set-upstream-to&lt;/code&gt;  选项运行  &lt;code&gt;git branch&lt;/code&gt;  来显式地设置：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-u&lt;/span&gt; &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;上游快捷方式&lt;/p&gt;
&lt;p&gt;当设置好跟踪分支后，可以通过简写  &lt;code&gt;@&amp;#123;upstream&amp;#125;&lt;/code&gt;  或  &lt;code&gt;@&amp;#123;u&amp;#125;&lt;/code&gt;  来引用它的上游分支。 所以处于  &lt;code&gt;master&lt;/code&gt;  分支时并且它正在跟踪  &lt;code&gt;origin/master&lt;/code&gt;  时，如果愿意的话可以使用  &lt;code&gt;git merge @&amp;#123;u&amp;#125;&lt;/code&gt;  来取代  &lt;code&gt;git merge origin/master&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git branch -vv&lt;/span&gt;&lt;br&gt;  iss53 7e424c3 [origin/iss53: ahead 2] forgot the brackets&lt;br&gt;  master 1ae2a45 [origin/master] deploying index fix&lt;br&gt;* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this&lt;br&gt;should do it&lt;br&gt;  testing 5ea463a trying something new&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里可以看到  &lt;code&gt;iss53&lt;/code&gt;  分支正在跟踪  &lt;code&gt;origin/iss53&lt;/code&gt;  并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。也能看到  &lt;code&gt;master&lt;/code&gt;  分支正在跟踪  &lt;code&gt;origin/master&lt;/code&gt;  分支并且是最新的。接下来可以看到  &lt;code&gt;serverfix&lt;/code&gt;  分支正在跟踪  &lt;code&gt;teamone&lt;/code&gt;  服务器上的  &lt;code&gt;server-fix-good&lt;/code&gt;  分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到  &lt;code&gt;testing&lt;/code&gt;  分支并没有跟踪任何远程分支。&lt;/p&gt;
&lt;p&gt;需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。如果想要统计最新的领先与落后数字，需要在运行此命令前抓 取所有的远程仓库。 可以像这样做：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git fetch &lt;span class=&#34;hljs-literal&#34;&gt;--all&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-vv&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;拉取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拉取&#34;&gt;#&lt;/a&gt; 拉取&lt;/h3&gt;
&lt;p&gt;当  &lt;code&gt;git fetch&lt;/code&gt;  命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然 后让你自己合并。 然而，有一个命令叫作  &lt;code&gt;git pull&lt;/code&gt;  在大多数情况下它的含义是一个  &lt;code&gt;git fetch&lt;/code&gt;  紧接着一个  &lt;code&gt;git merge&lt;/code&gt;  命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过  &lt;code&gt;clone&lt;/code&gt;  或  &lt;code&gt;checkout&lt;/code&gt;  命令为你创建的， &lt;code&gt;git pull&lt;/code&gt;  都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。 由于  &lt;code&gt;git pull&lt;/code&gt;  的魔法经常令人困惑所以通常单独显式地使用  &lt;code&gt;fetch&lt;/code&gt;  与  &lt;code&gt;merge&lt;/code&gt;  命令会更好一些。&lt;/p&gt;
&lt;h3 id=&#34;删除远程分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除远程分支&#34;&gt;#&lt;/a&gt; 删除远程分支&lt;/h3&gt;
&lt;p&gt;假设你已经通过远程分支做完所有的工作了 —— 也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的  &lt;code&gt;master&lt;/code&gt;  分支（或任何其他稳定代码分支）。 可以运行带有 - &lt;code&gt;-delete&lt;/code&gt;  选项的  &lt;code&gt;git push&lt;/code&gt;  命令 来删除一个远程分支。 如果想要从服务器上删除  &lt;code&gt;serverfix&lt;/code&gt;  分支，运行下面的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git push origin --delete serverfix&lt;/span&gt;&lt;br&gt;To https://github.com/schacon/simplegit&lt;br&gt; - [deleted] serverfix&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本上这个命令做的只是从服务器上移除这个指针。  &lt;code&gt;Git&lt;/code&gt;  服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。&lt;/p&gt;
&lt;h2 id=&#34;变基&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变基&#34;&gt;#&lt;/a&gt; 变基&lt;/h2&gt;
&lt;p&gt;在  &lt;code&gt;Git&lt;/code&gt;  中整合来自不同分支的修改主要有两种方法： &lt;code&gt;merge&lt;/code&gt;  以及  &lt;code&gt;rebase&lt;/code&gt; 。 在本节中我们将学习什么是 “变基”，怎样使用 “变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。&lt;/p&gt;
&lt;h3 id=&#34;变基的基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变基的基本操作&#34;&gt;#&lt;/a&gt; 变基的基本操作&lt;/h3&gt;
&lt;p&gt;请考虑下面一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。&lt;/p&gt;
&lt;img src=&#34;branch_split.png&#34; alt=&#34;分叉的提交历史&#34;/&gt;
&lt;p&gt;之前介绍过，整合分支最容易的方法是  &lt;code&gt;merge&lt;/code&gt;  命令。 它会把两个分支的最新快照（ &lt;code&gt;C3&lt;/code&gt;  和  &lt;code&gt;C4&lt;/code&gt; ）以及二者最近的共同祖先（ &lt;code&gt;C2&lt;/code&gt; ）进行三方合并，合并的结果是生成一个新的快照（并提交）。&lt;/p&gt;
&lt;img src=&#34;merge.png&#34; alt=&#34;通过合并操作来整合分叉的历史&#34;/&gt;
&lt;p&gt;其实，还有一种方法：你可以提取在  &lt;code&gt;C4&lt;/code&gt;  中引入的补丁和修改，然后在  &lt;code&gt;C3&lt;/code&gt;  的基础上应用一次。 在  &lt;code&gt;Git&lt;/code&gt;  中，这种 操作就叫做&lt;strong&gt;变基（rebase）&lt;/strong&gt;。你可以使用  &lt;code&gt;rebase&lt;/code&gt;  命令将提交到某一分支上的所有修改都移至另一分支上，就好像 “重新播放” 一样。在这个例子中，你可以检出  &lt;code&gt;experiment&lt;/code&gt;  分支，然后将它变基到  &lt;code&gt;master&lt;/code&gt;  分支上：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git checkout experiment&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git rebase master&lt;/span&gt;&lt;br&gt;First, rewinding head to replay your work on top of it...&lt;br&gt;Applying: added staged command&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase.png&#34; alt=&#34;将 C4 中的修改变基到 C3 上&#34;/&gt;
&lt;p&gt;它的原理是首先找到这两个分支（即当前分支  &lt;code&gt;experiment&lt;/code&gt; 、变基操作的目标基底分支  &lt;code&gt;master&lt;/code&gt; ） 的最近共同 祖先  &lt;code&gt;C2&lt;/code&gt; ，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向 目标基底  &lt;code&gt;C3&lt;/code&gt; , 最后以此将之前另存为临时文件的修改依序应用。&lt;/p&gt;
&lt;p&gt;现在回到  &lt;code&gt;master&lt;/code&gt;  分支，进行一次快进合并。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git checkout master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git merge experiment&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_merge.png&#34; alt=&#34;master 分支的快进合并&#34;/&gt;
&lt;p&gt;这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。&lt;/p&gt;
&lt;p&gt;一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁 —— 例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到  &lt;code&gt;origin/master&lt;/code&gt;  上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。&lt;/p&gt;
&lt;p&gt;请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不 同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。&lt;/p&gt;
&lt;h3 id=&#34;更有趣的变基例子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更有趣的变基例子&#34;&gt;#&lt;/a&gt; 更有趣的变基例子&lt;/h3&gt;
&lt;p&gt;在对两个分支进行变基时，所生成的 “重放” 并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 考虑下面的例子：&lt;/p&gt;
&lt;img src=&#34;rebase_example.png&#34; alt=&#34;从一个主题分支里再分出一个主题分支的提交历史&#34;/&gt;
&lt;p&gt;假设你希望将  &lt;code&gt;client&lt;/code&gt;  中的修改合并到主分支并发布，但暂时并不想合并  &lt;code&gt;server&lt;/code&gt;  中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用  &lt;code&gt;git rebase&lt;/code&gt;  命令的  &lt;code&gt;--onto&lt;/code&gt;  选项， 选中在  &lt;code&gt;client&lt;/code&gt;  分支里但不在  &lt;code&gt;server&lt;/code&gt;  分支里的修改（即  &lt;code&gt;C8&lt;/code&gt;  和  &lt;code&gt;C9&lt;/code&gt; ），将它们在  &lt;code&gt;master&lt;/code&gt;  分支上重放：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git rebase &lt;span class=&#34;hljs-literal&#34;&gt;--onto&lt;/span&gt; master server client&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上命令的意思是：取出  &lt;code&gt;client&lt;/code&gt;  分支，找出它从  &lt;code&gt;server&lt;/code&gt;  分支分歧之后的补丁， 然后把这些补丁在  &lt;code&gt;master&lt;/code&gt;  分支上重放一遍，让  &lt;code&gt;client&lt;/code&gt;  看起来像直接基于  &lt;code&gt;master&lt;/code&gt;  修改一样。这理解起来有一点复杂，不过效果非常酷。&lt;/p&gt;
&lt;img src=&#34;rebase_example2.png&#34; alt=&#34;截取主题分支上的另一个主题分支，然后变基到其他分支&#34;/&gt;
&lt;p&gt;现在可以快进合并  &lt;code&gt;master&lt;/code&gt;  分支了。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout master&lt;br&gt;git merge client&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_example3.png&#34; alt=&#34;快进合并 master 分支，使之包含来自 client 分支的修改&#34;/&gt;
&lt;p&gt;接下来你决定将  &lt;code&gt;server&lt;/code&gt;  分支中的修改也整合进来。 使用  &lt;code&gt;git rebase&lt;/code&gt;  命令可以直接将主题分支（即本例中的  &lt;code&gt;server&lt;/code&gt; ）变基到目标分支（即  &lt;code&gt;master&lt;/code&gt; ）上。这样做能省去你先切换到  &lt;code&gt;server&lt;/code&gt;  分支，再对其执行变基命令的多个步骤。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git rebase master server&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_example4.png&#34; alt=&#34;快进合并 master 分支，使之包含来自 client 分支的修改&#34;/&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout master&lt;br&gt;git merge server&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此， &lt;code&gt;client&lt;/code&gt;  和  &lt;code&gt;server&lt;/code&gt;  分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; client&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; server&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_example5.png&#34; alt=&#34;快进合并 master 分支，使之包含来自 client 分支的修改&#34;/&gt;
&lt;h3 id=&#34;变基的风险&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变基的风险&#34;&gt;#&lt;/a&gt; 变基的风险&lt;/h3&gt;
&lt;p&gt;奇妙的变基也并非完美无缺，要用它得遵守一条准则： &lt;strong&gt;如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;git工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git工具&#34;&gt;#&lt;/a&gt; Git 工具&lt;/h1&gt;
</content>
        <category term="Git" />
        <updated>2024-02-17T12:42:54.000Z</updated>
    </entry>
</feed>
