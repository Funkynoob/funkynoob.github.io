{
    "version": "https://jsonfeed.org/version/1",
    "title": "Funkynoob的个人博客 • All posts by \"spring\" category",
    "description": "亿点点心得",
    "home_page_url": "https://blog.riversea.top",
    "items": [
        {
            "id": "https://blog.riversea.top/2024/02/21/spring/",
            "url": "https://blog.riversea.top/2024/02/21/spring/",
            "title": "Spring",
            "date_published": "2024-02-21T05:47:16.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h1 id=\"引入\"><a class=\"markdownIt-Anchor\" href=\"#引入\">#</a> 引入</h1>\n<p>考虑下面一个模拟保存用户的 <code>MVC</code>  程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//dao层</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IUserDao</span> &#123;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserDaoForMysqlImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IUserDao</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;正在保存user for mysql&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//service层</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">IUserService</span> &#123;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">()</span>;<br>&#125;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">IUserService</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">IUserDao</span> <span class=\"hljs-variable\">userDao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserDaoForMysqlImpl</span>();<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">()</span> &#123;<br>        userDao.saveUser();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//controller层</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Controller</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">IUserService</span> <span class=\"hljs-variable\">userService</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserServiceImpl</span>();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>        userService.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">正在保存<span class=\"hljs-keyword\">user</span> <span class=\"hljs-title\">for</span> mysql<br></code></pre></td></tr></table></figure>\n<p>运行结果看起来完美无缺，能够正常保存，于是你正常上线。但某一天客户突然要求你更换数据库为  <code>Oracle</code>  而不是  <code>Mysql</code> ，你可能会想那好办，我再写一个  <code>UserDaoForOracleImpl</code>  就好了呗。于是你马不停蹄地写出了这个给类，然后一一更改每一层的依赖…</p>\n<p>这样的操作以及源代码有什么问题？</p>\n<p>由<strong> OCP 原则</strong>可知：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，我们应当采用扩展。对源代码的修改显然已经破坏了这个原则。</p>\n<p>由<strong> DIP 原则</strong>可知：高层模块不应该依赖于下层模块的细节，也就是不应该在程序中出现下层模块的实例，换句话说也就是面向接口开发。源代码中高层对底层的依赖显然也违背了这个原则。</p>\n<p>由于高层实例和下层实例的强耦合，导致每做出一次更新，就要修改源代码，也就导致每次更新都要重新对以往的代码进行测试。</p>\n<p>争对以上所述情况，出现了一个新型的解决方案： <code>IOC</code></p>\n<blockquote>\n<p>[!Important]</p>\n<p><strong>开闭原则 (<font color=\"red\">O</font>pen <font color=\"red\">C</font>lose <font color=\"red\">P</font>rinciple OCP)</strong> ：软件实体应当对扩展开放，对修改关闭。</p>\n<p>Software entities should be open for extension，but closed for modification.</p>\n<p><strong>依赖倒置原则 (<font color=\"red\">D</font>ependency <font color=\"red\">I</font>version <font color=\"red\">P</font>rinciple DIP)</strong> ：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。</p>\n<p>High level modules shouldn’t depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p>\n</blockquote>\n<h1 id=\"ioc\"><a class=\"markdownIt-Anchor\" href=\"#ioc\">#</a> IoC</h1>\n<p><strong>控制反转 (nversion <font color=\"red\">o</font>f <font color=\"red\">C</font>ontrol IoC)</strong> ：通过使用直接构建类或诸如服务定位模式的机制来控制其依赖关系的实例化或位置的逆过程。以上为<a href=\"https://docs.Spring.io/Spring-framework/reference/core/beans/introduction.html\"> Spring 官方</a>的解释。</p>\n<p>可能不太好懂，可以换作通俗的话来解释。也就是解释反转是什么：</p>\n<ol>\n<li>不在程序中采用硬编码的方式来  <code>new</code>  对象，也就是说<strong>创造对象的权力</strong>被我反转出去了。</li>\n<li>不在程序中自己解决对象之间的依赖问题，也就是说<strong>依赖关系的维护权</strong>被我反转出去了。</li>\n</ol>\n<p><code>Ioc</code>  是种思想，不是某种具体的解决措施。  <code>Ioc</code>  有很多种实现方式。</p>\n<p><code>Spring</code>  框架 (容器) 为我们提供了  <code>Ioc</code>  的一种具体的解决办法也就是<strong>依赖注入 (<font color=\"red\">D</font>ependency <font color=\"red\">I</font>njection DI)</strong> 。也就是说我们能通过<strong>依赖注入</strong>来实现<strong>控制反转</strong>。</p>\n<p>依赖注入  <code>DI</code>  的两种注入方式：</p>\n<ul>\n<li>构造器注入：通过构造器注入</li>\n<li><code>set</code>  注入：通过  <code>set</code>  方法注入</li>\n</ul>\n<blockquote>\n<p>[!Note]</p>\n<p>依赖：A 和 B 之间的关系</p>\n<p>注入：创造 A 和 B 之间的关系</p>\n</blockquote>\n<h2 id=\"第一个spring程序\"><a class=\"markdownIt-Anchor\" href=\"#第一个spring程序\">#</a> 第一个 Spring 程序</h2>\n<h3 id=\"获取配置文件\"><a class=\"markdownIt-Anchor\" href=\"#获取配置文件\">#</a> 获取配置文件</h3>\n<p><code>Spring</code>  框架称呼被  <code>Ioc</code>  管理的对象为  <code>bean</code> 。 <code>Spring</code>  通过  <code>xml</code>  配置文件来进行相关配置，同时<strong>对配置文件的命名不做要求</strong>：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">   bean标签为bean对象</span><br><span class=\"hljs-comment\">   id：代表bean对象的唯一标识，不能重复。否则会抛出BeanDefinitionParsingException bean定义解析错误</span><br><span class=\"hljs-comment\">   class：实例对象的全类名</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.demo.bens.UserBean&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"获取ioc容器\"><a class=\"markdownIt-Anchor\" href=\"#获取ioc容器\">#</a> 获取 IoC 容器</h3>\n<p>配置完成配置文件后，紧接着就要通过解析配置文件获取  <code>IOC</code>  容器，在  <code>Spring</code>  中  <code>ApplicationContext</code>  接口即为  <code>IoC</code>  容器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//在类路径中查找配置文件</span><br><span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">ioc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;Spring.xml&quot;</span>);<br><br><span class=\"hljs-comment\">//在本地查找配置文件</span><br><span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">ioc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileSystemXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;path/to/xml&quot;</span>);<br><br><span class=\"hljs-comment\">//初始化Ioc容器时支持多个配置文件</span><br><span class=\"hljs-comment\">//ApplicationContext ioc = new ClassPathXmlApplicationContext(&quot;asd.xml&quot;,&quot;asad.xml&quot;,&quot;asdaa.xml&quot;....);</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>在获取  <code>IoC</code>  容器时，就会实例化那些单例的  <code>bean</code></p>\n<p><code>ApplicationContext</code>  继承自  <code>BeanFactory</code> ，实际上也就是  <code>bean</code>  工厂。</p>\n</blockquote>\n<h3 id=\"获取bean\"><a class=\"markdownIt-Anchor\" href=\"#获取bean\">#</a> 获取 bean</h3>\n<p>获得  <code>Ioc</code>  容器后，我们就可以获取容器里面锁创造的  <code>bean</code>  了， <code>Spring</code>  提供了三种获取  <code>bean</code>  的重载方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">userBean</span> <span class=\"hljs-operator\">=</span> ioc.getBean(<span class=\"hljs-string\">&quot;userBean&quot;</span>);<br><span class=\"hljs-type\">UserBean</span> <span class=\"hljs-variable\">userBean</span> <span class=\"hljs-operator\">=</span> ioc.getBean(<span class=\"hljs-string\">&quot;userBean&quot;</span>,UserBean.class);<br><span class=\"hljs-type\">UserBean</span> <span class=\"hljs-variable\">userBean</span> <span class=\"hljs-operator\">=</span> ioc.getBean(UserBean.Class);<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Spring</code>  框架通过反射机制和工厂模式来创造  <code>bean</code>  。也就是：首先解析  <code>XML</code>  文件，获取类路径，其次通过工厂模式利用反射通过类路径创建对象。</p>\n<p><code>Spring</code>  默认使用空构造方法创建对象。</p>\n<p><code>Spring</code>  底层使用一个  <code>map</code>  集合来管理对象和  <code>id</code>  之间的关系， <code>getBean</code>  方法实际上是就是通过键获取值。</p>\n<p>当获取  <code>bean</code>  时，如果指定的 <code>id</code>  或者类型不存在，那么将会抛出  <code>NoSuchBeanDefinitionException</code>  没有该  <code>bean</code>  定义异常</p>\n</blockquote>\n<h2 id=\"spring对ioc的实现\"><a class=\"markdownIt-Anchor\" href=\"#spring对ioc的实现\">#</a> Spring 对 IOC 的实现</h2>\n<h3 id=\"依赖注入\"><a class=\"markdownIt-Anchor\" href=\"#依赖注入\">#</a> 依赖注入</h3>\n<p>解决对象之间的依赖问题。</p>\n<h4 id=\"set注入\"><a class=\"markdownIt-Anchor\" href=\"#set注入\">#</a> set 注入</h4>\n<p><code>set</code>  注入，基于  <code>set</code>  方法实现的，底层会通过反射机制调用属性对应的  <code>set</code>  方法然后给属性赋值。这种方式要求属性必须对外提供  <code>set</code>  方法：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.dao.UserDao&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.UserService&quot;</span>&gt;</span><br>        <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t\tproperty标签：代表通过set的方式注入</span><br><span class=\"hljs-comment\">\t\tname：代表对应属性。注意，该属性不是指的属性名，而是setter方法，去掉set以及首字母小写之后的属性。</span><br><span class=\"hljs-comment\">\t\tref：引用类型。ref填入的时其他bean的id</span><br><span class=\"hljs-comment\">\t\tvalue：普通的字面量</span><br><span class=\"hljs-comment\">\t\t--&gt;</span><br>    \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;world&quot;</span>/&gt;</span><br>\t<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>set 注入底层通过反射获取的 setter 方法，所以 name 属性必须是 setter 方法去掉 set 以及首字母小写之后的名字</p>\n</blockquote>\n<h4 id=\"构造器注入\"><a class=\"markdownIt-Anchor\" href=\"#构造器注入\">#</a> 构造器注入</h4>\n<p>核心原理：通过调用构造方法来给属性赋值。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.dao.UserDao&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;customService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.CustomService&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\tconstructor-arg：代表通过构造器注入</span><br><span class=\"hljs-comment\">\tindex：构造器中的参数位置，默认以0开始</span><br><span class=\"hljs-comment\">\tname：参数名字</span><br><span class=\"hljs-comment\">\ttype：参数类型</span><br><span class=\"hljs-comment\">\tvalue和ref与set注入同</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">index</span>=<span class=\"hljs-string\">&quot;0&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;world&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">constructor-arg</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;java.lang.String&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;haha&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>不指定  <code>index</code>  、 <code>name</code>  和  <code>type</code>  的话， <code>Spring</code>  也能猜出来该赋值给谁。注意此方法也是使用的  <code>type</code></p>\n<p>两种注入方式的实际不同：一个是实例化后注入，一个是实例的时候就注入。</p>\n</blockquote>\n<h3 id=\"set注入专题\"><a class=\"markdownIt-Anchor\" href=\"#set注入专题\">#</a> set 注入专题</h3>\n<h4 id=\"注入外部bean\"><a class=\"markdownIt-Anchor\" href=\"#注入外部bean\">#</a> 注入外部 Bean</h4>\n<p>引用的是在  <code>bean</code>  外面定义的  <code>bean</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderDaoBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.dao.OrderDao&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.OrderSerivce&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;orderDao&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;orderDaoBean&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入内部bean\"><a class=\"markdownIt-Anchor\" href=\"#注入内部bean\">#</a> 注入内部 bean</h4>\n<p>在  <code>bean</code>  标签中嵌套  <code>bean</code>  标签。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderServiceInner&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.OrderSerivce&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;orderDao&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.dao.OrderDao&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入简单类型\"><a class=\"markdownIt-Anchor\" href=\"#注入简单类型\">#</a> 注入简单类型</h4>\n<p><code>Spring</code>  认为的简单类型：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSimpleValueType</span><span class=\"hljs-params\">(Class&lt;?&gt; type)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> (!isVoidType(type) &amp;&amp;<br>            (isPrimitiveOrWrapper(type) || <span class=\"hljs-comment\">//基本类型和包装类型</span><br>             Enum.class.isAssignableFrom(type) || <span class=\"hljs-comment\">//枚举类型</span><br>             CharSequence.class.isAssignableFrom(type) || <br>             Number.class.isAssignableFrom(type) ||<br>             Date.class.isAssignableFrom(type) || <span class=\"hljs-comment\">//日期</span><br>             Temporal.class.isAssignableFrom(type) || <br>             ZoneId.class.isAssignableFrom(type) ||<br>             TimeZone.class.isAssignableFrom(type) ||<br>             File.class.isAssignableFrom(type) ||<br>             Path.class.isAssignableFrom(type) ||<br>             Charset.class.isAssignableFrom(type) ||<br>             Currency.class.isAssignableFrom(type) ||<br>             InetAddress.class.isAssignableFrom(type) ||<br>             URI.class == type ||<br>             URL.class == type ||<br>             UUID.class == type ||<br>             Locale.class == type ||<br>             Pattern.class == type ||<br>             Class.class == type));<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>注入简单类型形如如下形式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderServiceInner&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.OrderSerivce&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;world&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>当把日期当作简单类型注入时必须考虑注入的格式，要必须完全符合日期格式才能成功注入，如下所示</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.OrderSerivce&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;date&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Thu Feb 22 10:53:41 CST 2024&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;date1&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;2024/2/22 20:20:20&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"级联属性赋值\"><a class=\"markdownIt-Anchor\" href=\"#级联属性赋值\">#</a> 级联属性赋值</h4>\n<p>引用外部  <code>bean</code>  后，对外部  <code>bean</code>  的属性赋值</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;class&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Clazz&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Student&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jjj&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;clazz&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;class&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;clazz.name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;软件1班&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入数组\"><a class=\"markdownIt-Anchor\" href=\"#注入数组\">#</a> 注入数组</h4>\n<p>在注入时使用标签： <code>&lt;array&gt;</code></p>\n<h5 id=\"简单类型\"><a class=\"markdownIt-Anchor\" href=\"#简单类型\">#</a> 简单类型</h5>\n<p>在  <code>&lt;array&gt;</code>  中使用  <code>&lt;value&gt;</code>  标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Student&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jjj&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;clazz&quot;</span>&gt;</span><br>    \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span><br>        \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"引用类型\"><a class=\"markdownIt-Anchor\" href=\"#引用类型\">#</a> 引用类型</h5>\n<p>在  <code>&lt;array&gt;</code>  中使用  <code>&lt;ref&gt;</code>  标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dept1&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Dept&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dept2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Dept&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dept3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Dept&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Employee&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;depts&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">array</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;dept1&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;dept2&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;dept3&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">array</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入list集合\"><a class=\"markdownIt-Anchor\" href=\"#注入list集合\">#</a> 注入 list 集合</h4>\n<p>在注入时使用标签： <code>&lt;list&gt;</code></p>\n<h5 id=\"是简单类型\"><a class=\"markdownIt-Anchor\" href=\"#是简单类型\">#</a> 是简单类型</h5>\n<p>在  <code>&lt;list&gt;</code>  中使用  <code>&lt;value&gt;</code>  标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;student&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Student&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;id&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;1&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jjj&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;clazz&quot;</span>&gt;</span><br>    \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span><br>        \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"引用类型-2\"><a class=\"markdownIt-Anchor\" href=\"#引用类型-2\">#</a> 引用类型</h5>\n<p>在  <code>&lt;list&gt;</code>  中使用  <code>&lt;ref&gt;</code>  标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dept1&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Dept&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dept2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Dept&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dept3&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Dept&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;employee&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Employee&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;depts&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">list</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;dept1&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;dept2&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;dept3&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">list</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入map集合\"><a class=\"markdownIt-Anchor\" href=\"#注入map集合\">#</a> 注入 map 集合</h4>\n<p>在注入时使用标签： <code>&lt;map&gt;</code>  以及其中的  <code>&lt;entry&gt;</code></p>\n<h5 id=\"简单类型-2\"><a class=\"markdownIt-Anchor\" href=\"#简单类型-2\">#</a> 简单类型</h5>\n<p>在  <code>&lt;entry&gt;</code>  中使用  <code>&lt;value&gt;</code>  或者  <code>&lt;key&gt;</code>  标签：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;peopleBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.People&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;addrs&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--如果key不是简单类型，使用 key-ref 属性--&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--如果value不是简单类型，使用 value-ref 属性--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;北京大兴区&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;上海浦东区&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;深圳宝安区&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"引用类型-3\"><a class=\"markdownIt-Anchor\" href=\"#引用类型-3\">#</a> 引用类型</h5>\n<p>在  <code>&lt;entry&gt;</code>  中使用  <code>&lt;value-ref&gt;</code>  或者  <code>&lt;key-ref&gt;</code>  标签：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;emploee1&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Employee&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;deptMap&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">map</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--如果key不是简单类型，使用 key-ref 属性--&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--如果value是简单类型，使用 value 属性--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;1&quot;</span> <span class=\"hljs-attr\">key-ref</span>=<span class=\"hljs-string\">&quot;dept1&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;2&quot;</span> <span class=\"hljs-attr\">key-ref</span>=<span class=\"hljs-string\">&quot;dept2&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;3&quot;</span> <span class=\"hljs-attr\">key-ref</span>=<span class=\"hljs-string\">&quot;dept3&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">map</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入set集合\"><a class=\"markdownIt-Anchor\" href=\"#注入set集合\">#</a> 注入 set 集合</h4>\n<p>在注入时使用  <code>&lt;set&gt;</code>  标签</p>\n<h5 id=\"简单类型-3\"><a class=\"markdownIt-Anchor\" href=\"#简单类型-3\">#</a> 简单类型</h5>\n<p>在  <code>&lt;set&gt;</code>  中使用  <code>&lt;value&gt;</code>  标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;peopleBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.People&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;phones&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--简单类型使用value，非简单类型可以使用ref--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>110<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>110<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>120<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>120<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>119<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>119<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"引用类型-4\"><a class=\"markdownIt-Anchor\" href=\"#引用类型-4\">#</a> 引用类型</h5>\n<p>在  <code>&lt;set&gt;</code>  中使用  <code>&lt;ref&gt;</code>  标签：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;peopleBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.People&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;phones&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">set</span>&gt;</span><br>            <span class=\"hljs-comment\">&lt;!--非简单类型可以使用ref，简单类型使用value--&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;phone1&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;phone2&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;phone3&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;phone4&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ref</span> <span class=\"hljs-attr\">bean</span>=<span class=\"hljs-string\">&quot;phone5&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">set</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入properties\"><a class=\"markdownIt-Anchor\" href=\"#注入properties\">#</a> 注入 Properties</h4>\n<p>在注入时使用  <code>&lt;props&gt;</code>  标签和  <code>&lt;prop&gt;</code>  标签</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.DataSource&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;properties&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">props</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;driver&quot;</span>&gt;</span>com.cj.jc.sql.Driver<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/tes<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span>root<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">props</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"注入空字符串和null值\"><a class=\"markdownIt-Anchor\" href=\"#注入空字符串和null值\">#</a> 注入空字符串和 null 值</h4>\n<p>空字符串可以是以下的方式：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.OrderSerivce&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;world&quot;</span>&gt;</span><br>    \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>注入  <code>null</code>  可以不注入对应属性，也可以使用  <code>&lt;null&gt;</code>  标签：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderDaoBean&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.dao.OrderDao&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;orderService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.OrderSerivce&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;orderDao&quot;</span>&gt;</span><br>    \t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">null</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"p命名空间注入\"><a class=\"markdownIt-Anchor\" href=\"#p命名空间注入\">#</a> p 命名空间注入</h3>\n<p>使用前确保使用约束： <code>xmlns:p=http://www.Springframework.org/schema/p</code></p>\n<p>相当于  <code>set</code>  注入和在注入时使用  <code>&lt;property&gt;</code>  标签：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;stu&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.Student&quot;</span> <span class=\"hljs-attr\">p:name</span>=<span class=\"hljs-string\">&quot;llll&quot;</span> <span class=\"hljs-attr\">p:clazz-ref</span>=<span class=\"hljs-string\">&quot;clazz&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>该命名空间的形式为： <code>p:xxx[-ref]</code>   <code>xxx</code>  为属性名，是否带  <code>ref</code>  取决于该属性是否为引用属性</p>\n</blockquote>\n<h3 id=\"c命名空间注入\"><a class=\"markdownIt-Anchor\" href=\"#c命名空间注入\">#</a> c 命名空间注入</h3>\n<p>使用前确保使用约束： <code>xmlns:p=http://www.Springframework.org/schema/c</code></p>\n<p>相当于构造器注入和在注入时使用  <code>&lt;constructor-arg&gt;</code>  ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;use&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.entity.User&quot;</span> <span class=\"hljs-attr\">c:_0</span>=<span class=\"hljs-string\">&quot;111&quot;</span> <span class=\"hljs-attr\">c:name</span>=<span class=\"hljs-string\">&quot;jjjj&quot;</span> <span class=\"hljs-attr\">c_1-ref</span>=<span class=\"hljs-string\">&quot;&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>该命名空间的形式为： <code>p:_num|xxx[-ref]</code>   <code>_num</code>  相当于  <code>&lt;constructor-arg&gt;</code>  中的序号  <code>xxx</code>  相当于属性名，是否带  <code>ref</code>  取决于该属性是否为引用属性</p>\n</blockquote>\n<h3 id=\"util命名空间\"><a class=\"markdownIt-Anchor\" href=\"#util命名空间\">#</a> util 命名空间</h3>\n<p>使用  <code>util </code> 命名空间可以让<strong>配置复用</strong>。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:util</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/util&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">                           http://www.Springframework.org/schema/util http://www.Springframework.org/schema/util/Spring-util.xsd&quot;</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t保证有下面连个约束：</span><br><span class=\"hljs-comment\">\txmlns:util=&quot;http://www.Springframework.org/schema/util&quot;</span><br><span class=\"hljs-comment\">\t xsi:schemaLocation=&quot;http://www.Springframework.org/schema/util http://www.Springframework.org/schema/util/Spring-util.xsd&quot;</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:properties</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;prop&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;driver&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/Spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;username&quot;</span>&gt;</span>root<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">prop</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;password&quot;</span>&gt;</span>123456<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">prop</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:properties</span>&gt;</span><br>\t<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource1&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.powernode.Spring6.beans.MyDataSource1&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;properties&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;prop&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource2&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.powernode.Spring6.beans.MyDataSource2&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;properties&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;prop&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t引用某个类里面的公共，静态的变量作为bean</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:constant</span> <span class=\"hljs-attr\">static-field</span>=<span class=\"hljs-string\">&quot;java.lang.Integer.MAX_VALUE&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t相当于可复用的&lt;list&gt;标签</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>     <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:list</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;bbb&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>321<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>1234567<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:list</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t相当于可复用的&lt;map&gt;标签</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:map</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">entry</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;world&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:map</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t相当于可复用的&lt;set&gt;标签</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">util:set</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>123<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>321<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">value</span>&gt;</span>1234567<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">value</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">util:set</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"基于xml的自动装配\"><a class=\"markdownIt-Anchor\" href=\"#基于xml的自动装配\">#</a> 基于 xml 的自动装配</h3>\n<p>自动装配：不用显示地对类地引用对象进行赋值。使用  <code>&lt;bean&gt;</code>  标签的  <code>autowire</code>  属性。</p>\n<h4 id=\"根据名称\"><a class=\"markdownIt-Anchor\" href=\"#根据名称\">#</a> 根据名称</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.dao.UserDao&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;userService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.UserService&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byName&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>注意根据名称自动注入装配，会根据  <code>id</code>  或  <code>name</code>  与  <code>setter</code>  方法匹配。所以  <code>id</code>  或  <code>name</code>  不能随便写。</p>\n<p>没有  <code>name</code>  属性时会根据  <code>id</code>  进行匹配。</p>\n<blockquote>\n<p>此类型也是  <code>set</code>  注入，必须保证  <code>setter</code>  方法的存在</p>\n</blockquote>\n<h4 id=\"根据类型\"><a class=\"markdownIt-Anchor\" href=\"#根据类型\">#</a> 根据类型</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;aaa&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;userDao&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.dao.UserDao&quot;</span>/&gt;</span><br><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;customService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.di.service.CustomService&quot;</span> <span class=\"hljs-attr\">autowire</span>=<span class=\"hljs-string\">&quot;byType&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>注意根据名称自动注入装配时，如果有多个相同类型的  <code>bean</code>  存在，那么无法进行自动装配，会抛出  <code>UnsatisfiedDependencyException</code></p>\n<blockquote>\n<p>此类型也是  <code>set</code>  注入，必须保证  <code>setter</code>  方法的存在</p>\n</blockquote>\n<h3 id=\"引入外部属性配置文件\"><a class=\"markdownIt-Anchor\" href=\"#引入外部属性配置文件\">#</a> 引入外部属性配置文件</h3>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">                           http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&quot;</span>&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t确保以下两个约束存在：</span><br><span class=\"hljs-comment\">  \txmlns:context=&quot;http://www.Springframework.org/schema/context&quot;</span><br><span class=\"hljs-comment\">\txsi:schemaLocation=&quot;http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&quot;</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <br>    <span class=\"hljs-comment\">&lt;!--引入外部配置文件--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;jdbc.properties&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t使用$&#123;&#125;引用属性</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.powernode.Spring6.beans.MyDataSource&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driver&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"bean的作用域\"><a class=\"markdownIt-Anchor\" href=\"#bean的作用域\">#</a> bean 的作用域</h2>\n<p>默认情况下  <code>bean</code>  是单例的。在  <code>Spring</code>  上下文初始化的时候实例化。通过  <code>&lt;bean&gt;</code>  标签的  <code>scope</code>  属性进行配置。</p>\n<p><code>scope</code>  一个有  <code>8</code>  个取值：</p>\n<ul>\n<li><code>singleton</code> ：默认的，单例。</li>\n<li><code>prototype</code> ：原型。每调用一次  <code>getBean()</code>  方法则获取一个新的  <code>Bean</code>  对象。或每次注入的时候都是新对象。</li>\n<li><code>request</code> ：一个请求对应一个  <code>Bean</code>  。<strong>仅限于在 WEB 应用中使用</strong>。</li>\n<li><code>session</code> ：一个会话对应一个  <code>Bean</code>  。<strong>仅限于在 WEB 应用中使用</strong>。</li>\n<li><code>global session</code> ：<strong>portlet 应用中专用的</strong>。如果在  <code>Servlet</code>  的  <code>WEB</code>  应用中使用  <code>global session</code>  的话，和  <code>session</code>  一个效果。（  <code>portlet</code>  和  <code>servlet</code>  都是规范。servlet 运行在 servlet 容器中，例如  <code>Tomcat</code>  。 <code>portlet</code>  运行在  <code>portlet</code>  容器中。）</li>\n<li><code>application</code> ：一个应用对应一个  <code>Bean</code>  。<strong>仅限于在 WEB 应用中使用。</strong></li>\n<li><code>websocket</code> ：一个  <code>websocket</code>  生命周期对应一个  <code>Bean</code>  。<strong>仅限于在 WEB 应用中使用。</strong></li>\n<li>自定义  <code>scope</code> ：很少使用。</li>\n</ul>\n<h2 id=\"bean的创造\"><a class=\"markdownIt-Anchor\" href=\"#bean的创造\">#</a> bean 的创造</h2>\n<h3 id=\"通过构造方法实例化\"><a class=\"markdownIt-Anchor\" href=\"#通过构造方法实例化\">#</a> 通过构造方法实例化</h3>\n<p>默认情况下， <code>Spring</code>  会调用构造方法进行实例化</p>\n<h3 id=\"通过简单工厂模式实例化\"><a class=\"markdownIt-Anchor\" href=\"#通过简单工厂模式实例化\">#</a> 通过简单工厂模式实例化</h3>\n<p>如下所示，需要申明一个带有<strong>静态方法的工厂类</strong> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StarFactory</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Star <span class=\"hljs-title function_\">getStar</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Star</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>随后申明  <code>bean</code> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">注意申明的bean的class属性为该工厂类而不是产品类，且通过factory-method属性申明哪个方法作为产品类的生产方法</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.bean.SimpleStarFactory&quot;</span> <span class=\"hljs-attr\">factory-method</span>=<span class=\"hljs-string\">&quot;get&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>之后就可以通过  <code>id</code>  或者  <code>class</code>  获得  <code>bean</code></p>\n<blockquote>\n<p>如果要为  <code>factory-method</code>  转递参数，再  <code>bean</code>  中通过  <code>&lt;constructor-arg&gt;</code>  进行传递</p>\n</blockquote>\n<h3 id=\"通过factory-bean实例化\"><a class=\"markdownIt-Anchor\" href=\"#通过factory-bean实例化\">#</a> 通过 factory-bean 实例化</h3>\n<p>如下所示，需要申明一个带有<strong>实例方法的工厂类</strong> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StarFactory</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> Star <span class=\"hljs-title function_\">getStar</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Star</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>随后申明  <code>bean</code> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">首先要把该工厂类进行实例化，应为生产方法是实例方法</span><br><span class=\"hljs-comment\">在产品类的bean中，在factory-bean属性中填入工厂类bean的id，表明对应的工厂类，其次使用factory-method属性申明生产产品类的生产方法</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;factory&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.bean.StarFactory&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;star&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.bean.Star&quot;</span> <span class=\"hljs-attr\">factory-bean</span>=<span class=\"hljs-string\">&quot;factory&quot;</span> <span class=\"hljs-attr\">factory-method</span>=<span class=\"hljs-string\">&quot;getStar&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>之后就可以通过  <code>id</code>  或者  <code>class</code>  获得  <code>bean</code></p>\n<blockquote>\n<p>如果要为  <code>factory-method</code>  转递参数，再  <code>bean</code>  中通过  <code>&lt;constructor-arg&gt;</code>  进行传递</p>\n</blockquote>\n<h3 id=\"通过factorybean接口实例化\"><a class=\"markdownIt-Anchor\" href=\"#通过factorybean接口实例化\">#</a> 通过 FactoryBean 接口实例化</h3>\n<p>如下所示，需要声明一个实现了  <code>FactoryBean</code>  接口的工厂类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ProductFactory</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">FactoryBean</span>&lt;Product&gt; &#123;<br>    <span class=\"hljs-comment\">//生产方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Product <span class=\"hljs-title function_\">getObject</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Product</span>();<br>    &#125;<br>\t<span class=\"hljs-comment\">//返回对应的类型</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;<br>        <span class=\"hljs-keyword\">return</span> Product.class;<br>    &#125;<br>\t<span class=\"hljs-comment\">//判断是否单例。注意该方法时默认方法，返回true，也就是单例，如果不想为单例，则返回false</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">isSingleton</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> FactoryBean.<span class=\"hljs-built_in\">super</span>.isSingleton();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>随后申明  <code>bean</code> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">直接申明该工厂类，即可创造出对应产品类</span><br><span class=\"hljs-comment\">如果，需要引用产品类直接引用该bean即可</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.bean.ProductFactory&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>之后就可以通过  <code>id</code>  或者  <code>class</code>  获得  <code>bean</code></p>\n<blockquote>\n<p>实例化  <code>FactoryBean</code>  接口的被成为 工厂  <code>bean</code></p>\n</blockquote>\n<h4 id=\"beanfactory和factorybean的区别\"><a class=\"markdownIt-Anchor\" href=\"#beanfactory和factorybean的区别\">#</a> BeanFactory 和 FactoryBean 的区别</h4>\n<h5 id=\"beanfactory\"><a class=\"markdownIt-Anchor\" href=\"#beanfactory\">#</a> BeanFactory</h5>\n<p><code>Spring IoC</code>  容器的顶级对象， <code>BeanFactory</code>  被翻译为 “Bean 工厂”，在  <code>Spring</code>  的  <code>IoC</code>  容器中，“Bean 工厂” 负责创建  <code>Bean</code>  对象。</p>\n<p><code>BeanFactory</code>  是工厂。</p>\n<h5 id=\"factorybean\"><a class=\"markdownIt-Anchor\" href=\"#factorybean\">#</a> FactoryBean</h5>\n<p><code>FactoryBean</code> ：它是一个  <code>Bean</code>  ，是一个能够<strong>辅助 Spring</strong> 实例化其它  <code>Bean</code>  对象的一个  <code>Bean</code>  。</p>\n<p>在  <code>Spring</code>  中， <code>Bean</code>  可以分为两类：</p>\n<ul>\n<li>第一类：普通 <code>Bean</code></li>\n<li>第二类：工厂  <code>Bean</code> （记住：工厂  <code>Bean</code>  也是一种  <code>Bean</code>  ，只不过这种  <code>Bean</code>  比较特殊，它可以辅助  <code>Spring</code>  实例化其它  <code>Bean</code>  对象。）</li>\n</ul>\n<h3 id=\"bean的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#bean的生命周期\">#</a> bean 的生命周期</h3>\n<h4 id=\"什么是bean的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#什么是bean的生命周期\">#</a> 什么是 Bean 的生命周期</h4>\n<p>Spring 其实就是一个管理 Bean 对象的工厂。它负责对象的创建，对象的销毁等。</p>\n<p>所谓的生命周期就是：对象从创建开始到最终销毁的整个过程。</p>\n<p>什么时候创建 Bean 对象？创建 Bean 对象的前后会调用什么方法？Bean 对象什么时候销毁？Bean 对象的销毁前后调用什么方法？</p>\n<h4 id=\"为什么要知道bean的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#为什么要知道bean的生命周期\">#</a> 为什么要知道 Bean 的生命周期</h4>\n<p>其实生命周期的本质是：<strong>在哪个时间节点上调用了哪个类的哪个方法。</strong></p>\n<p>我们需要充分的了解在这个生命线上，都有哪些特殊的时间节点。只有我们知道了特殊的时间节点都在哪，到时我们才可以确定代码写到哪。我们可能需要在某个特殊的时间点上执行一段特定的代码，这段代码就可以放到这个节点上。当生命线走到这里的时候，自然会被调用。</p>\n<blockquote>\n<p>Bean 生命周期的管理，可以参考  <code>Spring</code>  的源码： <strong> <code>AbstractAutowireCapableBeanFactory</code>  类的  <code>doCreateBean()</code>  方法 。</strong></p>\n</blockquote>\n<h4 id=\"bean的生命周期之5步\"><a class=\"markdownIt-Anchor\" href=\"#bean的生命周期之5步\">#</a> Bean 的生命周期之 5 步</h4>\n<p><code>Bean</code>  生命周期可以粗略的划分为五大步：</p>\n<ul>\n<li>第一步：实例化  <code>Bean</code></li>\n<li>第二步： <code>Bean</code>  属性赋值</li>\n<li>第三步：初始化  <code>Bean</code>\n<ul>\n<li>通过自定义一个方法进行初始化</li>\n</ul>\n</li>\n<li>第四步：使用  <code>Bean</code></li>\n<li>第五步：销毁  <code>Bean</code>\n<ul>\n<li>通过自定义一个方法进行销毁</li>\n</ul>\n</li>\n</ul>\n<img src=\"lifecycle5.png\" alt=\"bean生命周期之5步\"/>\n<p>我们来看下面这个类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//我们定义了一个类，该类含有两个特殊的方法，initBean用来初始化bean，destroyBean用来销毁bean</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">User</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第一步实例化bean&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第二步属性赋值&quot;</span>);<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;%s: &quot;</span>,<span class=\"hljs-string\">&quot;第四步使用bean&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initBean</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步初始化bean&quot;</span>);<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">destroyBean</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第五步销毁bean&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义好这个类后，我们尝试将他注册为  <code>bean</code>  ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">光自定义初始化和摧毁方法不行，我们要让Spring知道这是哪些方法，这样Spring才能准确的回调他们</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.lifecycle.User&quot;</span> <span class=\"hljs-attr\">init-method</span>=<span class=\"hljs-string\">&quot;initBean&quot;</span> <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">&quot;destroyBean&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>随后我们从  <code>ioc</code>  容器中取出这个  <code>bean</code>  然后打印这个  <code>bean</code>  :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    ConfigurableApplicationContext ioc= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;lifecycle.xml&quot;</span>);<br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> ioc.getBean(User.class);<br>    System.out.println(user);<br>    <span class=\"hljs-comment\">//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调</span><br>    ioc.registerShutdownHook();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不出意外，你将会看到以下五个生命周期步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">第一步: 实例化bean<br>第二步: 属性赋值<br>第三步: 初始化<br>第四步: 使用bean: User&#123;name=&#x27;123&#x27;&#125;<br>第五步: 销毁bean<br></code></pre></td></tr></table></figure>\n<h4 id=\"bean的生命周期之7步\"><a class=\"markdownIt-Anchor\" href=\"#bean的生命周期之7步\">#</a> Bean 的生命周期之 7 步</h4>\n<p>在以上的五步中，第三步是初始化 Bean，如果你还想在<strong>初始化前</strong>和<strong>初始化后</strong>添加代码，可以加入 **“Bean 后处理器”**。就形成了七个生命周期步骤。</p>\n<img src=\"lifecycle7.png\" alt=\"bean生命周期之7步\"/>\n<p>我们重新创建一个  <code>LogBeanPostProcessor</code>  类并实现  <code>BeanPostProcessor</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LogBeanPostProcessor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第五步: BeanPostProcessor的after方法执行&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> BeanPostProcessor.<span class=\"hljs-built_in\">super</span>.postProcessAfterInitialization(bean, beanName);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessBeforeInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步: BeanPostProcessor的before方法执行&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> BeanPostProcessor.<span class=\"hljs-built_in\">super</span>.postProcessBeforeInitialization(bean, beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义好这个类后，我们尝试将他注册为  <code>bean</code>  ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">这将为这个xml文件代表的ioc容器创建一个全局的Bean后处理器，任何bean都会触发</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.lifecycle.LogBeanPostProcessor&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<p>随后我们从  <code>ioc</code>  容器中取出  <code>user</code>  然后打印这个  <code>bean</code>  :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    ConfigurableApplicationContext ioc= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;lifecycle.xml&quot;</span>);<br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> ioc.getBean(User.class);<br>    System.out.println(user);<br>    <span class=\"hljs-comment\">//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调</span><br>    ioc.registerShutdownHook();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不出意外，你将会看到以下七个生命周期步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">第一步: 实例化bean<br>第二步: 属性赋值<br>第三步: BeanPostProcessor的before方法执行<br>第四步: 初始化<br>第五步: BeanPostProcessor的after方法执行<br>第六步使用bean: User&#123;name=&#x27;123&#x27;&#125;<br>第七步: 销毁bean<br></code></pre></td></tr></table></figure>\n<h4 id=\"bean的生命周期之10步\"><a class=\"markdownIt-Anchor\" href=\"#bean的生命周期之10步\">#</a> Bean 的生命周期之 10 步</h4>\n<p>如果根据源码跟踪，可以划分更细粒度的步骤，我们通过  <code>*Aware</code>  接口、 <code>InitializingBean</code>  接口和  <code>DisposableBean</code>  来实现。</p>\n<p><code>*Aware</code>  接口会在  <code>InitializingBean</code>  接口之前执行</p>\n<p><code>InitializingBean</code>  接口会在初始方法调用前和  <code>BeanPostProcessor</code>  的  <code>before</code>  方法调用前执行。</p>\n<p><code>DisposableBean</code>  接口会在销毁方法调用前和使用  <code>bean</code>  执行。</p>\n<img src=\"lifecycle10.png\" alt=\"bean生命周期之10步\"/>\n<p>仍然使用  <code>User</code>  类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BeanNameAware</span>, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">User</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第一步: 实例化bean&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第二步: 属性赋值&quot;</span>);<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.printf(<span class=\"hljs-string\">&quot;%s: &quot;</span>,<span class=\"hljs-string\">&quot;第八步使用bean&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;User&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">initBean</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第六步: 初始化&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">destroyBean</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第十步: 销毁bean&quot;</span>);<br>    &#125;<br>\t<span class=\"hljs-comment\">//该方法为BeanClassLoaderAware的方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setBeanClassLoader</span><span class=\"hljs-params\">(ClassLoader classLoader)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步: BeanClassLoaderAware&quot;</span>);<br>    &#125;<br>\t<span class=\"hljs-comment\">//该方法为BeanFactoryAware的方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setBeanFactory</span><span class=\"hljs-params\">(BeanFactory beanFactory)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步: BeanFactoryAware&quot;</span>);<br>    &#125;<br>\t<span class=\"hljs-comment\">//该方法为BeanNameAware的方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setBeanName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步: BeanNameAware&quot;</span>);<br>    &#125;<br>\t<span class=\"hljs-comment\">//该方法为DisposableBean的方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">destroy</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第九步: destroy执行&quot;</span>);<br>    &#125;<br>\t<span class=\"hljs-comment\">//该方法为InitializingBean的方法</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterPropertiesSet</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第五步: afterPropertiesSet执行&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LogBeanPostProcessor</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BeanPostProcessor</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessAfterInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第七步: BeanPostProcessor的after方法执行&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> BeanPostProcessor.<span class=\"hljs-built_in\">super</span>.postProcessAfterInitialization(bean, beanName);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">postProcessBeforeInitialization</span><span class=\"hljs-params\">(Object bean, String beanName)</span> <span class=\"hljs-keyword\">throws</span> BeansException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;第三步: BeanPostProcessor的before方法执行&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> BeanPostProcessor.<span class=\"hljs-built_in\">super</span>.postProcessBeforeInitialization(bean, beanName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>定义好这两个类后，我们尝试将他注册为  <code>bean</code>  ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">这将为这个xml文件代表的ioc容器创建一个全局的Bean后处理器，任何bean都会触发</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.lifecycle.LogBeanPostProcessor&quot;</span>/&gt;</span><br><span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">光自定义初始化和摧毁方法不行，我们要让Spring知道这是哪些方法，这样Spring才能准确的回调他们</span><br><span class=\"hljs-comment\">--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;user&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.lifecycle.User&quot;</span> <span class=\"hljs-attr\">init-method</span>=<span class=\"hljs-string\">&quot;initBean&quot;</span> <span class=\"hljs-attr\">destroy-method</span>=<span class=\"hljs-string\">&quot;destroyBean&quot;</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>随后我们从  <code>ioc</code>  容器中取出这个  <code>bean</code>  然后打印这个  <code>bean</code>  :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    ConfigurableApplicationContext ioc= <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassPathXmlApplicationContext</span>(<span class=\"hljs-string\">&quot;lifecycle.xml&quot;</span>);<br>    <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> ioc.getBean(User.class);<br>    System.out.println(user);<br>    <span class=\"hljs-comment\">//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调</span><br>    ioc.registerShutdownHook();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不出意外，你将会看到以下十个生命周期步骤：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">第一步: 实例化bean<br>第二步: 属性赋值<br>第三步: BeanNameAware<br>第三步: BeanClassLoaderAware<br>第三步: BeanFactoryAware<br>第四步: BeanPostProcessor的before方法执行<br>第五步: afterPropertiesSet执行<br>第六步: 初始化<br>第七步: BeanPostProcessor的after方法执行<br>第八步使用bean: User&#123;name=&#x27;123&#x27;&#125;<br>第九步: destroy执行<br>第十步: 销毁bean<br></code></pre></td></tr></table></figure>\n<p><code>Spring</code>  提供了一系列的  <code>Aware</code>  回调接口，让  <code>Bean</code>  向容器表明它们需要某种基础设施的依赖性：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">接口名称</th>\n<th style=\"text-align:left\">注入的依赖性</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>ApplicationContextAware</code></td>\n<td style=\"text-align:left\">声明  <code>ApplicationContext</code> 。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#beans-factory-aware\">ApplicationContextAware 和 BeanNameAware</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ApplicationEventPublisherAware</code></td>\n<td style=\"text-align:left\">封装了  <code>ApplicationContext</code>  的 Event publisher 。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#context-introduction\">ApplicationContex 的附加功能</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BeanClassLoaderAware</code></td>\n<td style=\"text-align:left\">用来加载 Bean 类的类加载器（Class loader）。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#beans-factory-class\">实例化 Bean</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BeanFactoryAware</code></td>\n<td style=\"text-align:left\">声明  <code>BeanFactory</code> 。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#beans-beanfactory\">BeanFactory API</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>BeanNameAware</code></td>\n<td style=\"text-align:left\">声明  <code>Bean</code>  的名称。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#beans-factory-aware\">ApplicationContextAware 和 BeanNameAware</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>LoadTimeWeaverAware</code></td>\n<td style=\"text-align:left\">定义了用于在加载时处理类定义的织入点。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#aop-aj-ltw\">在 Spring 框架中用 AspectJ 进行加载时织入（Load-time Weaving）</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>MessageSourceAware</code></td>\n<td style=\"text-align:left\">配置解析消息的策略（支持参数化和国际化）。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#context-introduction\">ApplicationContext 的附加功能</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>NotificationPublisherAware</code></td>\n<td style=\"text-align:left\"><code>Spring JMX notification publisher</code> 。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/integration.html#jmx-notifications\">Notifications</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ResourceLoaderAware</code></td>\n<td style=\"text-align:left\">配置的加载器用于低级别的资源访问。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/core.html#resources\">资源（Resources）</a></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>ServletConfigAware</code></td>\n<td style=\"text-align:left\">容器所运行的当前  <code>ServletConfig</code> 。仅在 Web 感知的 Spring  <code>ApplicationContext</code>  中有效。</td>\n<td style=\"text-align:left\"><a href=\"https://Springdoc.cn/Spring/web.html#mvc\">Spring MVC</a></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"不同作用域的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#不同作用域的生命周期\">#</a> 不同作用域的生命周期</h4>\n<p>对于  <code>singleton</code>  作用域的  <code>Bean</code> ， <code>Spring</code>  能够精确地知道该  <code>Bean</code>  何时被创建，何时初始化完成，以及何时被销毁；</p>\n<p>而对于  <code>prototype</code>  作用域的  <code>Bean</code>  ， <code>Spring</code>  只负责创建，当容器创建了  <code>Bean</code>  的实例并初始化后， <code>Bean</code>  的实例就交给客户端代码管理， <code>Spring</code>  容器将不再跟踪其生命周期。</p>\n<p>依然是上面的  <code>user</code>  类，我们将这个类的作用域转换为  <code>prototype</code> ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">第一步: 实例化bean<br>第二步: 属性赋值<br>第三步: BeanNameAware<br>第三步: BeanClassLoaderAware<br>第三步: BeanFactoryAware<br>第三步: ApplicationContextAware<br>第四步: BeanPostProcessor的before方法执行<br>第五步: afterPropertiesSet执行<br>第六步: 初始化<br>第七步: BeanPostProcessor的after方法执行<br>第八步: 使用bean: User&#123;name=&#x27;123&#x27;&#125;<br></code></pre></td></tr></table></figure>\n<p>我们看到只执行到了第八步，也就是说  <code>Spring</code>  不再管理其的销毁程序。</p>\n<h4 id=\"将自己实例化的对象加入到ioc容器\"><a class=\"markdownIt-Anchor\" href=\"#将自己实例化的对象加入到ioc容器\">#</a> 将自己实例化的对象加入到 IoC 容器</h4>\n<p>可以通过  <code>getBeanFactory()</code>  方法访问  <code>ApplicationContext</code>  的  <code>BeanFactory</code>  来实现，该方法返回  <code>DefaultListableBeanFactory</code>  实现。 <code>DefaultListableBeanFactory</code>  通过  <code>registerSingleton(..)</code>  和  <code>registerBeanDefinition(..)</code>  方法支持这种注册。</p>\n<h3 id=\"bean的循环依赖\"><a class=\"markdownIt-Anchor\" href=\"#bean的循环依赖\">#</a> bean 的循环依赖</h3>\n<p>当我们创建  <code>bean</code>  的时候可能会遇到这个问题：两个对象互相依赖了对方，即  <code>A</code>  的属性包括  <code>B</code>  ,  <code>B</code>  的属性包括了  <code>A</code> 。</p>\n<p>我们创建下面两个类  <code>Wife</code>  和  <code>Husband</code>  类：</p>\n<img src=\"huswife.png\" alt=\"Husband类和Wife类的关系\">\n<p>由该图可知  <code>Husband</code>  和  <code>Wife</code>  构成了循环依赖</p>\n<p>代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Husband</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> Wife wife;<br>    <span class=\"hljs-comment\">// toString()方法重写时需要注意：不能直接输出wife，输出wife.getName()。要不然会出现递归导致的栈内存溢出错误。</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Husband&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, wife=&quot;</span> + wife.getName() +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Wife</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> Husband husband;<br><br>    <span class=\"hljs-comment\">// toString()方法重写时需要注意：不能直接输出husband，输出husband.getName()。要不然会出现递归导致的栈内存溢出错误。</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Wife&#123;&quot;</span> +<br>                <span class=\"hljs-string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"hljs-string\">&#x27;\\&#x27;&#x27;</span> +<br>                <span class=\"hljs-string\">&quot;, husband=&quot;</span> + husband.getName() +<br>                <span class=\"hljs-string\">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>现在我们将其配置成  <code>bean</code>  ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;husband&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.cycle.bean.Husband&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;singleton&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;hello&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;wife&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;wife&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.jhy.cycle.bean.Wife&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;wife&quot;</span> <span class=\"hljs-attr\">scope</span>=<span class=\"hljs-string\">&quot;singleton&quot;</span> &gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;world&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;husband&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;husband&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>通过  <code>ioc</code>  容器获取这两个  <code>bean</code>  后，我们打印这两个类，结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Husband&#123;name=&#x27;hello&#x27;, wife=world&#125;<br>Wife&#123;name=&#x27;world&#x27;, husband=hello&#125;<br></code></pre></td></tr></table></figure>\n<p>可见这两个对象的属性都分配成功， <code>Spring</code>  成功解决了循环依赖问题，为什么会这样呢？</p>\n<p>在上述情况下我们使用的是  <code>singleton</code>  和  <code>set</code>  注入的情况，下节将会回答这个问题。</p>\n<h4 id=\"set注入的情况\"><a class=\"markdownIt-Anchor\" href=\"#set注入的情况\">#</a> set 注入的情况</h4>\n<h5 id=\"全部为singleton\"><a class=\"markdownIt-Anchor\" href=\"#全部为singleton\">#</a> 全部为 singleton</h5>\n<p>在此情况下  <code>Spring</code>  将  <code>bean</code>  的创建分成两个步骤：</p>\n<ol>\n<li><code>Spring</code>  会先将  <code>bean</code>  实例化了出来，此时  <code>bean</code>  的各个属性都没有赋值，处于 “曝光” 状态，意味着此时  <code>bean</code>  已经可以被其他  <code>bean</code>  知晓并使用。</li>\n<li>被创建出来的  <code>bean</code>  通过  <code>setter</code>  方法进行赋值。</li>\n</ol>\n<p>因此，两个单例的  <code>bean</code>  再进行属性赋值的时候全部都已经存在，所以才不会存在循环依赖的问题。</p>\n<p><code>Spring</code>  官方文档如下解释说：</p>\n<blockquote>\n<p>当容器被创建时， <code>Spring</code>  容器会验证每个  <code>Bean</code>  的配置。然而，在实际创建  <code>Bean</code>  之前， <code>Bean</code>  的属性本身不会被设置。当容器被创建时，那些具有单例作用域并被设置为预实例化的  <code>Bean</code> （默认）被创建。创建  <code>bean</code>  有可能导致创建  <code>bean</code>  图（graph），因为  <code>bean</code>  的依赖关系和它的依赖关系（等等）被创建和分配。请注意，这些依赖关系之间的解析不匹配可能会出现得很晚 — 也就是说，在第一次创建受影响的  <code>Bean</code>  时。</p>\n</blockquote>\n<h5 id=\"单个为singleton\"><a class=\"markdownIt-Anchor\" href=\"#单个为singleton\">#</a> 单个为 singleton</h5>\n<p>下面我们将  <code>wife bean</code>  改为  <code>prototype</code>  ，再次运行观察结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Husband&#123;name=&#x27;hello&#x27;, wife=world&#125;<br>Wife&#123;name=&#x27;world&#x27;, husband=hello&#125;<br></code></pre></td></tr></table></figure>\n<p>仍然运行成功。可见，只要两个  <code>bean</code>  的作用域有一个为单例即可解决循环依赖问题。</p>\n<p>我们知道作用域处于  <code>prototype</code>  的  <code>bean</code>  只有在被需要的时候才会被创建，所以当单例的  <code>bean</code>  需要一个原型的  <code>bean</code>  时，该原型的  <code>bean</code>  才会被创建，而该原型  <code>bean</code>  需要单例的  <code>bean</code>  的时候，该单例  <code>bean</code>  早已存在，所以循环依赖问题不会发生。</p>\n<h5 id=\"全部为prototype\"><a class=\"markdownIt-Anchor\" href=\"#全部为prototype\">#</a> 全部为 prototype</h5>\n<p>作用域处于  <code>prototype</code>  的  <code>bean</code>  只有在被需要的时候才会被创建，且会返回不同的实例。我们以上面的  <code>Wife</code>  和  <code>Husband</code>  举例。</p>\n<p>所以当  <code>Wife</code>  创建的时候，会去创建另一个  <code>Husband</code>  ；而当  <code>Husband</code>  创建时，会创建另一个  <code>Wife</code>  。由于原型每次创建新的  <code>bean</code>  的特性，每次创建的  <code>Husband</code>  和  <code>Wife</code>  都不相同，所以会一直创建下去。循环依赖问题并不会解决</p>\n<p>当我们将  <code>bean</code>  的作用域全部改为  <code>prototype</code>  ，再次运行时会发现，程序抛出了下面的异常：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">org.springframework.beans.factory.BeanCurrentlyInCreationException: <br>Error creating bean with name &#x27;husband&#x27;: <br>Requested bean is currently in creation: Is there an unresolvable circular reference?<br></code></pre></td></tr></table></figure>\n<p>代表着循环依赖问题并没有解决</p>\n<h4 id=\"构造器注入的情况\"><a class=\"markdownIt-Anchor\" href=\"#构造器注入的情况\">#</a> 构造器注入的情况</h4>\n<p>上面说过，只有实例化和注入的步骤分开的时候，循环依赖的情况才会解决，所以当使用构造器注入的时候，是实例化和注入同时进行，此时依赖的  <code>bean</code>  并没有创建，所以也不存在能解决循环问题的办法。因此，构造器注入无法解决循环依赖问题。</p>\n<p>我们将注入改为构造器注入，运行后仍然会发现，程序抛出了  <code>BeanCreationException</code>  异常：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">org.Springframework.beans.factory.BeanCreationException: <br>Error creating bean with name &#x27;husband&#x27; defined in class path resource [Spring.xml]: <br>Cannot resolve reference to bean &#x27;wife&#x27; while setting constructor argument<br></code></pre></td></tr></table></figure>\n<h4 id=\"三级依赖解决循环依赖源码\"><a class=\"markdownIt-Anchor\" href=\"#三级依赖解决循环依赖源码\">#</a> 三级依赖解决循环依赖 (源码)</h4>\n<p>注意解决循环依赖问题建立在：单例和  <code>set</code>  注入的情况下。</p>\n<p>让我们进入： <strong> <code>AbstractAutowireCapableBeanFactory</code>  类的  <code>doCreateBean()</code>  方法</strong> ，所有的单例  <code>bean</code>  都在这里创建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title function_\">doCreateBean</span><span class=\"hljs-params\">(String beanName, RootBeanDefinition mbd, <span class=\"hljs-meta\">@Nullable</span> Object[] args)</span><br>\t\t\t<span class=\"hljs-keyword\">throws</span> BeanCreationException &#123;<br><br>\t\t<span class=\"hljs-comment\">// Instantiate the bean.下面就是在实例化bean</span><br>\t\t<span class=\"hljs-type\">BeanWrapper</span> <span class=\"hljs-variable\">instanceWrapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>\t\t<span class=\"hljs-keyword\">if</span> (mbd.isSingleton()) &#123;<br>\t\t\tinstanceWrapper = <span class=\"hljs-built_in\">this</span>.factoryBeanInstanceCache.remove(beanName);<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> (instanceWrapper == <span class=\"hljs-literal\">null</span>) &#123;<br>\t\t\tinstanceWrapper = createBeanInstance(beanName, mbd, args);<br>\t\t&#125;<br>\t\t<span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">bean</span> <span class=\"hljs-operator\">=</span> instanceWrapper.getWrappedInstance(); <span class=\"hljs-comment\">//该方法就是已经获得了实例化的bean，此时该bean的所有属性均没有被赋值</span><br>\t\tClass&lt;?&gt; beanType = instanceWrapper.getWrappedClass(); <br>\t\t<span class=\"hljs-keyword\">if</span> (beanType != NullBean.class) &#123;<br>\t\t\tmbd.resolvedTargetType = beanType;<br>\t\t&#125;<br>\t\t......<br>\t\t<span class=\"hljs-comment\">//注意下面的代码块</span><br>\t\t<span class=\"hljs-comment\">// Eagerly cache singletons to be able to resolve circular references</span><br>    \t<span class=\"hljs-comment\">// 急切地缓存单例以便能够解决循环依赖</span><br>\t\t<span class=\"hljs-comment\">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span><br>    \t<span class=\"hljs-comment\">// 甚至当被如BeanFactoryAware生命周期接口触发地时候</span><br>\t\t<span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">earlySingletonExposure</span> <span class=\"hljs-operator\">=</span> (mbd.isSingleton() &amp;&amp; <span class=\"hljs-built_in\">this</span>.allowCircularReferences &amp;&amp;<br>\t\t\t\tisSingletonCurrentlyInCreation(beanName)); <span class=\"hljs-comment\">//判断是否要解决循环依赖问题</span><br>\t\t<span class=\"hljs-keyword\">if</span> (earlySingletonExposure) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (logger.isTraceEnabled()) &#123;<br>\t\t\t\tlogger.trace(<span class=\"hljs-string\">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +<br>\t\t\t\t\t\t<span class=\"hljs-string\">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);<br>\t\t\t&#125;<br>            <span class=\"hljs-comment\">//解决循环依赖地问题地办法就在这里，该方法位于DefaultSingletonBeanRegistry，让我们进入这个方法.....</span><br>\t\t\taddSingletonFactory(beanName, () -&gt; getEarlyBeanReference(beanName, mbd, bean));<br>\t\t&#125;<br>\t\t......<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>addSingletonFactory</code>  方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">addSingletonFactory</span><span class=\"hljs-params\">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> &#123;<br>\t\tAssert.notNull(singletonFactory, <span class=\"hljs-string\">&quot;Singleton factory must not be null&quot;</span>);<br>\t\t<span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-built_in\">this</span>.singletonObjects) &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.singletonObjects.containsKey(beanName)) &#123; <br>                <span class=\"hljs-comment\">/** 我们重点看这个表达式，它将bean的名字和创建这个bean的工厂放进了一个map集合里，</span><br><span class=\"hljs-comment\">                也就是将这个对象提前曝光。这个map集合就是我们待会儿要说的三级缓存之一*/</span><br>\t\t\t\t<span class=\"hljs-built_in\">this</span>.singletonFactories.put(beanName, singletonFactory);<br>\t\t\t\t<span class=\"hljs-built_in\">this</span>.earlySingletonObjects.remove(beanName);<br>\t\t\t\t<span class=\"hljs-built_in\">this</span>.registeredSingletons.add(beanName);<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br></code></pre></td></tr></table></figure>\n<p>下面就是  <code>DefaultSingletonBeanRegistry</code>  类的三个 map 集合属性，也就是–三级缓存</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/** Cache of singleton factories: bean name to ObjectFactory. */</span><br><span class=\"hljs-comment\">//三级缓存，单例工厂缓存。是bean名字和bean工厂的map集合。缓存创造对应bean的单例工厂，</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;(<span class=\"hljs-number\">16</span>);<br><br><span class=\"hljs-comment\">/** Cache of early singleton objects: bean name to bean instance. */</span><br><span class=\"hljs-comment\">//二级缓存，预实例化对象的缓存。是bean名字和预实例化的bean的map集合。缓存对应的属性未赋值的bean</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;(<span class=\"hljs-number\">16</span>);<br><br><span class=\"hljs-comment\">/** Cache of singleton objects: bean name to bean instance. */</span><br><span class=\"hljs-comment\">//一级缓存，单例对象的缓存。是bean名字和实例化后的bean的map集合。缓存对应的属性已经赋值的bean，也就是对象本身了。</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> Map&lt;String, Object&gt; singletonObjects = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentHashMap</span>&lt;&gt;(<span class=\"hljs-number\">256</span>);<br></code></pre></td></tr></table></figure>\n<p>了解了三级缓存后，我们来到该类的另外一个方法  <code>getSingleton</code>  :</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">protected</span> Object <span class=\"hljs-title function_\">getSingleton</span><span class=\"hljs-params\">(String beanName, <span class=\"hljs-type\">boolean</span> allowEarlyReference)</span> &#123;<br>    <span class=\"hljs-comment\">// 下面就是解决循环依赖的办法</span><br>    <span class=\"hljs-comment\">// Quick check for existing instance without full singleton lock</span><br>    <span class=\"hljs-comment\">//首先会从一级缓存中取该单例对象，看是否能取到</span><br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">singletonObject</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.singletonObjects.get(beanName);<br>    <span class=\"hljs-keyword\">if</span> (singletonObject == <span class=\"hljs-literal\">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;<br>        <span class=\"hljs-comment\">//没有取到则去二级缓存取预实例化的单例对象</span><br>        singletonObject = <span class=\"hljs-built_in\">this</span>.earlySingletonObjects.get(beanName);<br>        <span class=\"hljs-keyword\">if</span> (singletonObject == <span class=\"hljs-literal\">null</span> &amp;&amp; allowEarlyReference) &#123;<br>            <span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-built_in\">this</span>.singletonObjects) &#123;<br>                <span class=\"hljs-comment\">// Consistent creation of early reference within full singleton lock</span><br>                singletonObject = <span class=\"hljs-built_in\">this</span>.singletonObjects.get(beanName);<br>                <span class=\"hljs-keyword\">if</span> (singletonObject == <span class=\"hljs-literal\">null</span>) &#123;              <br>                    singletonObject = <span class=\"hljs-built_in\">this</span>.earlySingletonObjects.get(beanName);<br>                    <span class=\"hljs-keyword\">if</span> (singletonObject == <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-comment\">//最终都没有的话去三级缓存中去该对象的bean工厂</span><br>                        ObjectFactory&lt;?&gt; singletonFactory = <span class=\"hljs-built_in\">this</span>.singletonFactories.get(beanName);<br>                        <span class=\"hljs-keyword\">if</span> (singletonFactory != <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-comment\">//然后通过该bean工厂回去对应的bean</span><br>                            singletonObject = singletonFactory.getObject();<br>                        <span class=\"hljs-comment\">//加入二级缓存</span><br>                            <span class=\"hljs-built_in\">this</span>.earlySingletonObjects.put(beanName, singletonObject);<br>                        <span class=\"hljs-comment\">//随后将该工厂移除</span><br>                            <span class=\"hljs-built_in\">this</span>.singletonFactories.remove(beanName);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> singletonObject;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"基于注解的ioc开发\"><a class=\"markdownIt-Anchor\" href=\"#基于注解的ioc开发\">#</a> 基于注解的 Ioc 开发</h2>\n<p><code>Spring</code>  提供了注解 + 扫描的方式来替代  <code>xml</code>  配置</p>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>现在让我们创建一个注解  <code>@Component</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Component &#123;<br>    String <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br>&#125;<br><span class=\"hljs-comment\">//将这个注解加到一个类上去</span><br><span class=\"hljs-meta\">@Component(&quot;user&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果当我获得了这个类的包名并且想让标注了这个注解的类能被实例化，并添加至一个 map 集合里，那我们应该怎么做？答案是使用反射：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testComponentScan</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">packageName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;com.jhy.bean&quot;</span>; <span class=\"hljs-comment\">//包名</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">packagePath</span> <span class=\"hljs-operator\">=</span> packageName.replaceAll(<span class=\"hljs-string\">&quot;\\\\.&quot;</span>, <span class=\"hljs-string\">&quot;/&quot;</span>); <span class=\"hljs-comment\">//将包名改成路径</span><br><br>        <span class=\"hljs-type\">URL</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> ClassLoader.getSystemClassLoader().getResource(packagePath);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">path</span> <span class=\"hljs-operator\">=</span> resource.getPath();<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(path); <span class=\"hljs-comment\">//获得磁盘路径的File对象</span><br>        File[] files = file.listFiles(); <span class=\"hljs-comment\">//查找该路径下的所有文件</span><br><br>\t\t<span class=\"hljs-comment\">//循环遍历</span><br>        Arrays.stream(files).forEach(f -&gt; &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">className</span> <span class=\"hljs-operator\">=</span> packageName + <span class=\"hljs-string\">&quot;.&quot;</span> + f.getName().split(<span class=\"hljs-string\">&quot;\\\\.&quot;</span>)[<span class=\"hljs-number\">0</span>]; <span class=\"hljs-comment\">//获得类的全限定名</span><br>            Class&lt;?&gt; aClass = <span class=\"hljs-literal\">null</span>;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                aClass = Class.forName(className); <span class=\"hljs-comment\">//获得该类的字节码对象</span><br>                <span class=\"hljs-keyword\">if</span> (aClass.isAnnotationPresent(Component.class)) &#123; <span class=\"hljs-comment\">//判断是否标注了注解，标注了注解就通过反射实例化</span><br>                    <span class=\"hljs-type\">Component</span> <span class=\"hljs-variable\">annotation</span> <span class=\"hljs-operator\">=</span> aClass.getAnnotation(Component.class);<br>                    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> annotation.value(); <span class=\"hljs-comment\">//获得注解的值</span><br>                    Constructor&lt;?&gt; constructor = aClass.getConstructor();<br>                    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">target</span> <span class=\"hljs-operator\">=</span> constructor.newInstance(); <span class=\"hljs-comment\">//实例化</span><br>                    map.put(value,target); <span class=\"hljs-comment\">//添加到一个map集合里</span><br>                &#125;<br>            &#125; <span class=\"hljs-keyword\">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        System.out.println(map); <span class=\"hljs-comment\">//打印集合</span><br>    &#125;<br></code></pre></td></tr></table></figure>\n<p>结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">&#123;user=com.jhy.bean.User@e580929&#125;<br></code></pre></td></tr></table></figure>\n<p>如果你将这个注解添加至包下的更多类上，那么 map 结合中将会包含所有被标注了这个注解的实例。</p>\n<p>如上就是  <code>IoC</code>  的注解开发的原理：扫描包下的所有类，将所有标注了指定注解的类通过反射调用进行实例化。</p>\n<h3 id=\"注解\"><a class=\"markdownIt-Anchor\" href=\"#注解\">#</a> 注解</h3>\n<p><code>Spring</code>  提供了四个注解来进行注解开发：</p>\n<ul>\n<li><code>@Component</code> ：注解普通的类</li>\n<li><code>@Controller</code> ：注解表示层的类</li>\n<li><code>@Service</code> ：注解业务层的类</li>\n<li><code>@Repository</code> ：注解数据访问层的类</li>\n</ul>\n<p>源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Indexed</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Component &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * The value may indicate a suggestion for a logical component name,</span><br><span class=\"hljs-comment\">\t * to be turned into a Spring bean name in case of an autodetected component.</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span> the suggested component name, if any (or empty String otherwise)</span><br><span class=\"hljs-comment\">\t */</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><br>&#125;<br><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Controller &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * Alias for &#123;<span class=\"hljs-doctag\">@link</span> Component#value&#125;.</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-meta\">@AliasFor(annotation = Component.class)</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><br>&#125;<br><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Service &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * Alias for &#123;<span class=\"hljs-doctag\">@link</span> Component#value&#125;.</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-meta\">@AliasFor(annotation = Component.class)</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><br>&#125;<br><br><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Repository &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * Alias for &#123;<span class=\"hljs-doctag\">@link</span> Component#value&#125;.</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-meta\">@AliasFor(annotation = Component.class)</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>除  <code>@Conponent</code>  的三个注解都被  <code>@Componet</code>  注解了，因此其余三个注解都是  <code>@Component</code>  的衍生注解，功能一样。</p>\n</blockquote>\n<p>上述注解的  <code>value()</code>  属性代表该类实例化后的  <code>id</code>  或者  <code>name</code>  ，如果省略，则以该类的首字母小写的类名作为实例化后的  <code>id</code>  或者  <code>name</code>  。</p>\n<h4 id=\"使用注解\"><a class=\"markdownIt-Anchor\" href=\"#使用注解\">#</a> 使用注解</h4>\n<p>前面提到基于注解的  <code>IoC</code>  开发时采用的扫描 + 反射的原理进行的。所以，注解存在，下面我们来进行扫描：</p>\n<p>如果使用  <code>xml</code>  进行扫描，就要使用  <code>context</code>  命名空间下的标签了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"> <span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span> = <span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.Springframework.org/schema/beans </span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">                           http://www.Springframework.org/schema/beans/Spring-beans.xsd </span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">                           http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t使用context确保下面的约束存在</span><br><span class=\"hljs-comment\">\txmlns:context = &quot;http://www.Springframework.org/schema/context&quot;</span><br><span class=\"hljs-comment\">\t xsi:schemaLocation =  &quot;http://www.Springframework.org/schema/context </span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\thttp://www.Springframework.org/schema/context/Spring-context.xsd&quot;</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\tcomponent-scan专门用来进行扫描</span><br><span class=\"hljs-comment\">\tbase-package则为扫描的包的范围，如果要扫描多个包，可以用逗号，分号，空格等进行分割</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package则为扫描的包</span>=<span class=\"hljs-string\">&quot;com.jhy.anno.beans&quot;</span>/&gt;</span><br>    <br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t如果你想选择性实例化一些Bean，可以禁用默认的包扫描过滤器：use-default-filters=&quot;false“，use-default-filters默认是true</span><br><span class=\"hljs-comment\">\t然后自己去设计自定义的包含过滤器：&lt;context:include-filter&gt;用来指定包含的过滤器，type指定包含策略，expression指定策略的详细信息</span><br><span class=\"hljs-comment\">\t如下的内容表示将会让被@Repository注解的类注册为bean</span><br><span class=\"hljs-comment\">\t请注意：&lt;context:include-filter&gt;必须和use-default-filters=&quot;false&quot;使用才会生效</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package则为扫描的包</span>=<span class=\"hljs-string\">&quot;com.jhy.anno.beans&quot;</span>  <span class=\"hljs-attr\">use-default-filters</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>    \t <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:include-filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;annotation&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;org.Springframework.stereotype.Repository&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context:component-scan</span>&gt;</span><br>    <br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t如果你想选择性实例化一些Bean，也可以选择自定义排除过滤器，排除过滤器和use-default-filters=&quot;true&quot;一起工作</span><br><span class=\"hljs-comment\">\t当然，use-default-filters默认为true，所以可以不写</span><br><span class=\"hljs-comment\">\t&lt;context:exclude-filter&gt;排除过滤器 type指定排除策略，expression指定策略的详细信息</span><br><span class=\"hljs-comment\">\t如下的内容表示不会将被@Service标注的类注解为bean</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package则为扫描的包</span>=<span class=\"hljs-string\">&quot;com.jhy.anno.beans&quot;</span>&gt;</span><br>    \t <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:exclude-filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;annotation&quot;</span> <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;org.Springframework.stereotype.Service&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context:component-scan</span>&gt;</span><br>    <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>如下为排除过滤器和包含过滤器的一些详细信息：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Filter Type</th>\n<th style=\"text-align:left\">示例表达式</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">注解 (annotation) (默认)</td>\n<td style=\"text-align:left\"><code>org.example.SomeAnnotation</code></td>\n<td style=\"text-align:left\">一个注解在目标组件中的类型级别是 <em>present</em> 或 <em>meta-present</em>。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可指定 (assignable)</td>\n<td style=\"text-align:left\"><code>org.example.SomeClass</code></td>\n<td style=\"text-align:left\">目标组件可分配给（继承或实现）的一个类（或接口）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">aspectj</td>\n<td style=\"text-align:left\"><code>org.example..*Service+</code></td>\n<td style=\"text-align:left\">要被目标组件匹配的 AspectJ type 表达式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">regex</td>\n<td style=\"text-align:left\"><code>org\\.example\\.Default.*</code></td>\n<td style=\"text-align:left\">一个与目标组件的类名相匹配的 regex expression。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">自定义 (custom)</td>\n<td style=\"text-align:left\"><code>org.example.MyTypeFilter</code></td>\n<td style=\"text-align:left\"><code>org.Springframework.core.type.TypeFilter</code>  接口的自定义实现。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"自动装配\"><a class=\"markdownIt-Anchor\" href=\"#自动装配\">#</a> 自动装配</h4>\n<p>与  <code>xml</code>  的自动装配一样，注解式开发也提供了用于自动装配的注解</p>\n<h5 id=\"value\"><a class=\"markdownIt-Anchor\" href=\"#value\">#</a> @Value</h5>\n<p><code>@Value</code>  用于简单类型的自动装配：</p>\n<p><code>@Value</code>  的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE&#125;)</span> <span class=\"hljs-comment\">//可以注解：属性、方法、参数、注解</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Value &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * The actual value expression such as &lt;code&gt;#&#123;systemProperties.myProp&#125;&lt;/code&gt;</span><br><span class=\"hljs-comment\">\t * or property placeholder such as &lt;code&gt;$&#123;my.app.myProp&#125;&lt;/code&gt;.</span><br><span class=\"hljs-comment\">\t */</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span>; <span class=\"hljs-comment\">//代表传入的简单类型字面值</span><br></code></pre></td></tr></table></figure>\n<p>实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span> &#123;<br>    <span class=\"hljs-meta\">@Value(&quot;123&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">User</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Value(&quot;789&quot;)</span> String name)</span> &#123; <span class=\"hljs-comment\">//通过构造器初始化</span><br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Value(&quot;456&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>@Value</code> ：可以出现在：属性、构造器参数和  <code>setter</code>  方法上。注意当  <code>@Value</code>  出现在属性上时，不需要  <code>setter</code>  方法，因为反射的机理，导致能通过反射拿到值</p>\n</blockquote>\n<h5 id=\"autowired和qualifier\"><a class=\"markdownIt-Anchor\" href=\"#autowired和qualifier\">#</a> @Autowired 和 @Qualifier</h5>\n<p><code>@Autowired</code>  用来注解 “非简单类型”--  <code>Spring</code>  所认为的。</p>\n<p><code>@Autowired</code>  的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class=\"hljs-comment\">//能注解：构造器、方法、参数、属性、注解</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Autowired &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * Declares whether the annotated dependency is required.</span><br><span class=\"hljs-comment\">\t * &lt;p&gt;Defaults to &#123;<span class=\"hljs-doctag\">@code</span> true&#125;.</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">required</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">//该属性代表该属性是否需要，默认为true则代表需要，也就是没找到能够注入的bean则会报错，如果为false则不会</span><br>&#125;<br><br></code></pre></td></tr></table></figure>\n<p>实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">UserService</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Autowired</span> UserDao userDao)</span> &#123; <span class=\"hljs-comment\">//通过构造器实例化</span><br>        <span class=\"hljs-built_in\">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> UserDao <span class=\"hljs-title function_\">getUserDao</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> userDao;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setUserDao</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Autowired</span> UserDao userDao)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.userDao = userDao;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveUser</span><span class=\"hljs-params\">()</span>&#123;<br>        userDao.saveUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>特别的，当属性的名字和构造方法的参数名相同，且只有一个构造方法，那么不使用  <code>@Autowired</code>  也能完成自动装配：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> UserDao userDao;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">UserService</span><span class=\"hljs-params\">(UserDao userDao)</span> &#123; <span class=\"hljs-comment\">//通过构造器实例化</span><br>        <span class=\"hljs-built_in\">this</span>.userDao = userDao;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>@Autowired</code>  能够注解在：属性、构造方法、参数、 <code>setter</code>  方法。且当  <code>@Autowired</code>  出现在属性上时，同样也不需要  <code>setter</code>  方法。</p>\n<p>且注意  <code>@Autowired</code>  默认只能使用  <code>byType</code>  查找  <code>bean</code>  ，所以当容器中有多个相同类型的  <code>bean</code>  出现时，单使用  <code>@Autowired</code>  会报错。</p>\n</blockquote>\n<p>于是如果你想让  <code>@Autowired</code>  根据  <code>byName</code>  的方式查找  <code>bean</code>  的话，那么要和  <code>@Qualifier</code>  进行搭配使用。</p>\n<p><code>@Qualifier</code>  的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class=\"hljs-comment\">//能够注解属性、方法、参数、类型</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Inherited</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Qualifier &#123;<br><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">//代表某个bean的id</span><br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>实例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Component</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span> &#123;<br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-meta\">@Qualifier(&quot;userDaoMysql&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> IUerDao userDao;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>这样就会根据名字去查找  <code>id</code>  为  <code>userDaoMysql</code>  的  <code>bean</code></p>\n</blockquote>\n<p>或者如果你仍然想使用  <code>byType</code>  的方式查找那么可以使用  <code>@Primary</code>  注解</p>\n<h5 id=\"primary\"><a class=\"markdownIt-Anchor\" href=\"#primary\">#</a> @Primary</h5>\n<p>因为按类型自动注入可能会导致多个候选者，所以经常需要对选择过程进行更多的控制。实现这一目标的方法之一是使用  <code>Spring</code>  的  <code>@Primary</code>  注解。 <code>@Primary</code>  表示，当多个 <code>bean</code>  是自动注入到一个单值（ <code>single value</code> ）依赖的候选者时，应该优先考虑一个特定的  <code>bean</code> 。如果在候选者中正好有一个主要（ <code>primary</code> ） <code>bean</code>  存在，它就会成为自动注入的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span> <span class=\"hljs-comment\">//可以标注类型、方法</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Primary &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"resource\"><a class=\"markdownIt-Anchor\" href=\"#resource\">#</a> @Resource</h5>\n<p><code>@Resource</code>  注解也可以完成非简单类型注入。他有以下的特性：</p>\n<ul>\n<li><code>@Resource</code>  注解是  <code>JDK</code>  扩展包中的，也就是说属于  <code>JDK</code>  的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250 标准中制定的注解类型。JSR 是 Java 规范提案。)</li>\n<li><strong> <code>@Resource</code>  注解默认根据名称装配  <code>byName</code>  ，未指定  <code>name</code>  时，使用属性名作为  <code>name</code>  。通过  <code>name</code>  找不到的话会自动启动通过类型  <code>byType</code>  装配。</strong></li>\n<li><code>@Resource</code>  注解用在属性上、 <code>setter</code>  方法上。</li>\n</ul>\n<p>由于  <code>oracle</code>  在  <code>jdk9</code>  的时候将  <code>java ee</code>  捐献给了  <code>Apache</code>  基金会，并且改名  <code>jartarka ee</code>  ，所以引入如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.annotation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.annotation-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p><code>@Resource</code>  的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(&#123;TYPE, FIELD, METHOD&#125;)</span> <span class=\"hljs-comment\">//能注解类型、属性、方法</span><br><span class=\"hljs-meta\">@Retention(RUNTIME)</span><br><span class=\"hljs-meta\">@Repeatable(Resources.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Resource &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * The JNDI name of the resource.  For field annotations,</span><br><span class=\"hljs-comment\">     * the default is the field name.  For method annotations,</span><br><span class=\"hljs-comment\">     * the default is the JavaBeans property name corresponding</span><br><span class=\"hljs-comment\">     * to the method.  For class annotations, there is no default</span><br><span class=\"hljs-comment\">     * and this must be specified.</span><br><span class=\"hljs-comment\">     */</span><br>    String <span class=\"hljs-title function_\">name</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">//name属性用来接受bean的名称</span><br>    ......<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"全注解式开发\"><a class=\"markdownIt-Anchor\" href=\"#全注解式开发\">#</a> 全注解式开发</h3>\n<p>通过配置类取代  <code>xml</code>  文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.Springframework.context.annotation.ComponentScan;<br><span class=\"hljs-keyword\">import</span> org.Springframework.context.annotation.ComponentScans;<br><span class=\"hljs-keyword\">import</span> org.Springframework.context.annotation.Configuration;<br><br><span class=\"hljs-meta\">@Configuration</span> <span class=\"hljs-comment\">//代表此类为一个配置类。</span><br><span class=\"hljs-meta\">@ComponentScan(&#123;&quot;com.jhy.Spring6.dao&quot;, &quot;com.jhy.Spring6.service&quot;&#125;)</span> <span class=\"hljs-comment\">//扫描包结构</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Spring6Configuration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>@Configuration</code>  的源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Target(ElementType.TYPE)</span><br><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Documented</span><br><span class=\"hljs-meta\">@Component</span> <span class=\"hljs-comment\">//@Configuration 被 @Component注解，代表该注解表示的类也会被注册为bean</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Configuration &#123;<br>\t<span class=\"hljs-meta\">@AliasFor(annotation = Component.class)</span><br>\tString <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-string\">&quot;&quot;</span>; <span class=\"hljs-comment\">//bean的名称</span><br>    ......<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>之前的  <code>ClassPathXmlApplicationContext</code>  也被  <code>AnnotationConfigApplicationContext</code>  取代：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ApplicationContext</span> <span class=\"hljs-variable\">ioc</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AnnotationConfigApplicationContext</span>(MyConfiguration.class); <span class=\"hljs-comment\">//MyConfiguration.class为配置类的字节码对象</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"基于java的容器配置\"><a class=\"markdownIt-Anchor\" href=\"#基于java的容器配置\">#</a> 基于 Java 的容器配置</h3>\n<p>上面我们介绍了如何通过配置类的方式取代  <code>xml</code>  文件，那么下面我们介绍如何通过配置类配置  <code>bean</code>  以及一些额外信息。</p>\n<p><code>Spring</code>  的  <code>Java</code>  配置支持的核心工件是  <code>@Configuration</code>  注解的类和  <code>@Bean</code>  注解的方法。</p>\n<p><code>@Bean</code>  注解用来表示一个方法实例化、配置和初始化了一个新的对象，由  <code>Spring IoC</code>  容器管理。 <code>@Bean</code>  注解的作用与  <code>&lt;bean&gt;</code>  元素的作用相同。你可以在任何  <code>Spring</code>   <code>@Component</code>  中使用  <code>@Bean</code>  注解的方法。然而，它们最常被用于  <code>@Configuration</code>   <code>bean</code> 。</p>\n<p>用  <code>@Configuration</code>  来注解一个类，表明它的主要目的是作为  <code>bean</code>  定义的来源。此外，  <code>@Configuration</code>  类允许通过调用同一个类中的其他  <code>@Bean</code>  方法来定义  <code>bean</code>  间的依赖关系。最简单的  <code>@Configuration</code>  类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> MyServiceImpl <span class=\"hljs-title function_\">myService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyServiceImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>前面的  <code>AppConfig</code>  类等同于下面的 Spring  <code>&lt;beans/&gt;</code>  XML。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.acme.services.MyServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"使用bean注解\"><a class=\"markdownIt-Anchor\" href=\"#使用bean注解\">#</a> 使用 @Bean 注解</h4>\n<p><code>@Bean</code>  是一个方法级注解，是 XML  <code>&lt;bean/&gt;</code>  元素的直接类似物。该注解支持  <code>&lt;bean/&gt;</code>  所提供的一些属性，例如：</p>\n<ul>\n<li><a href=\"#%E6%8E%A5%E6%94%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E5%9B%9E%E8%B0%83\">init-method</a></li>\n<li><a href=\"#%E6%8E%A5%E6%94%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E5%9B%9E%E8%B0%83\">destroy-method</a></li>\n<li>[autowiring](#Bean 依赖)</li>\n<li><code>name</code></li>\n</ul>\n<p>你可以在  <code>@Configuration</code>  或  <code>@Component</code>  注解的类中使用  <code>@Bean</code>  注解。</p>\n<h5 id=\"声明一个-bean\"><a class=\"markdownIt-Anchor\" href=\"#声明一个-bean\">#</a> 声明一个 Bean</h5>\n<p>为了声明一个 Bean，你可以用  <code>@Bean</code>  注解来注解一个方法。你可以用这个方法在  <code>ApplicationContext</code>  中注册一个 Bean 定义，该类型被指定为该方法的返回值。默认情况下，Bean 的名字和方法的名字是一样的。下面的例子显示了一个  <code>@Bean</code>  方法声明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> TransferServiceImpl <span class=\"hljs-title function_\">transferService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TransferServiceImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>前面的配置完全等同于下面的 Spring XML。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transferService&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.acme.TransferServiceImpl&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>这两个声明使  <code>ApplicationContext</code>  中一个名为  <code>transferService</code>  的 Bean 可用，并与  <code>TransferServiceImpl</code>  类型的对象实例绑定，正如下面的文字图片所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">transferService -&gt; com.acme.TransferServiceImpl<br></code></pre></td></tr></table></figure>\n<p>你也可以使用  <code>default</code>  方法来定义  <code>bean</code> 。这允许通过在默认方法上实现带有  <code>bean</code>  定义的接口来组成  <code>bean</code>  配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">BaseConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">default</span> TransferServiceImpl <span class=\"hljs-title function_\">transferService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TransferServiceImpl</span>();<br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">BaseConfig</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>你也可以用一个接口（或基类）的返回类型来声明你的  <code>@Bean</code>  方法，如下例所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> TransferService <span class=\"hljs-title function_\">transferService</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TransferServiceImpl</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"bean-依赖\"><a class=\"markdownIt-Anchor\" href=\"#bean-依赖\">#</a> Bean 依赖</h5>\n<p>一个  <code>@Bean</code>  注解的方法可以有任意数量的参数，描述构建该  <code>bean</code>  所需的依赖关系。例如，如果我们的  <code>TransferService</code>  需要一个  <code>AccountRepository</code> ，我们可以用一个方法参数将这种依赖关系具体化，如下例所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> TransferService <span class=\"hljs-title function_\">transferService</span><span class=\"hljs-params\">(AccountRepository accountRepository)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TransferServiceImpl</span>(accountRepository);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>解析机制与基于构造函数的依赖注入基本相同。</p>\n<h5 id=\"接收生命周期的回调\"><a class=\"markdownIt-Anchor\" href=\"#接收生命周期的回调\">#</a> 接收生命周期的回调</h5>\n<p>任何用  <code>@Bean</code>  注解定义的类都支持常规的生命周期回调。 <code>@Bean</code>  注解支持指定任意的初始化和销毁回调方法，就像  <code>Spring XML</code>  在  <code>bean</code>  元素上的  <code>init-method</code>  和  <code>destroy-method</code>  属性一样，如下例所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeanOne</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">init</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// initialization logic</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeanTwo</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">cleanup</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// destruction logic</span><br>    &#125;<br>&#125;<br><br><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean(initMethod = &quot;init&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> BeanOne <span class=\"hljs-title function_\">beanOne</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanOne</span>();<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean(destroyMethod = &quot;cleanup&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> BeanTwo <span class=\"hljs-title function_\">beanTwo</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanTwo</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>默认情况下，用  <code>Java</code>  配置定义的具有  <code>public</code>  的  <code>close</code>  或  <code>shutdown</code>  方法的 Bean 会自动被列入销毁回调。如果你有一个  <code>public</code>  的  <code>close</code>  或  <code>shutdown</code>  方法，并且你不希望它在容器关闭时被调用，你可以在你的  <code>bean</code>  定义中添加  <code>@Bean(destroyMethod = &quot;&quot;)</code>  来禁用默认  <code>(inferred)</code>  模式。</p>\n</blockquote>\n<p>就前文例子中的  <code>BeanOne</code>  而言，在构造过程中直接调用  <code>init()</code>  方法同样有效，正如下面的例子所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> BeanOne <span class=\"hljs-title function_\">beanOne</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">BeanOne</span> <span class=\"hljs-variable\">beanOne</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanOne</span>();<br>        beanOne.init();<br>        <span class=\"hljs-keyword\">return</span> beanOne;<br>    &#125;<br><br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"指定-bean-的-scope\"><a class=\"markdownIt-Anchor\" href=\"#指定-bean-的-scope\">#</a> 指定 Bean 的 Scope</h5>\n<p>Spring 包括  <code>@Scope</code>  注解，这样你就可以指定 Bean 的 scope。</p>\n<h6 id=\"使用-scope-注解\"><a class=\"markdownIt-Anchor\" href=\"#使用-scope-注解\">#</a> 使用  <code>@Scope</code>  注解</h6>\n<p>你可以指定你用  <code>@Bean</code>  注解定义的  <code>bean</code>  应该有一个特定的  <code>scope</code> 。你可以指定任何一个标准  <code>scope</code> 。</p>\n<p>默认的  <code>scope</code>  是  <code>singleton</code> ，但你可以用  <code>@Scope</code>  注解来覆盖它，如下例所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyConfiguration</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-meta\">@Scope(&quot;prototype&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Encryptor <span class=\"hljs-title function_\">encryptor</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"自定义bean的命名\"><a class=\"markdownIt-Anchor\" href=\"#自定义bean的命名\">#</a> 自定义 Bean 的命名</h5>\n<p>默认情况下，配置类使用  <code>@Bean</code>  方法的名称作为结果 Bean 的名称。然而，这个功能可以通过  <code>name</code>  属性来重写，正如下面的例子所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean(&quot;myThing&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Thing <span class=\"hljs-title function_\">thing</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thing</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"bean-别名\"><a class=\"markdownIt-Anchor\" href=\"#bean-别名\">#</a> Bean 别名</h5>\n<p><code>@Bean</code>  注解的  <code>name</code>  属性接受一个  <code>String</code>  数组来实现这一目的。下面的例子展示了如何为一个  <code>bean</code>  设置若干别名。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean(&#123;&quot;dataSource&quot;, &quot;subsystemA-dataSource&quot;, &quot;subsystemB-dataSource&quot;&#125;)</span><br>    <span class=\"hljs-keyword\">public</span> DataSource <span class=\"hljs-title function_\">dataSource</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// instantiate, configure and return DataSource bean...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"bean-描述description\"><a class=\"markdownIt-Anchor\" href=\"#bean-描述description\">#</a> Bean 描述（Description）</h5>\n<p>有时，为  <code>bean</code>  提供更详细的文本描述是有帮助的。为了给  <code>@Bean</code>  添加描述，你可以使用  <code>@Description</code>  注解，如下图所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-meta\">@Description(&quot;Provides a basic example of a bean&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Thing <span class=\"hljs-title function_\">thing</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Thing</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用configuration注解\"><a class=\"markdownIt-Anchor\" href=\"#使用configuration注解\">#</a> 使用 @Configuration 注解</h4>\n<p><code>@Configuration</code>  是一个类级注解，表示一个对象是 Bean 定义的来源。 <code>@Configuration</code>  类通过  <code>@Bean</code>  注解的方法声明 bean。对  <code>@Configuration</code>  类上的  <code>@Bean</code>  方法的调用也可以用来定义 bean 间的依赖关系。</p>\n<h5 id=\"注入bean间的依赖\"><a class=\"markdownIt-Anchor\" href=\"#注入bean间的依赖\">#</a> 注入 bean 间的依赖</h5>\n<p>当 Bean 相互之间有依赖关系时，表达这种依赖关系就像让一个  <code>bean</code>  方法调用另一个一样简单，正如下面的例子所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> BeanOne <span class=\"hljs-title function_\">beanOne</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanOne</span>(beanTwo());<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> BeanTwo <span class=\"hljs-title function_\">beanTwo</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BeanTwo</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"使用componentscan\"><a class=\"markdownIt-Anchor\" href=\"#使用componentscan\">#</a> 使用 @ComponentScan</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(basePackages = &quot;org.example&quot;, //扫描的包</span><br><span class=\"hljs-meta\">        includeFilters = @Filter(type = FilterType.REGEX, pattern = &quot;.*Stub.*Repository&quot;),</span><br><span class=\"hljs-meta\">        excludeFilters = @Filter(Repository.class))</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AppConfig</span> &#123;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>下面的列表显示了等效的 XML。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:component-scan</span> <span class=\"hljs-attr\">base-package</span>=<span class=\"hljs-string\">&quot;org.example&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:include-filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;regex&quot;</span></span><br><span class=\"hljs-tag\">                <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;.*Stub.*Repository&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:exclude-filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;annotation&quot;</span></span><br><span class=\"hljs-tag\">                <span class=\"hljs-attr\">expression</span>=<span class=\"hljs-string\">&quot;org.Springframework.stereotype.Repository&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">context:component-scan</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h1 id=\"代理\"><a class=\"markdownIt-Anchor\" href=\"#代理\">#</a> 代理</h1>\n<p>代理模式术语：</p>\n<ul>\n<li>代理类：包装目标类的类</li>\n<li>目标类：被包装的类</li>\n</ul>\n<p>通过代理类包装目标类，代理类对客户端完全透明。客户端访问代理类，代理类再访问目标类，外界无法访问目标类。</p>\n<p><code>GoF</code>  23 种设计模式之一的代理模式可用来进行一些功能操作：</p>\n<ul>\n<li>实现代码增强。目标对象只需要关注业务代码，额外的操作可以在代理对象中实现。</li>\n<li>提高安全性。在完全进入目标对象前，由代理对象进行一系列的安全判断，以防安全问题或错误出现。</li>\n</ul>\n<p>在  <code>java</code>  中代理可分为静态代理和动态代理。代理必须通过接口完成。</p>\n<h2 id=\"静态代理\"><a class=\"markdownIt-Anchor\" href=\"#静态代理\">#</a> 静态代理</h2>\n<p>现在有一个接口  <code>OrderService</code>  ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">OrderService</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 生成订单</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generate</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 查看订单详情</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">detail</span><span class=\"hljs-params\">()</span>;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 修改订单</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">modify</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>以下是它的实现类  <code>OrderServiceImpl</code>  也就是目标类，用于订单的一些操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderServiceImpl</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">OrderService</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generate</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;订单已生成&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">detail</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;订单信息如下：******&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">modify</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;订单已修改&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>以下就为目标类的代理类  <code>OrderServiceProxy</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderServiceProxy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">OrderService</span>&#123; <span class=\"hljs-comment\">// 代理对象</span><br><br>    <span class=\"hljs-comment\">// 目标对象</span><br>    <span class=\"hljs-keyword\">private</span> OrderService orderService;<br><br>    <span class=\"hljs-comment\">// 通过构造方法将目标对象传递给代理对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">OrderServiceProxy</span><span class=\"hljs-params\">(OrderService orderService)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.orderService = orderService;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generate</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">begin</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算开始时间</span><br>        <span class=\"hljs-comment\">// 执行目标对象的目标方法</span><br>        orderService.generate();<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算结束时间</span><br>        System.out.println(<span class=\"hljs-string\">&quot;耗时&quot;</span>+(end - begin)+<span class=\"hljs-string\">&quot;毫秒&quot;</span>); <span class=\"hljs-comment\">//打印结束时间</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">detail</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">begin</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算开始时间</span><br>        <span class=\"hljs-comment\">// 执行目标对象的目标方法</span><br>        orderService.detail();<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算结束时间</span><br>        System.out.println(<span class=\"hljs-string\">&quot;耗时&quot;</span>+(end - begin)+<span class=\"hljs-string\">&quot;毫秒&quot;</span>); <span class=\"hljs-comment\">//打印结束时间</span><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">modify</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">begin</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算开始时间</span><br>        <span class=\"hljs-comment\">// 执行目标对象的目标方法</span><br>        orderService.modify();<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算结束时间</span><br>        System.out.println(<span class=\"hljs-string\">&quot;耗时&quot;</span>+(end - begin)+<span class=\"hljs-string\">&quot;毫秒&quot;</span>); <span class=\"hljs-comment\">//打印结束时间</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>可见代理类对目标类进行了一些功能增强，且使用了对象组合，大大降低了耦合度。</p>\n<p>客户端通过访问该代理类，就可以访问目标类的功能，且能使用额外的功能</p>\n</blockquote>\n<p>以上就是代理模式中的静态代理，其中  <code>OrderService</code>  接口是代理类和目标类的共同接口。 <code>OrderServiceImpl</code>  是目标类。 <code>OrderServiceProxy</code>  是代理类。</p>\n<p>静态代理的缺点：</p>\n<ul>\n<li>如果系统中业务接口很多，一个接口对应一个代理类，会导致类爆炸</li>\n<li>增强代码荣誉无法复用</li>\n</ul>\n<h2 id=\"动态代理\"><a class=\"markdownIt-Anchor\" href=\"#动态代理\">#</a> 动态代理</h2>\n<p>动态代理通过使用反射来解决静态代理的缺点。下面我们来介绍动态代理。</p>\n<p><code>JDK</code>  中的  <code>java.lang.reflect</code>  中的  <code>Proxy</code>  专门用来处理动态代理。 <code>Proxy</code>  类使用静态方法  <code>newInstance()</code>  来动态创建代理对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">proxy</span> <span class=\"hljs-operator\">=</span> Proxy.newInstance(类加载器，接口，调用处理器) <span class=\"hljs-comment\">//返回代理对象，可通过接口强转至目标接口的对象</span><br><span class=\"hljs-comment\">/*类加载器：\t ClassLoader，动态创建代理类字节码后，需要用类加载器加载进JVM内存。</span><br><span class=\"hljs-comment\">    \t\t代理类和目标类的类加载器必须相同，也就是应用类加载器。通过ClassLoader.getSystemClassLoader()获取默认的应用类加载器 */</span><br><span class=\"hljs-comment\">//接口：Class，目标类的接口的字节码对象。</span><br><span class=\"hljs-comment\">//调用处理器：InvocationHandler。用于真正调用目标对象。</span><br></code></pre></td></tr></table></figure>\n<p>我们仍然使用  <code>OrderService</code>  和  <code>OrderServiceImpl</code>  来举例子。下面我们来看  <code>InvocationHandler</code> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">InvocationHandler</span> &#123;<br><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable;<br>&#125;<br><span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\tInvocationHandler只有一个方法也就是invoke，我们来分析这个方法的参数。</span><br><span class=\"hljs-comment\">\tproxy：通过Proxy.newInstance()创建的代理对象。</span><br><span class=\"hljs-comment\">\tmethod：被调用的方法对象，通过method调用真正的目标方法。</span><br><span class=\"hljs-comment\">\targs：方法所用的参数数组。</span><br><span class=\"hljs-comment\">\t-------------------------------------------------------------</span><br><span class=\"hljs-comment\">\t在调用目标方法前后即可使用增强代码</span><br><span class=\"hljs-comment\">*/</span><br></code></pre></td></tr></table></figure>\n<p>让我们来实现  <code>InvocationHandler</code>  ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OrderInvocationHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">InvocationHandler</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> OrderService orderService; <span class=\"hljs-comment\">//获得目标对象，以用来调用目标对象的目标方法</span><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">OrderInvocationHandler</span><span class=\"hljs-params\">(OrderService orderService)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.orderService = orderService;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(Object proxy, Method method, Object[] args)</span> <span class=\"hljs-keyword\">throws</span> Throwable &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">begin</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算开始时间</span><br>        <br>        <span class=\"hljs-comment\">// 执行目标对象的目标方法</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> method.invoke(orderService, args); <br>        <br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">end</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis(); <span class=\"hljs-comment\">//计算结束时间</span><br>        System.out.println(<span class=\"hljs-string\">&quot;耗时&quot;</span>+(end - begin)+<span class=\"hljs-string\">&quot;毫秒&quot;</span>); <span class=\"hljs-comment\">//打印结束时间</span><br>        <span class=\"hljs-keyword\">return</span> res;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>完成上述准备工作后，我们来创建代理对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    <span class=\"hljs-type\">OrderService</span> <span class=\"hljs-variable\">orderService</span> <span class=\"hljs-operator\">=</span> (OrderService) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), OrderServiceImpl.class.getInterfaces(), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OrderInvocationHandler</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OrderServiceImpl</span>()));<br>    <span class=\"hljs-comment\">//调用代理对象的方法</span><br>    orderService.generate();<br>    orderService.detail();<br>    orderService.modify();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">订单已生成<br>耗时1毫秒<br>订单信息如下：******<br>耗时0毫秒<br>订单已修改<br>耗时0毫秒<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>可见动态代理解决了静态代理的类爆炸和代码冗余问题</p>\n</blockquote>\n<h3 id=\"原理-2\"><a class=\"markdownIt-Anchor\" href=\"#原理-2\">#</a> 原理</h3>\n<p>下面我们来修改一下  <code>main</code>  方法的一些细节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span>&#123;<br>    System.getProperties().put(<span class=\"hljs-string\">&quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>);<br>    <span class=\"hljs-type\">OrderService</span> <span class=\"hljs-variable\">orderService</span> <span class=\"hljs-operator\">=</span> (OrderService) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), OrderServiceImpl.class.getInterfaces(), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OrderInvocationHandler</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OrderServiceImpl</span>()));<br>    <span class=\"hljs-comment\">//调用代理对象的方法</span><br>    orderService.generate();<br>    orderService.detail();<br>    orderService.modify();<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>不出意外你将会在目录中看到  <code>jdk.proxy1.$proxy0</code>  的字节码文件，该文件即之前创造的代理对象。下面我们来看看这对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">$Proxy0</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Proxy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">OrderService</span> &#123; <span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t该类实现了OrderService，所以该对象可以强转为目标接口对象</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t且继承了Proxy，由于单继承，所有JDK的动态代理无法使用继承实现</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*/</span><br>    <span class=\"hljs-comment\">//代理类的所有属性均为Method常量。</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Method m0;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Method m1;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Method m2;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Method m3;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Method m4;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Method m5;<br>    <span class=\"hljs-comment\">// 代理类的构造方法，以InvocationHandler为参数</span><br>    <span class=\"hljs-keyword\">public</span> $Proxy0(InvocationHandler var1) &#123;<br>        <span class=\"hljs-built_in\">super</span>(var1);<br>    &#125;<br>    <span class=\"hljs-comment\">//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> &#123;<br>        ......<br>            <span class=\"hljs-keyword\">return</span> (Integer)<span class=\"hljs-built_in\">super</span>.h.invoke(<span class=\"hljs-built_in\">this</span>, m0, (Object[])<span class=\"hljs-literal\">null</span>);<br>\t\t......<br>    &#125;<br>\t<span class=\"hljs-comment\">//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object var1)</span> &#123;<br>        ......<br>            <span class=\"hljs-keyword\">return</span> (Boolean)<span class=\"hljs-built_in\">super</span>.h.invoke(<span class=\"hljs-built_in\">this</span>, m1, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[]&#123;var1&#125;);<br>        ......<br>    &#125;<br>\t<span class=\"hljs-comment\">//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> String <span class=\"hljs-title function_\">toString</span><span class=\"hljs-params\">()</span> &#123;<br>        ......<br>            <span class=\"hljs-keyword\">return</span> (String)<span class=\"hljs-built_in\">super</span>.h.invoke(<span class=\"hljs-built_in\">this</span>, m2, (Object[])<span class=\"hljs-literal\">null</span>);<br>        ......<br>    &#125;<br>\t<span class=\"hljs-comment\">//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">generate</span><span class=\"hljs-params\">()</span> &#123;<br>       ......<br>            <span class=\"hljs-built_in\">super</span>.h.invoke(<span class=\"hljs-built_in\">this</span>, m3, (Object[])<span class=\"hljs-literal\">null</span>);<br>       ......<br>    &#125;<br>\t<span class=\"hljs-comment\">//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">detail</span><span class=\"hljs-params\">()</span> &#123;<br>      ......<br>            <span class=\"hljs-built_in\">super</span>.h.invoke(<span class=\"hljs-built_in\">this</span>, m4, (Object[])<span class=\"hljs-literal\">null</span>);<br>       ......<br>    &#125;<br>\t<span class=\"hljs-comment\">//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">modify</span><span class=\"hljs-params\">()</span> &#123;<br>       ......<br>            <span class=\"hljs-built_in\">super</span>.h.invoke(<span class=\"hljs-built_in\">this</span>, m5, (Object[])<span class=\"hljs-literal\">null</span>);<br>       ......<br>    &#125;<br>    ......<br>    <span class=\"hljs-comment\">//代理类会获得Object的hashCode方法，equals方法、toString方法以及目标接口的所有方法的Method对象，然后重写他们</span><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        ......<br>            m0 = Class.forName(<span class=\"hljs-string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"hljs-string\">&quot;hashCode&quot;</span>);<br>            m1 = Class.forName(<span class=\"hljs-string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"hljs-string\">&quot;equals&quot;</span>, Class.forName(<span class=\"hljs-string\">&quot;java.lang.Object&quot;</span>));<br>            m2 = Class.forName(<span class=\"hljs-string\">&quot;java.lang.Object&quot;</span>).getMethod(<span class=\"hljs-string\">&quot;toString&quot;</span>);<br>            m3 = Class.forName(<span class=\"hljs-string\">&quot;com.jhy.proxy.OrderService&quot;</span>).getMethod(<span class=\"hljs-string\">&quot;generate&quot;</span>);<br>            m4 = Class.forName(<span class=\"hljs-string\">&quot;com.jhy.proxy.OrderService&quot;</span>).getMethod(<span class=\"hljs-string\">&quot;detail&quot;</span>);<br>            m5 = Class.forName(<span class=\"hljs-string\">&quot;com.jhy.proxy.OrderService&quot;</span>).getMethod(<span class=\"hljs-string\">&quot;modify&quot;</span>);<br>        ......<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>JDK</code>  会在运行中动态创建名为  <code>$Proxy</code>  + 数字的代理类，并且让这个类继承  <code>Proxy</code>  类并且实现目标接口</p>\n</blockquote>\n<h1 id=\"aop\"><a class=\"markdownIt-Anchor\" href=\"#aop\">#</a> AOP</h1>\n<p><code>IoC</code>  使软件组件松耦合。 <code>AOP</code>  让你能够捕捉系统中经常使用的功能，把它转化成组件。</p>\n<p><code>AOP（Aspect Oriented Programming）</code> ：面向切面编程，面向方面编程。（ <code>AOP</code>  是一种编程技术）</p>\n<p><code>AOP</code>  是对  <code>OOP</code>  的补充延伸。 <code>AOP</code>  底层使用的就是动态代理来实现的。</p>\n<p><code>Spring</code>  的  <code>AOP</code>  使用的动态代理是： <code>JDK</code>  动态代理 +  <code>CGLIB</code>  动态代理技术。 <code>Spring</code>  在这两种动态代理中灵活切换，如果是代理接口，会默认使用  <code>JDK</code>  动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用  <code>CGLIB</code>  。当然，你也可以强制通过一些配置让  <code>Spring</code>  只使用  <code>CGLIB</code> 。</p>\n<h2 id=\"aop介绍\"><a class=\"markdownIt-Anchor\" href=\"#aop介绍\">#</a> AOP 介绍</h2>\n<p>一般一个系统当中都会有一些系统服务，例如：日志、事务管理、安全等。这些系统服务被称为：<strong>交叉业务</strong></p>\n<p>这些<strong>交叉业务</strong>几乎是通用的，不管你是做银行账户转账，还是删除用户数据。日志、事务管理、安全，这些都是需要做的。</p>\n<p>如果在每一个业务处理过程当中，都掺杂这些交叉业务代码进去的话，存在两方面问题：</p>\n<ul>\n<li>第一：交叉业务代码在多个业务流程中反复出现，显然这个交叉业务代码没有得到复用。并且修改这些交叉业务代码的话，需要修改多处。</li>\n<li>第二：程序员无法专注核心业务代码的编写，在编写核心业务代码的同时还需要处理这些交叉业务。</li>\n</ul>\n<p>使用  <code>AOP</code>  可以很轻松的解决以上问题。</p>\n<img src=\"aop.png\" alt=\"AOP图解\">\n<h2 id=\"aop八大术语\"><a class=\"markdownIt-Anchor\" href=\"#aop八大术语\">#</a> AOP 八大术语</h2>\n<p>让我们首先定义一些核心的 AOP 概念和术语。这些术语并不是针对  <code>Spring</code>  的。</p>\n<ul>\n<li><code>Aspect</code> （切面）: 一个跨越多个类的关注点的模块化。事务管理是企业级 Java 应用中横切关注点的一个很好的例子。在  <code>Spring AOP</code>  中，切面是通过使用常规类（基于  <code>XML</code>  ）或使用  <code>@Aspect</code>  注解的常规类（  <code>@AspectJ</code>  风格）实现的。</li>\n<li><code>Join point</code> （连接点）: 程序执行过程中的一个点，例如一个方法的执行或一个异常的处理。在  <code>Spring AOP</code>  中，一个连接点总是代表一个方法的执行。</li>\n<li><code>Advice</code> （通知）: 一个切面在一个特定的连接点采取的行动。不同类型的 advice 包括 “around”、“before” 和 “after” 的 advice（Advice 类型将在后面讨论）。许多 AOP 框架，包括 Spring，都将 advice 建模为一个拦截器，并在连接点（Join point）周围维护一个拦截器链。</li>\n<li><code>Pointcut</code> （切点）: 一个匹配连接点的谓词（predicate）。 <code>advice</code>  与一个切点表达式相关联，并在切点匹配的任何连接点上运行（例如，执行一个具有特定名称的方法）。由切点表达式匹配的连接点概念是  <code>AOP</code>  的核心，Spring 默认使用 AspectJ 的切点表达式语言。</li>\n<li><code>Introduction</code> （引入）: 代表一个类型声明额外的方法或字段。Spring AOP 允许你为任何 advice 的对象引入新的接口（以及相应的实现）。例如，你可以使用引入来使一个 bean 实现  <code>IsModified</code>  接口，以简化缓存。（介绍在 AspectJ 社区中被称为类型间声明）。</li>\n<li><code>Target object</code> （目标对象）: 被一个或多个切面所 advice 的对象。也被称为 “advised object”。由于 Spring AOP 是通过使用运行时代理来实现的，这个对象总是一个被代理的对象。</li>\n<li><code>AOP proxy</code> （代理对象）: 一个由  <code>AOP</code>  框架创建的对象，以实现切面契约（ <code>advice</code>  方法执行等）。在  <code>Spring</code>  框架中， <code>AOP</code>  代理是一个  <code>JDK</code>  动态代理或  <code>CGLIB</code>  代理。</li>\n<li><code>Weaving</code> （织入）: 将  <code>aspect</code>  与其他应用程序类型或对象连接起来，以创建一个  <code>advice</code>  对象。这可以在编译时（例如，使用  <code>AspectJ</code>  编译器）、加载时或运行时完成。 <code>Spring AOP</code>  和其他纯  <code>Java AOP</code>  框架一样，在运行时进行织入。</li>\n</ul>\n<p><code>Spring AOP</code>  包括以下类型的  <code>advice</code> 。</p>\n<ul>\n<li><code>Before advice</code> : 在连接点之前运行的 Advice ，但它不具备以下能力 阻止执行流进行到 join point 的能力（除非它抛出一个异常）。</li>\n<li><code>After returning advice</code> : 在一个连接点正常完成后运行的 Advice （例如，如果一个方法返回时没有抛出一个异常）。</li>\n<li><code>After (finally) advice</code> : 无论连接点以何种方式退出（正常或特殊返回），都要运行该 advice。</li>\n<li><code>Around advice</code> : 围绕一个连接点的 advice，如方法调用。这是最强大的一种 advice。Around advice 可以在方法调用之前和之后执行自定义行为。它还负责选择是否继续进行连接点或通过返回自己的返回值或抛出一个异常来缩短 advice 方法的执行。</li>\n</ul>\n<h2 id=\"使用spring的aop\"><a class=\"markdownIt-Anchor\" href=\"#使用spring的aop\">#</a> 使用 Spring 的 AOP</h2>\n<p>Spring 对 AOP 的实现包括以下 3 种方式：</p>\n<ul>\n<li><strong>第一种方式：Spring 框架结合 AspectJ 框架实现的 AOP，基于注解方式。</strong></li>\n<li><strong>第二种方式：Spring 框架结合 AspectJ 框架实现的 AOP，基于 XML 方式。</strong></li>\n<li>第三种方式：Spring 框架自己实现的 AOP，基于 XML 配置方式。</li>\n</ul>\n<p>使用  <code>AOP</code>  必须含有以下注解：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-aop<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-aspects<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"注解-2\"><a class=\"markdownIt-Anchor\" href=\"#注解-2\">#</a> 注解</h3>\n<p>使用注解的方式，必须要是有  <code>@Aspecj</code>  注解标注切面类。</p>\n<h4 id=\"开启aspectj的支持\"><a class=\"markdownIt-Anchor\" href=\"#开启aspectj的支持\">#</a> 开启 @AspectJ 的支持</h4>\n<h5 id=\"通过-xml-开启\"><a class=\"markdownIt-Anchor\" href=\"#通过-xml-开启\">#</a> 通过  <code>XML</code>  开启</h5>\n<p>使用  <code>aop</code>  命名空间开启开启  <code>@AspectJ</code>  的支持</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">beans</span> <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:xsi</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:context</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xmlns:aop</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class=\"hljs-tag\">       <span class=\"hljs-attr\">xsi:schemaLocation</span>=<span class=\"hljs-string\">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class=\"hljs-string\"><span class=\"hljs-tag\">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><br>    <span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t保证下面的约束存在</span><br><span class=\"hljs-comment\">\txmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class=\"hljs-comment\">\txsi:schemaLocation=&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>\t<span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t配置启用 @AspectJ 支持，当然如果你想约束aop的底层代理实现你也可以使用proxy-target-class属性</span><br><span class=\"hljs-comment\">\tproxy-target-class默认为false，代表使用cglib动态代理或jdk的动态代理</span><br><span class=\"hljs-comment\">\t将proxy-target-class设置为true，则代表强制使用cglib动态代理</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">aop:aspectj-autoproxy</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">beans</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"通过注解开启\"><a class=\"markdownIt-Anchor\" href=\"#通过注解开启\">#</a> 通过注解开启</h5>\n<p>在自定以的配置类中使用注解  <code>@EnableAspectJAutoProxy</code>  开启  <code>@AspectJ</code>  的支持：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@EnableAspectJAutoProxy</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyConfiguration</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"声明一个-aspect类\"><a class=\"markdownIt-Anchor\" href=\"#声明一个-aspect类\">#</a> 声明一个 Aspect 类</h4>\n<p>启用  <code>@AspectJ</code>  支持后，任何在你的  <code>application context</code>  中定义的  <code>bean</code>  ，其类是  <code>@AspectJ</code>  切面（有  <code>@Aspect</code>  注解），会被  <code>Spring</code>  自动检测到，并用于配置 <code>Spring AOP</code>  。接下来的两个例子展示了一个不怎么有用的切面所需的最小步骤。</p>\n<p>两个例子中的第一个显示了  <code>application context</code>  中的一个普通  <code>Bean</code>  定义，它指向一个用  <code>@Aspect</code>  注解的  <code>Bean</code>  类。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;myAspect&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.xyz.NotVeryUsefulAspect&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- configure properties of the aspect here --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>两个例子中的第二个展示了  <code>NotVeryUsefulAspect</code>  类的定义，它被  <code>@Aspect</code>  注解了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.xyz;<br><br><span class=\"hljs-keyword\">import</span> org.aspectj.lang.annotation.Aspect;<br><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NotVeryUsefulAspect</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"声明一个切点pointcut\"><a class=\"markdownIt-Anchor\" href=\"#声明一个切点pointcut\">#</a> 声明一个切点（Pointcut）</h4>\n<p><code>Pointcuts</code>  确定感兴趣的连接点（ <code>join points</code> ），从而使我们能够控制  <code>advice</code>  的运行时间。 <code>Spring AOP</code>  只支持  <code>Spring Bean</code>  的方法执行连接点，所以你可以把 <code>pointcut</code>  看作是对  <code>Spring Bean</code>  上的方法执行的匹配。一个切点声明有两个部分：一个由名称和任何参数组成的签名，以及一个切点表达式，它决定了我们到底对哪些方法的执行感兴趣。在  <code>AOP</code>  的  <code>@AspectJ</code>  注解式中，一个  <code>pointcut</code>  签名是由一个常规的方法定义提供的，而  <code>pointcut</code>  表达式是通过使用  <code>@Pointcut</code>  注解来表示的（作为 <code>pointcut</code>  签名的方法必须是一个  <code>void</code>  返回类型）。</p>\n<p>一个例子可以帮助我们清楚地了解切点签名和切点表达式之间的区别。下面的例子定义了一个名为  <code>anyOldTransfer</code>  的切点，它匹配任何名为  <code>transfer</code>  的方法的执行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Pointcut(&quot;execution(* transfer(..))&quot;)</span> <span class=\"hljs-comment\">// the pointcut expression</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">anyOldTransfer</span><span class=\"hljs-params\">()</span> &#123;&#125; <span class=\"hljs-comment\">// the pointcut signature</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"支持的-pointcut-指定器\"><a class=\"markdownIt-Anchor\" href=\"#支持的-pointcut-指定器\">#</a> 支持的  <code>Pointcut</code>  指定器</h5>\n<p><code>Spring AOP</code>  支持以下  <code>AspectJ</code>  的切点指定器（  <code>PCD</code>  ），用于切点表达式中。</p>\n<ul>\n<li><code>execution</code> : 用于匹配方法执行的连接点。这是在使用  <code>Spring AOP</code>  时要使用的主要切点指定器。</li>\n<li><code>within</code> : 将匹配限制在某些类型内的连接点（使用  <code>Spring AOP</code>  时，执行在匹配类型内声明的方法）。</li>\n<li><code>this</code> : 将匹配限制在连接点（使用  <code>Spring AOP</code>  时方法的执行），其中  <code>bean</code>  引用（  <code>Spring AOP</code>  代理）是给定类型的实例。</li>\n<li><code>target</code> : 将匹配限制在连接点（使用  <code>Spring AOP</code>  时方法的执行），其中目标对象（被代理的应用程序对象）是给定类型的实例。</li>\n<li><code>args</code> : 将匹配限制在连接点（使用  <code>Spring AOP</code>  时方法的执行），其中参数是给定类型的实例。</li>\n<li><code>@target</code> : 限制匹配到连接点（使用  <code>Spring AOP</code>  时方法的执行），其中执行对象的类有一个给定类型的注解。</li>\n<li><code>@args</code> : 将匹配限制在连接点（使用  <code>Spring AOP</code>  时方法的执行），其中实际传递的参数的运行时类型有给定类型的注解。</li>\n<li><code>@within</code> : 将匹配限制在具有给定注解的类型中的连接点（使用  <code>Spring AOP</code>  时，执行在具有给定注解的类型中声明的方法）。</li>\n<li><code>@annotation</code> : 将匹配限制在连接点的主体（  <code>Spring AOP</code>  中正在运行的方法）具有给定注解的连接点上。</li>\n</ul>\n<p>切点表达式用来定义通知（  <code>Advice</code>  ）往哪些方法上切入。</p>\n<h6 id=\"切点表达式\"><a class=\"markdownIt-Anchor\" href=\"#切点表达式\">#</a> 切点表达式</h6>\n<p>切入点表达式语法格式：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-function\"><span class=\"hljs-title\">execution</span><span class=\"hljs-params\">([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表)</span></span> <span class=\"hljs-selector-attr\">[异常]</span>)<br></code></pre></td></tr></table></figure>\n<p>访问控制权限修饰符：</p>\n<ul>\n<li>可选项。</li>\n<li>没写，就是 4 个权限都包括。</li>\n<li>写 public 就表示只包括公开的方法。</li>\n</ul>\n<p>返回值类型：</p>\n<ul>\n<li>必填项。</li>\n<li>* 表示返回值类型任意。</li>\n</ul>\n<p>全限定类名：</p>\n<ul>\n<li>可选项。</li>\n<li>两个点 “…” 代表当前包以及子包下的所有类。</li>\n<li>省略时表示所有的类。</li>\n</ul>\n<p>方法名：</p>\n<ul>\n<li>必填项。</li>\n<li>* 表示所有方法。</li>\n<li>set * 表示所有的 set 方法。</li>\n</ul>\n<p>形式参数列表：</p>\n<ul>\n<li>\n<p>必填项</p>\n</li>\n<li>\n<p>() 表示没有参数的方法</p>\n</li>\n<li>\n<p>(…) 参数类型和个数随意的方法</p>\n</li>\n<li>\n<p>(*) 只有一个参数的方法</p>\n</li>\n<li>\n<p>(*, String) 第一个参数类型随意，第二个参数是 String 的。</p>\n</li>\n</ul>\n<p>异常：</p>\n<ul>\n<li>可选项。</li>\n<li>省略时表示任意异常类型。</li>\n</ul>\n<h6 id=\"组合切点pointcut表达式\"><a class=\"markdownIt-Anchor\" href=\"#组合切点pointcut表达式\">#</a> 组合切点（Pointcut）表达式</h6>\n<p>你可以通过使用  <code>&amp;&amp;</code> 、 <code>||</code>  和  <code>!</code>  来组合  <code>pointcut</code>  表达式。你也可以通过名称来引用  <code>pointcut</code>  表达式。下面的例子显示了三个  <code>pointcut</code>  表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.xyz;<br><br><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Pointcuts</span> &#123;<br>    <span class=\"hljs-meta\">@Pointcut(&quot;execution(public * *(..))&quot;)</span> <span class=\"hljs-comment\">//1</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">publicMethod</span><span class=\"hljs-params\">()</span> &#123;&#125; <br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;within(com.xyz.trading..*)&quot;)</span> <span class=\"hljs-comment\">//2</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">inTrading</span><span class=\"hljs-params\">()</span> &#123;&#125; <br><br>    <span class=\"hljs-meta\">@Pointcut(&quot;publicMethod() &amp;&amp; inTrading()&quot;)</span> <span class=\"hljs-comment\">//3</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">tradingOperation</span><span class=\"hljs-params\">()</span> &#123;&#125; <br>&#125;<br></code></pre></td></tr></table></figure>\n<ol>\n<li>如果一个方法执行连接点代表任何  <code>public</code>  方法的执行，则  <code>publicMethod</code>  匹配。</li>\n<li><code>inTrading</code>  匹配一个方法的执行是否在  <code>trading</code>  模块中。</li>\n<li>如果一个方法的执行代表了  <code>trading</code>  模块中的任何  <code>public</code>  方法，则  <code>tradingOperation</code>  匹配</li>\n</ol>\n<p>如上所示，从较小的命名的切点程序中建立更复杂的切点程序表达式是一种最佳做法。当通过名称来引用点切时，正常的  <code>Java</code>  可见性规则适用（你可以看到同一类型中的  <code>private</code>  切点、层次结构中的  <code>protected</code>  切点、任何地方的  <code>public</code>  切点，等等）。可见性并不影响切点的匹配。</p>\n<h4 id=\"声明-advice\"><a class=\"markdownIt-Anchor\" href=\"#声明-advice\">#</a> 声明 Advice</h4>\n<p><code>Advice</code>  与一个切点表达式相关联，在切点匹配的方法执行之前、之后或周围（around）运行。切点表达式可以是一个内联切点，也可以是对一个 <a href=\"https://springdoc.cn/spring/core.html#aop-common-pointcuts\">命名切点</a> 的引用</p>\n<h5 id=\"before-advice\"><a class=\"markdownIt-Anchor\" href=\"#before-advice\">#</a> Before Advice</h5>\n<p>你可以通过使用  <code>@Before</code>  注解在一个切面中声明  <code>before advice</code> 。</p>\n<p>下面的例子使用了一个内联的切点表达式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeforeExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@Before(&quot;execution(* com.xyz.dao.*.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAccessCheck</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果我们使用一个 <a href=\"https://springdoc.cn/spring/core.html#aop-common-pointcuts\">命名的切点</a>，我们可以把前面的例子改写成如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeforeExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@Before(&quot;com.xyz.CommonPointcuts.dataAccessOperation()&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAccessCheck</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"after-returning-advice\"><a class=\"markdownIt-Anchor\" href=\"#after-returning-advice\">#</a> After Returning Advice</h5>\n<p>当一个匹配的方法执行正常返回时， <code>After returning advice</code>  运行。你可以通过使用  <code>@AfterReturning</code>  注解来声明它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AfterReturningExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@AfterReturning(&quot;execution(* com.xyz.dao.*.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAccessCheck</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>你可以有多个 advice 声明（也可以有其他成员），都在同一个切面。我们在这些例子中只展示了一个 advice 声明，以集中展示每个 advice 的效果。</p>\n</blockquote>\n<p>有时，你需要在  <code>advice body</code>  中访问被返回的实际值。你可以使用绑定返回值的  <code>@AfterReturning</code>  的形式来获得这种访问权，正如下面的例子所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AfterReturningExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@AfterReturning(</span><br><span class=\"hljs-meta\">        pointcut=&quot;execution(* com.xyz.dao.*.*(..))&quot;,</span><br><span class=\"hljs-meta\">        returning=&quot;retVal&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAccessCheck</span><span class=\"hljs-params\">(Object retVal)</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>returning</code>  属性中使用的名称必须与 advice 方法中的参数名称相对应。当一个方法执行返回时，返回值会作为相应的参数值传递给  <code>advice</code>  方法。 <code>returning</code>  子句也限制了匹配，只匹配那些返回指定类型的值的方法执行（在这种情况下是  <code>Object</code> ，它匹配任何返回值）。</p>\n<h5 id=\"after-throwing-advice\"><a class=\"markdownIt-Anchor\" href=\"#after-throwing-advice\">#</a> After Throwing Advice</h5>\n<p>当一个匹配的方法执行通过抛出异常退出时， <code>After throwing advice</code>  运行。你可以通过使用  <code>@AfterThrowing</code>  注解来声明它，如下例所示。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AfterThrowingExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@AfterThrowing(&quot;execution(* com.xyz.dao.*.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doRecoveryActions</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>通常情况下，你希望  <code>advice</code>  只在给定类型的异常被抛出时运行，而且你也经常需要在  <code>advice body</code>  中访问被抛出的异常。你可以使用  <code>throwing</code>  属性来限制匹配（如果需要的话 — 否则使用  <code>Throwable</code>  作为异常类型），并将抛出的异常绑定到  <code>advice</code>  参数上。下面的例子展示了如何做到这一点。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AfterThrowingExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@AfterThrowing(</span><br><span class=\"hljs-meta\">        pointcut=&quot;execution(* com.xyz.dao.*.*(..))&quot;,</span><br><span class=\"hljs-meta\">        throwing=&quot;ex&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doRecoveryActions</span><span class=\"hljs-params\">(DataAccessException ex)</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>在  <code>throwing</code>  属性中使用的名称必须与 advice 方法中的参数名称相对应。当一个方法的执行通过抛出一个异常退出时，该异常将作为相应的参数值传递给 advice 方法。 <code>throwing</code>  子句也限制了匹配，只能匹配那些抛出指定类型的异常的方法执行（本例中是  <code>DataAccessException</code> ）。</p>\n<blockquote>\n<p>注意， <code>@AfterThrowing</code>  并不表示一般的异常处理回调。具体来说， <code>@AfterThrowing advice</code>  方法只应该接收来自连接点（用户声明的目标方法）本身的异常，而不是来自附带的  <code>@After</code> / <code>@AfterReturning</code>  方法。</p>\n</blockquote>\n<h5 id=\"after-finally-advice\"><a class=\"markdownIt-Anchor\" href=\"#after-finally-advice\">#</a> After (Finally) Advice</h5>\n<p>当一个匹配的方法执行退出时，After (finally) advice 会运行。它是通过使用  <code>@After</code>  注解来声明的。After advice 必须准备好处理正常和异常的返回条件。它通常被用于释放资源和类似的目的。下面的例子展示了如何使用 After finally advice。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AfterFinallyExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@After(&quot;execution(* com.xyz.dao.*.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doReleaseLock</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>请注意， <code>AspectJ</code>  中的  <code>@After</code>   <code>advice</code>  被定义为 “after finally advice”，类似于  <code>try-catch</code>  语句中的  <code>finally</code>  块。它将对任何结果、正常返回或从连接点（用户声明的目标方法）抛出的异常进行调用，这与  <code>@AfterReturning</code>  不同，后者只适用于成功的正常返回。</p>\n</blockquote>\n<h5 id=\"around-advice\"><a class=\"markdownIt-Anchor\" href=\"#around-advice\">#</a> Around Advice</h5>\n<p>最后一种  <code>Advice</code>  是  <code>Around Advice</code> 。 “围绕” 一个匹配的方法的执行而运行。它有机会在方法运行之前和之后进行工作，并决定何时、如何、甚至是否真正运行该方法。如果你需要以线程安全的方式分享方法执行前后的状态，例如启动和停止一个定时器，那么  <code>Around advice</code>  经常被使用。</p>\n<blockquote>\n<p>始终使用符合你要求的最不强大的  <code>advice</code>  形式。例如，如果  <code>before advice</code>  足以满足你的需要，就不要使用  <code>around advice</code> 。</p>\n</blockquote>\n<p><code>Around advice</code>  是通过用  <code>@Around</code>  注解来声明一个方法的。该方法应该声明  <code>Object</code>  为其返回类型，并且该方法的第一个参数必须是  <code>ProceedingJoinPoint</code>  类型。在 advice 方法的 body 中，你必须在  <code>ProceedingJoinPoint</code>  上调用  <code>proceed()</code> ，以使底层方法运行。在没有参数的情况下调用  <code>proceed()</code>  将导致调用者的原始参数在底层方法被调用时被提供给它。对于高级用例，有一个重载的  <code>proceed()</code>  方法，它接受一个参数数组（ <code>Object[]</code> ）。当底层方法被调用时，数组中的值将被用作该方法的参数。</p>\n<p><code>around advice</code>  返回的值是方法的调用者看到的返回值。例如，一个简单的缓存切面可以从缓存中返回一个值（如果有的话），或者调用  <code>proceed()</code>  （并返回该值），如果没有的话。请注意，  <code>proceed</code>  可以被调用一次，多次，或者根本就不在  <code>around advice</code>  的  <code>body</code>  中调用。所有这些都是合法的。</p>\n<blockquote>\n<p>如果你将  <code>around advice</code>  方法的返回类型声明为  <code>void</code> ，那么将总是返回给调用者  <code>null</code> ，有效地忽略了任何调用  <code>proceed()</code>  的结果。因此，我们建议  <code>around advice</code>  方法声明一个  <code>Object</code>  的返回类型。该  <code>advice</code>  方法通常应该返回调用  <code>proceed()</code>  所返回的值，即使底层方法的返回类型为  <code>void</code> 。然而， <code>advice</code>  可以根据使用情况选择性地返回一个缓存的值、一个封装的值或一些其他的值。</p>\n</blockquote>\n<p>下面的例子显示了如何使用  <code>around advice</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Aspect</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AroundExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@Around(&quot;execution(* com.xyz..service.*.*(..))&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title function_\">doBasicProfiling</span><span class=\"hljs-params\">(ProceedingJoinPoint pjp)</span> <span class=\"hljs-keyword\">throws</span> Throwable &#123;<br>        <span class=\"hljs-comment\">// start stopwatch</span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">retVal</span> <span class=\"hljs-operator\">=</span> pjp.proceed();<br>        <span class=\"hljs-comment\">// stop stopwatch</span><br>        <span class=\"hljs-keyword\">return</span> retVal;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"advice-参数\"><a class=\"markdownIt-Anchor\" href=\"#advice-参数\">#</a> Advice 参数</h5>\n<p><code>Spring</code>  提供了完全类型化的  <code>advice</code>  ，这意味着你可以在  <code>advice</code>  签名中声明你需要的参数（就像我们在前面看到的返回和抛出的例子一样），而不是一直用  <code>Object[]</code>  数组工作。我们将在本节后面看到如何使参数和其他上下文值对  <code>advice</code>  主体可用。首先，我们看一下如何编写通用  <code>advice</code>  ，它可以找出  <code>advice</code>  当前所  <code>advice</code>  的方法。</p>\n<h6 id=\"访问当前的-joinpoint\"><a class=\"markdownIt-Anchor\" href=\"#访问当前的-joinpoint\">#</a> 访问当前的  <code>JoinPoint</code></h6>\n<p>任何  <code>advice method</code>  都可以声明一个  <code>org.aspectj.lang.JoinPoint</code>  类型的参数作为其第一个参数。请注意， <code>around advice</code>  方法需要声明一个  <code>ProceedingJoinPoint</code>  类型的第一个参数，它是  <code>JoinPoint</code>  的一个子类。</p>\n<p><code>JoinPoint</code>  接口提供了许多有用的方法。</p>\n<ul>\n<li><code>getArgs()</code> : 返回方法的参数。</li>\n<li><code>getThis()</code> : 返回代理对象。</li>\n<li><code>getTarget()</code> : 返回目标对象。</li>\n<li><code>getSignature()</code> : 返回正在被  <code>advice</code>  的方法的描述。</li>\n<li><code>toString()</code> : 打印对所  <code>advice</code>  的方法的有用描述。</li>\n</ul>\n<h6 id=\"向-advice-传递参数\"><a class=\"markdownIt-Anchor\" href=\"#向-advice-传递参数\">#</a> 向 Advice 传递参数</h6>\n<p>我们已经看到了如何绑定返回值或异常值（使用  <code>after returning</code>  和  <code>after throwing advice</code>  ）。为了使参数值对  <code>advice body</code>  可用，你可以使用  <code>args</code>  的绑定形式。如果你在  <code>args</code>  表达式中使用参数名来代替类型名，那么当  <code>advice</code>  被调用时，相应参数的值将作为参数值被传递。一个例子可以让我们更清楚地了解这一点。假设你想  <code>advice</code>  执行以一个  <code>Account</code>  对象为第一参数的 DAO 操作，并且你需要在  <code>advice body</code>  中访问该  <code>account</code>  。你可以写如下内容。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Before(&quot;execution(* com.xyz.dao.*.*(..)) &amp;&amp; args(account,..)&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">validateAccount</span><span class=\"hljs-params\">(Account account)</span> &#123;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>pointcut</code>  表达式的  <code>args(account,..)</code>  部分有两个作用。首先，它将匹配限制在方法的执行上，即方法至少需要一个参数，并且传递给该参数的参数是一个  <code>Account</code>  的实例。其次，它使实际的  <code>Account</code>  对象通过  <code>account</code>  参数对  <code>advice</code>  可用。</p>\n<p>另一种写法是声明一个 pointcut，当它与一个连接点匹配时 “提供”  <code>Account</code>  对象的值，然后从 advice 中引用命名的 pointcut。这看起来就像这样。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Pointcut(&quot;execution(* com.xyz.dao.*.*(..)) &amp;&amp; args(account,..)&quot;)</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">accountDataAccessOperation</span><span class=\"hljs-params\">(Account account)</span> &#123;&#125;<br><br><span class=\"hljs-meta\">@Before(&quot;accountDataAccessOperation(account)&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">validateAccount</span><span class=\"hljs-params\">(Account account)</span> &#123;<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>更多细节请参见 AspectJ 编程指南。</p>\n<p>代理对象（ <code>this</code> ）、目标对象（ <code>target</code> ）和注解（ <code>@within</code> 、 <code>@target</code> 、 <code>@annotation</code>  和  <code>@args</code> ）都可以用类似的方式绑定。接下来的一组例子展示了如何匹配执行带有  <code>@Auditable</code>  注解的方法，并提取审计代码。</p>\n<p>下面是  <code>@Auditable</code>  注解的定义。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Retention(RetentionPolicy.RUNTIME)</span><br><span class=\"hljs-meta\">@Target(ElementType.METHOD)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@interface</span> Auditable &#123;<br>    AuditCode <span class=\"hljs-title function_\">value</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>下面显示了与  <code>@Auditable</code>  方法的执行相匹配的 advice。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Before(&quot;com.xyz.Pointcuts.publicMethod() &amp;&amp; @annotation(auditable)&quot;)</span> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">audit</span><span class=\"hljs-params\">(Auditable auditable)</span> &#123;<br>    <span class=\"hljs-type\">AuditCode</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> auditable.value();<br>    <span class=\"hljs-comment\">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>引用 “<a href=\"https://springdoc.cn/spring/core.html#aop-pointcuts-combining\">组合切点（Pointcut）表达式</a>” 中定义的  <code>publicMethod</code>  命名的  <code>pointcut</code> 。</p>\n</blockquote>\n<h6 id=\"advice-参数和泛型\"><a class=\"markdownIt-Anchor\" href=\"#advice-参数和泛型\">#</a> Advice 参数和泛型</h6>\n<p>Spring AOP 可以处理类声明和方法参数中使用的泛型。假设你有一个像下面这样的泛型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Sample</span>&lt;T&gt; &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sampleGenericMethod</span><span class=\"hljs-params\">(T param)</span>;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">sampleGenericCollectionMethod</span><span class=\"hljs-params\">(Collection&lt;T&gt; param)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>你可以将方法类型的拦截限制在某些参数类型上，办法是将 advice 参数与你想拦截方法的参数类型联系起来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Before(&quot;execution(* ..Sample+.sampleGenericMethod(*)) &amp;&amp; args(param)&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeSampleMethod</span><span class=\"hljs-params\">(MyType param)</span> &#123;<br>    <span class=\"hljs-comment\">// Advice implementation</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>这种方法对泛型集合不起作用。所以你不能像下面这样定义一个 pointcut。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Before(&quot;execution(* ..Sample+.sampleGenericCollectionMethod(*)) &amp;&amp; args(param)&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeSampleMethod</span><span class=\"hljs-params\">(Collection&lt;MyType&gt; param)</span> &#123;<br>    <span class=\"hljs-comment\">// Advice implementation</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>为了实现这一点，我们必须检查集合中的每一个元素，这是不太合理的，因为我们也无法决定如何处理一般的  <code>null</code> 。为了实现与此类似的东西，你必须将参数输入到  <code>Collection&lt;?&gt;</code>  中，并手动检查元素的类型。</p>\n<h6 id=\"确定参数名称\"><a class=\"markdownIt-Anchor\" href=\"#确定参数名称\">#</a> 确定参数名称</h6>\n<p><code>advice</code>  调用中的参数绑定依赖于将在切点表达式中使用的名称与 advice 和切点方法签名中声明的参数名称相匹配。</p>\n<p><code>Spring AOP</code>  使用以下  <code>ParameterNameDiscoverer</code>  实现来确定参数名称。每个 discoverers 将有机会发现参数名称，第一个成功的发现者获胜。如果没有一个注册的 discoverers 能确定参数名称，那么将抛出一个异常。</p>\n<ul>\n<li>\n<p><code>AspectJAnnotationParameterNameDiscoverer</code></p>\n<p>使用用户通过相应的 advice 或指向性注解中的  <code>argNames</code>  属性明确指定的参数名称。详见 <a href=\"https://springdoc.cn/spring/core.html#aop-ataspectj-advice-params-names-explicit\">明确的参数名称</a>。</p>\n</li>\n<li>\n<p><code>KotlinReflectionParameterNameDiscoverer</code></p>\n<p>使用  <code>Kotlin</code>  反射 API 来确定参数名称。只有在 classpath 上存在这种 API 时，才会使用这个 discoverer。</p>\n</li>\n<li>\n<p><code>StandardReflectionParameterNameDiscoverer</code></p>\n<p>使用标准的  <code>java.lang.reflect.Parameter</code>  API 来确定参数名称。需要用  <code>javac</code>  的  <code>-parameters</code>  标志来编译代码。建议在 Java 8 + 上采用这种方法。</p>\n</li>\n<li>\n<p><code>LocalVariableTableParameterNameDiscoverer</code></p>\n<p>分析 advice 类的字节码中可用的局部变量表，从 debug 信息中确定参数名称。需要用 debug 参数（至少是  <code>-g:vars</code> ）编译代码。从 Spring Framework 6.0 开始被弃用，在 Spring Framework 6.1 中被移除，以支持用  <code>-parameters</code>  编译代码。在 GraalVM 原生镜像中不支持。</p>\n</li>\n<li>\n<p><code>AspectJAdviceParameterNameDiscoverer</code></p>\n<p>从  <code>pointcut</code>  表达式、 <code>returning</code> , 和  <code>throwing</code>  子句中推导出参数名称。关于所用算法的细节，请参见 <a href=\"https://docs.spring.io/spring-framework/docs/6.0.8-SNAPSHOT/javadoc-api/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.html\">javadoc</a>。</p>\n</li>\n</ul>\n<h6 id=\"明确的参数名称\"><a class=\"markdownIt-Anchor\" href=\"#明确的参数名称\">#</a> 明确的参数名称</h6>\n<p><code>@AspectJ</code>  advice 和 pointcut 注解有一个可选的  <code>argNames</code>  属性，你可以用它来指定被注解方法的参数名称。</p>\n<blockquote>\n<p>如果一个 @AspectJ 切面已经被 AspectJ 编译器（ <code>ajc</code> ）编译，即使没有 debug 信息，你也不需要添加  <code>argNames</code>  属性，因为编译器会保留需要的信息。同样地，如果一个 @AspectJ 切面已经用  <code>javac</code>  的  <code>-parameters</code>  标志进行了编译，你就不需要添加  <code>argNames</code>  属性，因为编译器会保留所需的信息。</p>\n</blockquote>\n<p>下面的例子显示了如何使用  <code>argNames</code>  属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Before(</span><br><span class=\"hljs-meta\">    value = &quot;com.xyz.Pointcuts.publicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)&quot;, </span><br><span class=\"hljs-meta\">    argNames = &quot;bean,auditable&quot;)</span> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">audit</span><span class=\"hljs-params\">(Object bean, Auditable auditable)</span> &#123;<br>    <span class=\"hljs-type\">AuditCode</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> auditable.value();<br>    <span class=\"hljs-comment\">// ... use code and bean</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>引用 “<a href=\"https://springdoc.cn/spring/core.html#aop-pointcuts-combining\">组合切点（Pointcut）表达式</a>” 中定义的  <code>publicMethod</code>  命名的 pointcut。声明  <code>bean</code>  和  <code>auditable</code>  为参数名。</p>\n</blockquote>\n<p>如果第一个参数是  <code>JoinPoint</code> 、 <code>ProceedingJoinPoint</code>  或  <code>JoinPoint.StaticPart</code>  类型，你可以在  <code>argNames</code>  属性的值中省略参数的名称。例如，如果你修改前面的 advice 来接收连接点（join point）对象， <code>argNames</code>  属性不需要包括它。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Before(</span><br><span class=\"hljs-meta\">    value = &quot;com.xyz.Pointcuts.publicMethod() &amp;&amp; target(bean) &amp;&amp; @annotation(auditable)&quot;, </span><br><span class=\"hljs-meta\">    argNames = &quot;bean,auditable&quot;)</span> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">audit</span><span class=\"hljs-params\">(JoinPoint jp, Object bean, Auditable auditable)</span> &#123;<br>    <span class=\"hljs-type\">AuditCode</span> <span class=\"hljs-variable\">code</span> <span class=\"hljs-operator\">=</span> auditable.value();<br>    <span class=\"hljs-comment\">// ... use code, bean, and jp</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>引用 “<a href=\"https://springdoc.cn/spring/core.html#aop-pointcuts-combining\">组合切点（Pointcut）表达式</a>” 中定义的  <code>publicMethod</code>  命名的 pointcut。声明  <code>bean</code>  和  <code>auditable</code>  为参数名。</p>\n</blockquote>\n<p>给予  <code>JoinPoint</code> 、 <code>ProceedingJoinPoint</code>  或  <code>JoinPoint.StaticPart</code>  类型的第一个参数的特殊处理，对于不收集任何其他连接点上下文的 advice 方法特别方便。在这种情况下，你可以省略  <code>argNames</code>  属性。例如，下面的 advice 不需要声明  <code>argNames</code>  属性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Before(&quot;com.xyz.Pointcuts.publicMethod()&quot;)</span> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">audit</span><span class=\"hljs-params\">(JoinPoint jp)</span> &#123;<br>    <span class=\"hljs-comment\">// ... use jp</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>引用 “<a href=\"https://springdoc.cn/spring/core.html#aop-pointcuts-combining\">组合切点（Pointcut）表达式</a>” 中定义的  <code>publicMethod</code>  命名的 pointcut。</p>\n</blockquote>\n<h1 id=\"事务\"><a class=\"markdownIt-Anchor\" href=\"#事务\">#</a> 事务</h1>\n<h2 id=\"事务概述\"><a class=\"markdownIt-Anchor\" href=\"#事务概述\">#</a> 事务概述</h2>\n<p>在一个业务流程当中，通常需要多条  <code>DML</code>  语句共同联合才能完成，这多条  <code>DML</code>  语句必须同时成功，或者同时失败，这样才能保证数据的安全。</p>\n<p>事务的四个处理过程：</p>\n<ol>\n<li>开启事务 ( <code>start transaction</code> )</li>\n<li>执行核心业务代码</li>\n<li>提交事务（如果核心业务处理过程中没有出现异常）( <code>commit transaction</code> )</li>\n<li>回滚事务（如果核心业务处理过程中出现异常）( <code>rollback transaction</code> )</li>\n</ol>\n<h2 id=\"spring对事务的支持\"><a class=\"markdownIt-Anchor\" href=\"#spring对事务的支持\">#</a> Spring 对事务的支持</h2>\n<ul>\n<li>\n<p>编程式事务</p>\n<ul>\n<li>通过编写代码的方式来实现事务的管理。</li>\n</ul>\n</li>\n<li>\n<p>声明式事务</p>\n<ul>\n<li>\n<p>基于注解方式</p>\n</li>\n<li>\n<p>基于 XML 配置方式</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><code>Spring</code>   专门针对事务开发了一套  <code>API</code> ， <code>API</code>  的核心接口如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">PlatformTransactionManager</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">TransactionManager</span> &#123;<br><br>    TransactionStatus <span class=\"hljs-title function_\">getTransaction</span><span class=\"hljs-params\">(TransactionDefinition definition)</span> <span class=\"hljs-keyword\">throws</span> TransactionException;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">commit</span><span class=\"hljs-params\">(TransactionStatus status)</span> <span class=\"hljs-keyword\">throws</span> TransactionException;<br><br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">rollback</span><span class=\"hljs-params\">(TransactionStatus status)</span> <span class=\"hljs-keyword\">throws</span> TransactionException;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><code>PlatformTransactionManager</code>  接口： <code>spring</code>   事务管理器的核心接口。在 ** <code>Spring6</code> ** 中它有两个实现：</p>\n<ul>\n<li><code>DataSourceTransactionManager</code> ：支持 <code>JdbcTemplate</code> 、 <code>MyBatis</code> 、 <code>Hibernate</code>  等事务管理。</li>\n<li><code>JtaTransactionManager</code> ：支持分布式事务管理。</li>\n</ul>\n<h2 id=\"声明式事务\"><a class=\"markdownIt-Anchor\" href=\"#声明式事务\">#</a> 声明式事务</h2>\n<p><code>Spring</code>  框架的声明式事务管理是通过  <code>Spring</code>  面向切面编程（ <code>AOP</code> ）实现的。然而，由于事务方面的代码是随  <code>Spring</code>  框架的发布而来，并且可以以模板的方式使用，所以一般不需要理解  <code>AOP</code>  的概念来有效地使用这些代码。</p>\n<h3 id=\"注解实现\"><a class=\"markdownIt-Anchor\" href=\"#注解实现\">#</a> 注解实现</h3>\n<p>使用注解  <code>@Transactional</code>  注解方法或者类，则可以为方法添加事务管理。</p>\n<h4 id=\"xml配置\"><a class=\"markdownIt-Anchor\" href=\"#xml配置\">#</a> xml 配置</h4>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--配置数据源--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--通过数据源配置DataSourceTransactionManager--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--对指定事务管理器开启声明式事务注解--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:annotation-driven</span> <span class=\"hljs-attr\">transaction-manager</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"配置类配置\"><a class=\"markdownIt-Anchor\" href=\"#配置类配置\">#</a> 配置类配置</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Configuration</span><br><span class=\"hljs-meta\">@ComponentScan(</span><br><span class=\"hljs-meta\">        basePackages = &#123;&quot;com.jhy.bank&quot;&#125;,</span><br><span class=\"hljs-meta\">        excludeFilters = &#123;</span><br><span class=\"hljs-meta\">            @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = &#123;Data.class&#125;)</span><br><span class=\"hljs-meta\">        &#125;</span><br><span class=\"hljs-meta\">)</span><br><span class=\"hljs-meta\">@PropertySource(&quot;jdbc.properties&quot;)</span><br><span class=\"hljs-meta\">@EnableTransactionManagement</span> <span class=\"hljs-comment\">//开启声明式事务</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyConfiguration</span> &#123;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String driver;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String url;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-meta\">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String password;<br>\t<br>    <span class=\"hljs-comment\">//配置数据源</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DruidDataSource <span class=\"hljs-title function_\">dataSource</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">DruidDataSource</span> <span class=\"hljs-variable\">druidDataSource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DruidDataSource</span>();<br>        druidDataSource.setUrl(url);<br>        druidDataSource.setDriverClassName(driver);<br>        druidDataSource.setUsername(username);<br>        druidDataSource.setPassword(password);<br>        <span class=\"hljs-keyword\">return</span> druidDataSource;<br>    &#125;<br>\t<br>\t<span class=\"hljs-comment\">//通过数据源配置DataSourceTransactionManager</span><br>    <span class=\"hljs-meta\">@Bean</span><br>    <span class=\"hljs-keyword\">public</span> DataSourceTransactionManager <span class=\"hljs-title function_\">transactionManager</span><span class=\"hljs-params\">(DataSource dataSource)</span>&#123;<br>        <span class=\"hljs-type\">DataSourceTransactionManager</span> <span class=\"hljs-variable\">dataSourceTransactionManager</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DataSourceTransactionManager</span>();<br>        dataSourceTransactionManager.setDataSource(dataSource);<br>        <span class=\"hljs-keyword\">return</span> dataSourceTransactionManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>然后就可以使用注解  <code>@Transactional</code>  开启声明式事务</p>\n</blockquote>\n<h4 id=\"transactional设置\"><a class=\"markdownIt-Anchor\" href=\"#transactional设置\">#</a> @Transactional 设置</h4>\n<p>默认的  <code>@Transactional</code>  设置如下：</p>\n<ul>\n<li><code>propagation</code>  （传播）设置为  <code>PROPAGATION_REQUIRED</code> 。</li>\n<li>隔离级别是  <code>ISOLATION_DEFAULT</code> 。</li>\n<li>事务是读写的。</li>\n<li>事务超时默认为底层事务系统的默认超时，如果不支持超时，则默认为无。</li>\n<li>任何  <code>RuntimeException</code>  或  <code>Error</code>  都会触发回滚，而任何被检查的  <code>Exception</code>  则不会。</li>\n</ul>\n<p>你可以改变这些默认设置。下表总结了  <code>@Transactional</code>  注解的各种属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://springdoc.cn/spring/data-access.html#tx-multiple-tx-mgrs-with-attransactional\">value</a></td>\n<td style=\"text-align:left\"><code>String</code></td>\n<td style=\"text-align:left\">可选的  <code>qualifier</code> ，指定要使用的事务管理器。</td>\n</tr>\n<tr>\n<td><code>transactionManager</code></td>\n<td style=\"text-align:left\"><code>String</code></td>\n<td style=\"text-align:left\"><code>value</code>  别名。</td>\n</tr>\n<tr>\n<td><code>label</code></td>\n<td style=\"text-align:left\"><code>String</code>  标签数组，用于为事务添加表达式描述。</td>\n<td style=\"text-align:left\">标签可以由事务管理器评估，以便将特定于实现的行为与实际事务联系起来。</td>\n</tr>\n<tr>\n<td>[propagation](# 事务传播（Propagation）)</td>\n<td style=\"text-align:left\"><code>enum</code> :  <code>Propagation</code></td>\n<td style=\"text-align:left\">可选的  <code>propagation</code>  （传播）设置。</td>\n</tr>\n<tr>\n<td><a href=\"#%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%EF%BC%88Isolation%EF%BC%89\">isolation</a></td>\n<td style=\"text-align:left\"><code>enum</code> :  <code>Isolation</code></td>\n<td style=\"text-align:left\">可选的隔离级别。仅适用于  <code>REQUIRED</code>  或  <code>REQUIRES_NEW</code>  的传播值。</td>\n</tr>\n<tr>\n<td><a href=\"#%E4%BA%8B%E5%8A%A1%E8%B6%85%E6%97%B6%EF%BC%88timeout%EF%BC%89\">timeout</a></td>\n<td style=\"text-align:left\"><code>int</code>  (以秒为单位的粒度)</td>\n<td style=\"text-align:left\">可选的事务超时。仅适用于  <code>REQUIRED</code>  或  <code>REQUIRES_NEW</code>  的传播值。</td>\n</tr>\n<tr>\n<td><code>timeoutString</code></td>\n<td style=\"text-align:left\"><code>String</code>  (以秒为单位的粒度)</td>\n<td style=\"text-align:left\">用于指定以秒为单位的  <code>timeout</code> ，作为  <code>String</code>  值的替代方案，例如，作为占位符。</td>\n</tr>\n<tr>\n<td><a href=\"#%E5%8F%AA%E8%AF%BB%E4%BA%8B%E5%8A%A1%EF%BC%88readOnly%EF%BC%89\">readOnly</a></td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">读写事务与只读事务。只适用于  <code>REQUIRED</code>  或  <code>REQUIRES_NEW</code>  的值。</td>\n</tr>\n<tr>\n<td><a href=\"#%E5%BC%82%E5%B8%B8%E5%9B%9E%E6%BB%9A%EF%BC%88rollbackFor%EF%BC%89\">rollbackFor</a></td>\n<td style=\"text-align:left\"><code>Class</code>  对象的数组，必须从  <code>Throwable</code>  派生。</td>\n<td style=\"text-align:left\">可选的必然会引起回滚的异常类型数组</td>\n</tr>\n<tr>\n<td><code>rollbackForClassName</code></td>\n<td style=\"text-align:left\">异常名称模式（pattern）的数组。</td>\n<td style=\"text-align:left\">可选的必然会引起回滚异常名称模式（ <code>patterns</code> ）数组。</td>\n</tr>\n<tr>\n<td><a href=\"#%E5%BC%82%E5%B8%B8%E4%B8%8D%E5%9B%9E%E6%BB%9A%EF%BC%88rollbackFor\">noRollbackFor</a></td>\n<td style=\"text-align:left\">必须从  <code>Throwable</code>  派生的  <code>Class</code>  对象的数组。</td>\n<td style=\"text-align:left\">可选的不会引起回滚的  <code>exception</code>  类型数组</td>\n</tr>\n<tr>\n<td><code>noRollbackForClassName</code></td>\n<td style=\"text-align:left\">异常名称模式（pattern）的数组。</td>\n<td style=\"text-align:left\">可选的不会引起回滚异常名称模式（ <code>patterns</code> ）数组。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"事务传播propagation\"><a class=\"markdownIt-Anchor\" href=\"#事务传播propagation\">#</a> 事务传播（Propagation）</h5>\n<p>一共有七种传播行为：</p>\n<ul>\n<li>REQUIRED：支持当前事务，如果不存在当前事务就新建一个 (默认)<strong>【没有就新建，有就加入】</strong></li>\n<li>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行 **【有就加入，没有就不管了】**</li>\n<li>MANDATORY：必须运行在一个事务中，如果当前没有事务，就会抛出一个异常 **【有就加入，没有就抛异常】**</li>\n<li>REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起 **【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】**</li>\n<li>NOT_SUPPORTED：以非事务方式运行，如果当前有事务存在，则挂起当前事务 **【不支持事务，存在就挂起】**</li>\n<li>NEVER：以非事务方式运行，如果有一个事务存在，抛出异常 **【不支持事务，存在就抛异常】**</li>\n<li>NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像 REQUIRED 一样。<strong>【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和 REQUIRED 一样。】</strong></li>\n</ul>\n<h5 id=\"事务隔离级别isolation\"><a class=\"markdownIt-Anchor\" href=\"#事务隔离级别isolation\">#</a> 事务隔离级别（Isolation）</h5>\n<p>数据库中读取数据存在的三大问题：（三大读问题）</p>\n<ul>\n<li><strong>脏读：读取到没有提交到数据库的数据，叫做脏读。</strong>\n<ul>\n<li><code>a</code>  先进来修改了数据但未提交，此时切换至 <code>b</code> ， <code>b</code>  读取该数据，此后切换至 <code>a</code>  提交</li>\n</ul>\n</li>\n<li><strong>不可重复读：在同一个事务当中，第一次和第二次读取的数据不一样。</strong>\n<ul>\n<li><code>a</code>  先进来读取了数据，然后切换至 <code>b</code>  修改了数据并进行提交，此后切换至 <code>a</code>  重新读取了数据</li>\n</ul>\n</li>\n<li><strong>幻读：读到的数据是假的。</strong>\n<ul>\n<li><code>a</code>  先进来但未开始读取数据，然后切换至 <code>b</code>  修改了数据并提交，此后切换至 <code>a</code>  开始读取数据</li>\n</ul>\n</li>\n</ul>\n<p>事务隔离级别包括四个级别，分别解决上述问题：</p>\n<ul>\n<li>\n<p>读未提交： <code>READ_UNCOMMITTED</code></p>\n<ul>\n<li>这种隔离级别，存在脏读问题，所谓的脏读 (dirty read) 表示能够读取到其它事务未提交的数据。</li>\n</ul>\n</li>\n<li>\n<p>读提交： <code>READ_COMMITTED</code></p>\n<ul>\n<li>解决了脏读问题，其它事务提交之后才能读到，但存在不可重复读问题。</li>\n</ul>\n</li>\n<li>\n<p>可重复读： <code>REPEATABLE_READ</code></p>\n<ul>\n<li>解决了不可重复读，可以达到可重复读效果，只要当前事务不结束，读取到的数据一直都是一样的。但存在幻读问题。</li>\n</ul>\n</li>\n<li>\n<p>序列化： <code>SERIALIZABLE</code></p>\n<ul>\n<li>解决了幻读问题，事务排队执行。不支持并发。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>隔离级别</strong></th>\n<th><strong>脏读</strong></th>\n<th><strong>不可重复读</strong></th>\n<th><strong>幻读</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>读未提交</td>\n<td><strong>有</strong></td>\n<td><strong>有</strong></td>\n<td><strong>有</strong></td>\n</tr>\n<tr>\n<td>读提交</td>\n<td>无</td>\n<td><strong>有</strong></td>\n<td><strong>有</strong></td>\n</tr>\n<tr>\n<td>可重复读</td>\n<td>无</td>\n<td>无</td>\n<td><strong>有</strong></td>\n</tr>\n<tr>\n<td>序列化</td>\n<td>无</td>\n<td>无</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>在  <code>Spring</code>  中事务隔离有 <strong>5</strong> 种情况：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Isolation</span> &#123;<br>\t<span class=\"hljs-comment\">//默认，数据库未Mysql则为可重复读，Oracle则为读未提交</span><br>\tDEFAULT(TransactionDefinition.ISOLATION_DEFAULT),<br>\t<span class=\"hljs-comment\">//读未提交</span><br>\tREAD_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),<br>\t<span class=\"hljs-comment\">//读可提交</span><br>\tREAD_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),<br>\t<span class=\"hljs-comment\">//可重复度</span><br>\tREPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),<br>\t<span class=\"hljs-comment\">//序列化</span><br>\tSERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);<br></code></pre></td></tr></table></figure>\n<h5 id=\"事务超时timeout\"><a class=\"markdownIt-Anchor\" href=\"#事务超时timeout\">#</a> 事务超时（timeout）</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional(timeout = 10)</span><br></code></pre></td></tr></table></figure>\n<p>以秒为单位，如果<strong>指定时间</strong>内  <code>DML</code>  语句还未执行完成 <strong>最终结果会选择回滚。</strong>，那么则会抛出错误。默认值 - 1，表示没有时间限制。</p>\n<blockquote>\n<p>指定时间：指的是从最后一条事务语句结束之前的时间，在这后的时间都不算</p>\n</blockquote>\n<h5 id=\"只读事务readonly\"><a class=\"markdownIt-Anchor\" href=\"#只读事务readonly\">#</a> 只读事务（readOnly）</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional(readOnly = true)</span><br></code></pre></td></tr></table></figure>\n<p>将当前事务设置为只读事务，在该事务执行过程中只允许  <code>select</code>  语句执行，其余的  <code>DML</code>  语句均不会允许执行。</p>\n<h5 id=\"异常回滚rollbackfor\"><a class=\"markdownIt-Anchor\" href=\"#异常回滚rollbackfor\">#</a> 异常回滚（rollbackFor）</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional(rollbackFor = RuntimeException.class)</span><br></code></pre></td></tr></table></figure>\n<p>设置发生了哪些异常才会回滚</p>\n<h5 id=\"异常不回滚rollbackfor\"><a class=\"markdownIt-Anchor\" href=\"#异常不回滚rollbackfor\">#</a> 异常不回滚（rollbackFor）</h5>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Transactional(noRollbackFor = NullPointerException.class)</span><br></code></pre></td></tr></table></figure>\n<p>设置发生哪些异常不会回滚</p>\n<h1 id=\"测试\"><a class=\"markdownIt-Anchor\" href=\"#测试\">#</a> 测试</h1>\n<p><code>Spring</code>  提供了一套  <code>API</code>  对  <code>junit</code>  进行了整合</p>\n<h2 id=\"spring对junit4的支持\"><a class=\"markdownIt-Anchor\" href=\"#spring对junit4的支持\">#</a> Spring 对 JUnit4 的支持</h2>\n<p>首先需要以下的依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--Spring整合JUnit的依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--junit4依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.13.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"hljs-meta\">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span> <span class=\"hljs-comment\">//@ContextConfiguration(classes = MyConfiguration.class) 配置类的形式</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringJUnit4Test</span> &#123;<br>    <br>  \t<span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> User user;    <br>    <br>   <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFoo</span><span class=\"hljs-params\">()</span>&#123;<br>        ......<br>    &#125;<br> .....<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"spring对junit5的支持\"><a class=\"markdownIt-Anchor\" href=\"#spring对junit5的支持\">#</a> Spring 对 JUnit5 的支持</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--Spring整合JUnit的依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--junit5依赖--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.junit.jupiter<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit-jupiter-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.10.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ExtendWith(SpringExtension.class)</span><br><span class=\"hljs-meta\">@ContextConfiguration(&quot;classpath:spring.xml&quot;)</span> <span class=\"hljs-comment\">//@ContextConfiguration(classes = MyConfiguration.class) 配置类的形式</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SpringJUnit4Test</span> &#123;<br>    <br>  \t<span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> User user;<br>    <br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testFoo</span><span class=\"hljs-params\">()</span>&#123;<br>        ......<br>    &#125;<br> .....<br>&#125;<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>现在你不需要像以前那样获取  <code>IoC</code>  容器之后再获取  <code>bean</code>  ，而是可以通过自动装配的方式来获取  <code>bean</code></p>\n</blockquote>\n<h1 id=\"整合mybtias\"><a class=\"markdownIt-Anchor\" href=\"#整合mybtias\">#</a> 整合 Mybtias</h1>\n<p>将步骤分为 <strong>11</strong> 步：</p>\n<ol>\n<li>导入依赖</li>\n<li>编写三层架构</li>\n<li>创建  <code>pojo</code></li>\n<li><a href=\"#%E7%BC%96%E5%86%99Mybatis%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">编写 Mybatis 的核心配置文件</a>\n<ul>\n<li>该文件可以没有，大部分的配置可以转移到  <code>Spring</code>  配置文件中。</li>\n</ul>\n</li>\n<li>编写  <code>mapper</code>  映射文件</li>\n<li>配置  <code>IoC</code>  容器中三层架构的  <code>bean</code></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90\">配置数据源</a></li>\n<li><a href=\"#%E9%85%8D%E7%BD%AESqlSessionFactoryBean\">配置 SqlSessionFactoryBean</a>\n<ul>\n<li>用于生产  <code>SqlSessionFactory</code></li>\n</ul>\n</li>\n<li><a href=\"#%E9%85%8D%E7%BD%AEmapper%E6%8E%A5%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8\">配置 mapper 接口扫描器</a>\n<ul>\n<li>用于将  <code>mapper</code>  接口的代理类注册为  <code>bean</code></li>\n</ul>\n</li>\n<li><a href=\"#%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8\">配置事务管理器</a></li>\n<li><a href=\"#%E5%BC%80%E5%90%AF%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1\">开启声明式事务</a></li>\n</ol>\n<h2 id=\"编写mybatis的核心配置文件\"><a class=\"markdownIt-Anchor\" href=\"#编写mybatis的核心配置文件\">#</a> 编写 Mybatis 的核心配置文件</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-comment\">&lt;!--mybatis的总配置文件--&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">configuration</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>   \t<span class=\"hljs-comment\">&lt;!--</span><br><span class=\"hljs-comment\">\t关于Mybatis环境、数据源等移动至Spring配置文件</span><br><span class=\"hljs-comment\">\t核心设置必须在该配置文件中配置</span><br><span class=\"hljs-comment\">\t--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">settings</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">setting</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mapUnderscoreToCamelCase&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">setting</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;logImpl&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">settings</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"配置数据源\"><a class=\"markdownIt-Anchor\" href=\"#配置数据源\">#</a> 配置数据源</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">context:property-placeholder</span> <span class=\"hljs-attr\">location</span>=<span class=\"hljs-string\">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driverClassName&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"配置sqlsessionfactorybean\"><a class=\"markdownIt-Anchor\" href=\"#配置sqlsessionfactorybean\">#</a> 配置 SqlSessionFactoryBean</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span> <span class=\"hljs-comment\">&lt;!--注入数据源--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;configLocation&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;mybatis-config.xml&quot;</span>/&gt;</span> <span class=\"hljs-comment\">&lt;!--配置文件所在位置--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;typeAliasesPackage&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.jhy.acct.entity&quot;</span>/&gt;</span> <span class=\"hljs-comment\">&lt;!--起别名--&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--如果mapper映射文件和接口不在同一目录要设置该属性--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;mapperLocations&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com/jhy/acct/mapper/*.xml&quot;</span>/&gt;</span> <span class=\"hljs-comment\">&lt;!--mapper映射文件所在地--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"配置mapper接口扫描器\"><a class=\"markdownIt-Anchor\" href=\"#配置mapper接口扫描器\">#</a> 配置 mapper 接口扫描器</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;basePackage&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.jhy.acct.mapper&quot;</span>/&gt;</span> <span class=\"hljs-comment\">&lt;!--mapper接口的包路径--&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<blockquote>\n<p><code>Spring</code>  会默认扫描指定包下的  <code>Mapper</code>  接口，并根据命名规则自动加载对应的  <code>Mapper</code>  映射文件</p>\n</blockquote>\n<h2 id=\"配置事务管理器\"><a class=\"markdownIt-Anchor\" href=\"#配置事务管理器\">#</a> 配置事务管理器</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">bean</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;dataSource&quot;</span>/&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">bean</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"开启声明式事务\"><a class=\"markdownIt-Anchor\" href=\"#开启声明式事务\">#</a> 开启声明式事务</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">tx:annotation-driven</span> <span class=\"hljs-attr\">transaction-manager</span>=<span class=\"hljs-string\">&quot;transactionManager&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure>\n<h2 id=\"依赖\"><a class=\"markdownIt-Anchor\" href=\"#依赖\">#</a> 依赖</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--mysql驱动--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.33<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>     <span class=\"hljs-comment\">&lt;!--spring上下文，同时引入aop，bean，core，expression--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-context<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--druid数据源--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>druid<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.13<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入mybatis官方提供的mybatis与spring整合的依赖--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.0.3<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>     <span class=\"hljs-comment\">&lt;!--引入spring-jdbc，包括事务管理器--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入junit依赖--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.13.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入spring-test--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.springframework<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>spring-test<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>6.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入jakarta的注解，包括@Resource--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>jakarta.annotation<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jakarta.annotation-api<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--引入mybatis本体依赖--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.5.11<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "spring"
            ]
        }
    ]
}