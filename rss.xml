<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Funkynoob的个人博客</title>
        <link>https://blog.riversea.top</link>
        <description>亿点点心得</description>
        <language>zh-CN</language>
        <pubDate>Mon, 18 Mar 2024 21:20:07 +0800</pubDate>
        <lastBuildDate>Mon, 18 Mar 2024 21:20:07 +0800</lastBuildDate>
        <category>docker</category>
        <category>Git</category>
        <category>Nginx</category>
        <category>ORM框架</category>
        <category>MyBatis</category>
        <category>redis</category>
        <category>spring</category>
        <item>
            <guid isPermalink="true">https://blog.riversea.top/2024/03/18/redis/</guid>
            <title>redis</title>
            <link>https://blog.riversea.top/2024/03/18/redis/</link>
            <category>redis</category>
            <pubDate>Mon, 18 Mar 2024 21:20:07 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; 持久化&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了持久化策略， &lt;code&gt;redis&lt;/code&gt;  会将内存中的数据持久化到磁盘中存储避免了断电之后，内存中的数据消失。当再次重启  &lt;code&gt;redis&lt;/code&gt;  服务器后， &lt;code&gt;redis&lt;/code&gt;  会读取磁盘文件加载进内存，将数据恢复至之前的状态。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了四种持久化策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;RDB&lt;/code&gt; &lt;/strong&gt; ( &lt;code&gt;Redis Database&lt;/code&gt; ): 使用该策略， &lt;code&gt;redis&lt;/code&gt;  会为数据库的数据在指定的时间间隔中生成一份时间点快照。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;AOF&lt;/code&gt; &lt;/strong&gt; (Append Only File): 使用该策略， &lt;code&gt;redis&lt;/code&gt;  会记录每次服务器收到的&lt;strong&gt;写&lt;/strong&gt;的操作。这些操作会在服务器启动的时候重新运行以便能够重新构建起原始的数据库。这些&lt;strong&gt;写&lt;/strong&gt;操作会按照  &lt;code&gt;redis&lt;/code&gt;  的协议以同样的格式被日志记录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;No persistence&lt;/code&gt; &lt;/strong&gt;: 你可以完全禁用持久化。这有时候是在缓存的时候使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;RDB + AOF&lt;/code&gt; &lt;/strong&gt;: 你也可以在在同一次运行中结合使用  &lt;code&gt;AOF&lt;/code&gt;  和  &lt;code&gt;RDB&lt;/code&gt;  两种策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb&#34;&gt;#&lt;/a&gt; RDB&lt;/h2&gt;
&lt;p&gt;实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。这个快照文件就称为  &lt;code&gt;RDB&lt;/code&gt;  文件 (文件名默认为： &lt;code&gt;dump.rdb&lt;/code&gt; )，其中， &lt;code&gt;RDB&lt;/code&gt;  就是  &lt;code&gt;Redis DataBase&lt;/code&gt;  的缩写。&lt;/p&gt;
&lt;p&gt;当服务器再次重启后，服务器将会读取这个快照文件，恢复整个数据集。&lt;/p&gt;
&lt;h3 id=&#34;如何开启rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何开启rdb&#34;&gt;#&lt;/a&gt; 如何开启 RDB&lt;/h3&gt;
&lt;p&gt;进入  &lt;code&gt;redis&lt;/code&gt;  配置文件，大概在  &lt;code&gt;418&lt;/code&gt;  行，你将会看到如下的话：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;################################ SNAPSHOTTING  ################################&lt;br&gt;&lt;br&gt;# Save the DB to disk.&lt;br&gt;#&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# save &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;seconds&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;changes&amp;gt;&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;seconds&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;changes&amp;gt;&lt;/span&gt; ...]&lt;/span&gt;&lt;br&gt;#&lt;br&gt;# Redis will save the DB &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; the given number of seconds elapsed and it&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# surpassed the given number of write operations against the DB.&lt;/span&gt;&lt;br&gt;#&lt;br&gt;# Snapshotting can be completely disabled with a single empty &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; argument&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# as in following example:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# save &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;#&lt;br&gt;# Unless specified otherwise, by &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; Redis will save the DB:&lt;br&gt;#   * After &lt;span class=&#34;hljs-number&#34;&gt;3600&lt;/span&gt; seconds (an hour) &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; at least &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; change was performed&lt;br&gt;#   * After &lt;span class=&#34;hljs-number&#34;&gt;300&lt;/span&gt; seconds (&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; minutes) &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; at least &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt; changes were performed&lt;br&gt;#   * After &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt; seconds &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; at least &lt;span class=&#34;hljs-number&#34;&gt;10000&lt;/span&gt; changes were performed&lt;br&gt;#&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原来  &lt;code&gt;redis&lt;/code&gt;  默认已经开启了  &lt;code&gt;RDB&lt;/code&gt;  且遵守以下策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 60 秒之后，如果至少有 10000 次改变被执行&lt;/li&gt;
&lt;li&gt;在 5 分钟之后，如果至少有 100 次变化被执行&lt;/li&gt;
&lt;li&gt;在 1 小时之后，如果至少有 1 次变化被执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果上面的规定至少有一个被遵守， &lt;code&gt;redis&lt;/code&gt;  将会自动触发  &lt;code&gt;RDB&lt;/code&gt;  持久化，为此刻的数据生成快照，然后将其保存在为以  &lt;code&gt;rdb&lt;/code&gt;  为后缀的二进制文件，文件名默认为 &lt;code&gt;dump.rdb&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你可以以如下的形式重载  &lt;code&gt;redis&lt;/code&gt;  默认的  &lt;code&gt;RDB&lt;/code&gt;  持久化规则：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt; [&amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt; ...]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  会当  &lt;code&gt;&amp;lt;seconds&amp;gt;&lt;/code&gt;  秒消逝，并且累计的  &lt;code&gt;&amp;lt;changes&amp;gt;&lt;/code&gt;  个数的写操作被执行后，自动保存数据库。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意是在每个时间区间内，一旦写操作&lt;strong&gt;累积&lt;/strong&gt;到了设定的数就会触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;禁用rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#禁用rdb&#34;&gt;#&lt;/a&gt; 禁用 RDB&lt;/h3&gt;
&lt;p&gt;在配置文件中可以使用一个简单的配置来禁用  &lt;code&gt;RDB&lt;/code&gt;  持久化策略，在  &lt;code&gt;redis&lt;/code&gt;  中有以下描述：&lt;/p&gt;
&lt;figure class=&#34;highlight clean&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs clean&#34;&gt;# Snapshotting can be completely disabled &lt;span class=&#34;hljs-keyword&#34;&gt;with&lt;/span&gt; a single empty string argument&lt;br&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; following example:&lt;br&gt;快照化可以用下面的例子，使用单个空的字符串参数来完全禁用：&lt;br&gt;# save &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;配置rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置rdb&#34;&gt;#&lt;/a&gt; 配置 RDB&lt;/h3&gt;
&lt;p&gt;如何更改默认文件名，来到配置文件的大概  &lt;code&gt;481&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The filename where to dump the DB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dbfilename&lt;/span&gt; dump.rdb&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以通过更改  &lt;code&gt;dbfilename&lt;/code&gt;  的值来修改  &lt;code&gt;RDB&lt;/code&gt;  文件的名字。&lt;/p&gt;
&lt;p&gt;如何更改文件存储路径，来到配置文件的大概  &lt;code&gt;502&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The working directory.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The DB will be written inside this directory, with the filename specified&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# above using the &amp;#x27;dbfilename&amp;#x27; configuration directive.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The Append Only File will also be created inside this directory.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Note that you must specify a directory here, not a file name.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;dir&lt;/span&gt; ./&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以通过修改  &lt;code&gt;dir&lt;/code&gt;  的值来修改  &lt;code&gt;RDB&lt;/code&gt;  的存储路径。&lt;/p&gt;
&lt;h3 id=&#34;手动保存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动保存&#34;&gt;#&lt;/a&gt; 手动保存&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;   提供了两个命令来手动保存  &lt;code&gt;RDB&lt;/code&gt;  文件： &lt;code&gt;save&lt;/code&gt;  ， &lt;code&gt;bgsave&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;save&lt;/code&gt;  以同步的方式执行保存操作，会阻塞进程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bgsave&lt;/code&gt;  以异步的方式执行保存操作，不会阻塞进程&lt;/p&gt;
&lt;p&gt;当你运行上述命令时，会为当前  &lt;code&gt;redis&lt;/code&gt;   实例中的所有数据生成一个以  &lt;code&gt;RDB&lt;/code&gt;  文件的格式的快照。&lt;/p&gt;
&lt;p&gt;你绝对不应该在生产环境中使用  &lt;code&gt;save&lt;/code&gt;   命令，当你运行该命令时，会阻塞所有客户端的请求，服务器将不再接受所有客户端的请求，直到保存操作结束。&lt;/p&gt;
&lt;p&gt;实际上， &lt;code&gt;redis&lt;/code&gt;  的自动保存正是调用的  &lt;code&gt;bgsave&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在生产环境中必须使用  &lt;code&gt;bgsave&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;rdb的优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb的优点&#34;&gt;#&lt;/a&gt; RDB 的优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RDB&lt;/code&gt;  是一个非常紧凑的单时间点代表  &lt;code&gt;Redis&lt;/code&gt;  数据的单文件。 &lt;code&gt;RDB&lt;/code&gt;  文件非常适合于备份。举个例子，你可能想每个小时归档你的  &lt;code&gt;RDB&lt;/code&gt;  文件，或者每天保存一次  &lt;code&gt;RDB&lt;/code&gt;  快照。这样允许你非常轻松的恢复不同版本的数据以防灾难的发生。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDB&lt;/code&gt;  非常适合于灾难性的数据恢复，因为单文件的结构可以被运输至远程的数据中心。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDB&lt;/code&gt;  最大化  &lt;code&gt;redis&lt;/code&gt;  的功能，因为  &lt;code&gt;redis&lt;/code&gt;  的父进程为了完成持久化的唯一的工作就是  &lt;code&gt;fork&lt;/code&gt;  子进程，然后剩余的工作都交给子进程。父进程并不会执行  &lt;code&gt;I/O&lt;/code&gt;  操作。&lt;/li&gt;
&lt;li&gt;对比  &lt;code&gt;AOF&lt;/code&gt; ， &lt;code&gt;RDB&lt;/code&gt;  在大数据的情况下，能够进行快速重启。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rdb的缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb的缺点&#34;&gt;#&lt;/a&gt; RDB 的缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RDB&lt;/code&gt;  不是一个好选择，如果你想减少数据丢失的可能性以防  &lt;code&gt;redis&lt;/code&gt;  异常的停止工作。你可以配置不同的  &lt;code&gt;RDB&lt;/code&gt;  创建的时间点。然而，你会经常每 5 分钟或者更久的时间创建一个  &lt;code&gt;RDB&lt;/code&gt;   快照，所以在   &lt;code&gt;redis&lt;/code&gt;   没有正常进行  &lt;code&gt;shutdown&lt;/code&gt;  的莫名情况停止工作的情况下，你应该准备好丢失最新几分钟的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt; RDB&lt;/code&gt;  需要经常调用  &lt;code&gt;fork()&lt;/code&gt;  以使用子进程进行持久化。 &lt;code&gt;fork()&lt;/code&gt;  有时会很消耗时间，如果数据库的我数据很大的话，并且如果数据很大，且  &lt;code&gt;cpu&lt;/code&gt;  的性能不是很好，将会导致  &lt;code&gt;redis&lt;/code&gt;  在几微秒甚至 1 秒的时间停止服务客户端。 &lt;code&gt;AOF&lt;/code&gt;  也会使用  &lt;code&gt;fork()&lt;/code&gt;  但是不会如此频繁，并且你也可以自定义重新写入日志的频率且不用担心任何耐用性的损失。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据检查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据检查&#34;&gt;#&lt;/a&gt; 数据检查&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了一个工具用来检查  &lt;code&gt;RDB&lt;/code&gt;   文件的格式是否正确：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis－check－rdb &amp;lt;/path/to/rdb/file&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果  &lt;code&gt;RDB&lt;/code&gt;  文件损坏，该命令能检查出来。如果加载坏的  &lt;code&gt;RDB&lt;/code&gt;  文件，那么  &lt;code&gt;redis&lt;/code&gt;  客户端将无法执行命令，会弹出  &lt;code&gt;not connected&lt;/code&gt;  字样&lt;/p&gt;
&lt;h2 id=&#34;aof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof&#34;&gt;#&lt;/a&gt; AOF&lt;/h2&gt;
&lt;p&gt;快照不总是耐用的。如果你的计算机上的正在运行的  &lt;code&gt;redis&lt;/code&gt;  停止了、断电了、或者你意外地使用  &lt;code&gt;kill －9&lt;/code&gt;   杀死了你的实例，最新写入  &lt;code&gt;redis&lt;/code&gt;  的数据将会丢失。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  是  &lt;code&gt;RDB&lt;/code&gt;  的一个更充满耐用性的替代品。在  &lt;code&gt;1.1&lt;/code&gt;  版本开始了使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  以日志的形式记录每一次 ** 写操作，** 且不记录任何形式的读操作。当服务器重新启动的时候会读取日志记录，重新执行以构建原来的数据。&lt;/p&gt;
&lt;h3 id=&#34;开启aof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启aof&#34;&gt;#&lt;/a&gt; 开启 AOF&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  没有默认开启  &lt;code&gt;AOF&lt;/code&gt;  ，需要手动开启。&lt;/p&gt;
&lt;p&gt;进入配置文件，大概  &lt;code&gt;1381&lt;/code&gt;  行&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# AOF and RDB persistence can be enabled at the same time without problems.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# If the AOF is enabled on startup Redis will load the AOF, that is the file&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# with the better durability guarantees.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Please check https://redis.io/topics/persistence for more information.&lt;/span&gt;&lt;br&gt;&lt;br&gt;appendonly &lt;span class=&#34;hljs-literal&#34;&gt;no&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将  &lt;code&gt;appendonly&lt;/code&gt;  的值改为  &lt;code&gt;yes&lt;/code&gt;  则代表开启了 &lt;code&gt;AOF&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;由文档注释可知，如果你开启了  &lt;code&gt;AOF&lt;/code&gt;  ，那么每次服务器启动的时候就只会加载  &lt;code&gt;AOF&lt;/code&gt;  文件，不管是否开启了  &lt;code&gt;RDB&lt;/code&gt;  持久化。&lt;/p&gt;
&lt;h3 id=&#34;aof文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof文件&#34;&gt;#&lt;/a&gt; AOF 文件&lt;/h3&gt;
&lt;p&gt;自  &lt;code&gt;redis 7.0.0&lt;/code&gt;  开始， &lt;code&gt;redis&lt;/code&gt;  使用&lt;strong&gt;多部分  &lt;code&gt;AOF&lt;/code&gt;  机制&lt;/strong&gt;。这是什么呢？原始的单  &lt;code&gt;AOF&lt;/code&gt;  文件被分割为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;base&lt;/code&gt;  文件 (最多只有一个)：它是在创建文件时表示数据集完整状态的快照，可以为  &lt;code&gt;RDB&lt;/code&gt;  或者  &lt;code&gt;AOF&lt;/code&gt;  格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;incremental&lt;/code&gt;  文件 (可能会有多个)：包含额外的被应用在数据库的跟随旧文件的命令&lt;/p&gt;
&lt;p&gt;这两个文件会被放进一个分离的路径且会被  &lt;code&gt;manifest&lt;/code&gt;  文件追踪。&lt;/p&gt;
&lt;h4 id=&#34;文件存放位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件存放位置&#34;&gt;#&lt;/a&gt; 文件存放位置&lt;/h4&gt;
&lt;p&gt;上述三种文件的存放位置，同样可以由配置文件进行配置，在配置文件大概  &lt;code&gt;1404&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Append-only file names are created by Redis following a specific pattern.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The file name&amp;#x27;s prefix is based on the &amp;#x27;appendfilename&amp;#x27; configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# parameter, followed by additional information about the sequence and type.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# For example, if appendfilename is set to appendonly.aof, the following file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# names could be derived:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# - appendonly.aof.1.base.rdb as a base file.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof as incremental files.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# - appendonly.aof.manifest as a manifest file.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;appendfilename&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;appendonly.aof&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# For convenience, Redis stores all persistent append-only files in a dedicated&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# directory. The name of the directory is determined by the appenddirname&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# configuration parameter.&lt;/span&gt;&lt;br&gt;&lt;br&gt;appenddirname &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;appendonlydir&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据注释我们可以知道， &lt;code&gt;AOF&lt;/code&gt;  文件名字遵守一个格式：由  &lt;code&gt;appendfilename&lt;/code&gt;  的值为前缀，随后更随着序列号和类型，默认的名字为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appendonly.aof.1.base.rdb&lt;/code&gt; ： &lt;code&gt;base&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appendonly.aof.1.incr.aof&lt;/code&gt; ,  &lt;code&gt;appendonly.aof.2.incr.aof&lt;/code&gt; ： &lt;code&gt;increment&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appendonly.aof.manifest&lt;/code&gt; ： &lt;code&gt;manifest&lt;/code&gt;  文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次进行写回后， &lt;code&gt;AOF&lt;/code&gt;  文件的序列号将会进行增加，开始序号为 1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改  &lt;code&gt;appendfilename&lt;/code&gt;  值来修改文件名的前缀&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改  &lt;code&gt;appenddirname&lt;/code&gt;  的值来修改存放路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意在  &lt;code&gt;redis 7&lt;/code&gt;  之后  &lt;code&gt;AOF&lt;/code&gt;  文件的存放路径由  &lt;code&gt;dir&lt;/code&gt;  +  &lt;code&gt;appenddirname&lt;/code&gt;  一起决定，即会在  &lt;code&gt;RDB&lt;/code&gt;  文件的存放路径中，放一个隔离的  &lt;code&gt;appenddirname&lt;/code&gt;  的目录来存放  &lt;code&gt;AOF&lt;/code&gt;  文件&lt;/p&gt;
&lt;h3 id=&#34;写回策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写回策略&#34;&gt;#&lt;/a&gt; 写回策略&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  支持三种写回策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Always&lt;/code&gt; ：同步写回，每个写命令执行完立刻同步地将日志写回磁盘。这个策略会导致服务器非常非常的慢，当很多客户端同时请求时，客户端将会不得不等待服务器一条命令一条命令写回后再进行回复，但该策略也会很安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;everysec&lt;/code&gt; ：每秒写回，每个写命令执行完，只是先把日志写到  &lt;code&gt;AOF&lt;/code&gt;  文件的内存缓冲区，每隔  &lt;code&gt;1&lt;/code&gt;  秒把缓冲区中的内容写入磁盘。该策略已经足够快了，但是你可能会丢失 1 秒的数据如果服务器宕机了的话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;no&lt;/code&gt; ：操作系统控制的写回，每个写命令执行完，只是先把日志写到  &lt;code&gt;AOF&lt;/code&gt;  文件的内存缓冲区，由操作系统决定何时将缓冲区的数据写回磁盘。该此略会更快，但会很不安全。通常， &lt;code&gt;linux&lt;/code&gt;  会每 30 秒将数据写回磁盘，但这取决于内核。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们进入配置文件，大概 1448 行：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# appendfsync always&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;appendfsync&lt;/span&gt; everysec&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# appendfsync no&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过修改  &lt;code&gt;appendfsync&lt;/code&gt;  的值来修改写回策略，根据配置文件我们可以了解到  &lt;code&gt;redis&lt;/code&gt;  默认且推荐的策略是  &lt;code&gt;everysec&lt;/code&gt;  ，该策略兼具速度并且相对的安全。&lt;/p&gt;
&lt;h3 id=&#34;日志重写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日志重写&#34;&gt;#&lt;/a&gt; 日志重写&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  会随着写操作的次数而变得越来越大。举个例子，如果你增加了一个计数器 100 次，你会都得到一个包含了最终值的键，但是 100 次操作全部进入了你的  &lt;code&gt;AOF&lt;/code&gt;  文件，而其他 99 个操作不需要参入重建现在状态的过程。&lt;/p&gt;
&lt;p&gt;重写是完全安全的。当  &lt;code&gt;Redis&lt;/code&gt;  继续追加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪， &lt;code&gt;Redis&lt;/code&gt;  就会切换这两个文件并开始追加到新文件。&lt;/p&gt;
&lt;p&gt;所以  &lt;code&gt;Redis&lt;/code&gt;  支持一个有趣的功能：它能够在后台重建 AOF 而不中断对客户端的服务。每当您发出  &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  命令时， &lt;code&gt;Redis&lt;/code&gt;  都会写入在内存中重建当前数据集所需的最短命令序列。 如果您在  &lt;code&gt;Redis 2.2&lt;/code&gt;  中使用  &lt;code&gt;AOF&lt;/code&gt; ，则需要时不时地运行  &lt;code&gt;BGREWRITEAOF&lt;/code&gt; 。因为自从  &lt;code&gt;Redis 2.4&lt;/code&gt;  开始才能够自动触发日志重写。&lt;/p&gt;
&lt;p&gt;从  &lt;code&gt;Redis 7.0.0&lt;/code&gt;  开始，当计划进行  &lt;code&gt;AOF&lt;/code&gt;  重写时， &lt;code&gt;Redis&lt;/code&gt;  父进程会打开一个新的增量  &lt;code&gt;AOF&lt;/code&gt;  文件来继续写入。子进程执行重写逻辑并生成新的  &lt;code&gt;base AOF&lt;/code&gt; 。 &lt;code&gt;Redis&lt;/code&gt;  将使用临时清单文件来跟踪新生成的基础文件和增量文件。 当它们准备好时， &lt;code&gt;Redis&lt;/code&gt;  将执行原子替换操作以使这个临时清单文件生效。为了避免  &lt;code&gt;AOF&lt;/code&gt;  重写重复失败和重试时创建大量增量文件的问题， &lt;code&gt;Redis&lt;/code&gt;  引入了  &lt;code&gt;AOF&lt;/code&gt;  重写限制机制，以确保失败的  &lt;code&gt;AOF&lt;/code&gt;  重写以越来越慢的速度重试。&lt;/p&gt;
&lt;p&gt;既然说到  &lt;code&gt;Redis 2.4&lt;/code&gt;  以上地版本会自动进行重写，那么如何配置呢，来到配置文件大概 1471 行：&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Automatic rewrite of the append only file.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Redis is able to automatically rewrite the log file implicitly calling&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# BGREWRITEAOF when the AOF log size grows by the specified percentage.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# This is how it works: Redis remembers the size of the AOF file after the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# latest rewrite (if no rewrite has happened since the restart, the size of&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# the AOF at startup is used).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# This base size is compared to the current size. If the current size is&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# bigger than the specified percentage, the rewrite is triggered. Also&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# you need to specify a minimal size for the AOF file to be rewritten, this&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# is useful to avoid rewriting the AOF file even if the percentage increase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# is reached but it is still pretty small.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Specify a percentage of zero in order to disable the automatic AOF&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# rewrite feature.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;auto&lt;/span&gt;-aof-rewrite-percentage &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;auto&lt;/span&gt;-aof-rewrite-min-size &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;mb&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由注释可知， &lt;code&gt;redis&lt;/code&gt;  会自动调用  &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  命令当  &lt;code&gt;AOF&lt;/code&gt;  文件的大小到达指定的百分比时。 &lt;code&gt;redis&lt;/code&gt;  会记住最新一次重写时的文件大小，如果没有发生重写，那么当服务器重启之后的  &lt;code&gt;AOF&lt;/code&gt;  文件的大小将会被使用。这个被记住的大小将会被与现在的大小进行比较，如果现在文件的大小超过了指定的百分比，重写将会被触发。并且，你需要指定要重写的  &lt;code&gt;AOF&lt;/code&gt;  文件的最小大小，这对于避免重写  &lt;code&gt;AOF&lt;/code&gt;  文件很有用，因为即使达到百分比增加但仍然很小。&lt;/p&gt;
&lt;p&gt;指定百分比为 0 可以禁用自动  &lt;code&gt;AOF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在你可以指定  &lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt;  的值来指定百分比，指定  &lt;code&gt;auto-aof-rewrite-min-size&lt;/code&gt;  的值来指定最小的文件大小。&lt;/p&gt;
&lt;h4 id=&#34;手动重写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动重写&#34;&gt;#&lt;/a&gt; 手动重写&lt;/h4&gt;
&lt;p&gt;你可以主动使用  &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  命令来执行重写操作，事实上，自动的重写操作也是由  &lt;code&gt;redis&lt;/code&gt;  客户端向  &lt;code&gt;redis&lt;/code&gt;  服务器发送这个命令完成的。&lt;/p&gt;
&lt;h3 id=&#34;数据检查-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据检查-2&#34;&gt;#&lt;/a&gt; 数据检查&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了工具来检查  &lt;code&gt;AOF&lt;/code&gt;  文件的格式是否正确：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-check-aof &amp;lt;/path/to/aof&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果提示  &lt;code&gt;AOF&lt;/code&gt;  文件的格式出错，那么你可以通过添加  &lt;code&gt;--fix&lt;/code&gt;  选项来修复该文件：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-check-aof --fix &amp;lt;/path/to/aof&amp;gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;混合模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#混合模式&#34;&gt;#&lt;/a&gt; 混合模式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  支持  &lt;code&gt;RDB&lt;/code&gt;  和  &lt;code&gt;AOF&lt;/code&gt;  混合模式。&lt;/p&gt;
&lt;p&gt;如何开启混合模式，来到配置文件大概  &lt;code&gt;1516&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Redis can create append-only base files in either RDB or AOF formats. Using&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# the RDB format is always faster and more efficient, and disabling it is only&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# supported for backward compatibility purposes.&lt;/span&gt;&lt;br&gt;aof-use-rdb-preamble &lt;span class=&#34;hljs-literal&#34;&gt;yes&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;aof-use-rdb-preamble&lt;/code&gt;  用于开启混合模式，可见混合模式是默认开启的，代表着，如果你启用了  &lt;code&gt;RDB&lt;/code&gt;  和  &lt;code&gt;AOF&lt;/code&gt; ，那么将进入混合模式。&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;当你开启混合模式时，服务器启动时将会进行一次快照存储，然后使用  &lt;code&gt;AOF&lt;/code&gt;  记录每一次写操作。当  &lt;code&gt;AOF&lt;/code&gt;  达到重写条件时，将会将最新的数据存储为新的  &lt;code&gt;RDB&lt;/code&gt;  记录。这样的话，重启服务的时候会从  &lt;code&gt;RDB&lt;/code&gt;  和  &lt;code&gt;AOF&lt;/code&gt;  两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是  &lt;code&gt;RDB&lt;/code&gt;  格式，一部分是  &lt;code&gt;AOF&lt;/code&gt;  格式&lt;/p&gt;
&lt;h2 id=&#34;no-persistence&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#no-persistence&#34;&gt;#&lt;/a&gt; No persistence&lt;/h2&gt;
&lt;p&gt;禁用用  &lt;code&gt;AOF&lt;/code&gt;  和  &lt;code&gt;RDB&lt;/code&gt;  ，仅仅把  &lt;code&gt;redis&lt;/code&gt;  当作缓存来用。&lt;/p&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  支持事务。在事务中  &lt;code&gt;redis&lt;/code&gt;  允许在一步中运行完所有的命令。整个事务围绕着 4 个命令： &lt;code&gt;exec&lt;/code&gt; 、 &lt;code&gt;multi&lt;/code&gt; 、 &lt;code&gt;discard&lt;/code&gt; 、 &lt;code&gt;watch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  的事务有两个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有在事务中的命令将会被序列化并被顺序执行。在事务执行时其他客户端的请求将不会被处理。这个特点保证了事务中的所有命令将会以一个独立的单步操作的方式执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt;  命令会触发事务中命令的执行，所以如果客户端在命令执行前就失去连接，那么事务将不会开始执行。当你使用  &lt;code&gt;AOF&lt;/code&gt;  持久化时， &lt;code&gt;redis&lt;/code&gt;  在事务执行后会尝试把事务写进文件里。如果  &lt;code&gt;redis&lt;/code&gt;  服务器宕机了，那么可能只有一部分的事务命令写入文件。 &lt;code&gt;reids&lt;/code&gt;  服务器重新启动的时候会检查  &lt;code&gt;AOF&lt;/code&gt;  文件的格式，如果有错误将会退出。可以使用  &lt;code&gt;redis-check-aof&lt;/code&gt;  工具尝试移除一部分事务来修复  &lt;code&gt;AOF&lt;/code&gt;  文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开启事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启事务&#34;&gt;#&lt;/a&gt; 开启事务&lt;/h2&gt;
&lt;p&gt;使用  &lt;code&gt;multi&lt;/code&gt;  命令开启事务：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379&amp;gt; MULTI&lt;br&gt;OK&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功开启事务将会以  &lt;code&gt;ok&lt;/code&gt;  的形式返回&lt;/p&gt;
&lt;h3 id=&#34;序列化命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#序列化命令&#34;&gt;#&lt;/a&gt; 序列化命令&lt;/h3&gt;
&lt;p&gt;在事务的状态下，输入的所有命令将会以队列的形式进行记忆。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379(TX)&amp;gt; INCR foo&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; INCR bar&lt;br&gt;QUEUED&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次命令的返回值  &lt;code&gt;queued&lt;/code&gt;  表示该命令已经加入队列，但此时该命令并没有执行。&lt;/p&gt;
&lt;h3 id=&#34;执行命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行命令&#34;&gt;#&lt;/a&gt; 执行命令&lt;/h3&gt;
&lt;p&gt;当完成了所有命令的输入后，使用  &lt;code&gt;exec&lt;/code&gt;  命令顺序执行事务中的所有命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379(TX)&amp;gt; EXEC&lt;br&gt;1) (integer) 1&lt;br&gt;2) (integer) 1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每条命令的结果，将会以一个数组的形式进行返回。&lt;/p&gt;
&lt;h3 id=&#34;退出事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#退出事务&#34;&gt;#&lt;/a&gt; 退出事务&lt;/h3&gt;
&lt;p&gt;在事务的状态下，如果你想退出事务可以使用  &lt;code&gt;discard&lt;/code&gt;  进行退出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;redis&lt;/code&gt;  中不支持回滚，因为回滚会影响  &lt;code&gt;redis&lt;/code&gt;  的表现和简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;错误&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#错误&#34;&gt;#&lt;/a&gt; 错误&lt;/h2&gt;
&lt;p&gt;在  &lt;code&gt;redis&lt;/code&gt;  的事务中有两个可能发生的错误：事务开始前的错误和事务开始后的错误。&lt;/p&gt;
&lt;h3 id=&#34;事务开始前&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务开始前&#34;&gt;#&lt;/a&gt; 事务开始前&lt;/h3&gt;
&lt;p&gt;在事务开始前，也就是正在将命令加入队列时，有些错误将会导致命令无法加入队列中。例如：错误的命令 (命令的参数不对或者命令本身的名字不对)、内存溢出的情况 (如果你配置了服务器的内存限制)。&lt;/p&gt;
&lt;p&gt;如果在事务执行前发生了错误，那么在执行  &lt;code&gt;exec&lt;/code&gt;  命令后， &lt;code&gt;redis&lt;/code&gt;  将会返回  &lt;code&gt;error&lt;/code&gt;  并拒绝执行事务，并退出事务状态：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379&amp;gt; multi&lt;br&gt;OK&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; set&lt;br&gt;(error) ERR wrong number of arguments for &amp;#x27;set&amp;#x27; command&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; exec&lt;br&gt;(error) EXECABORT Transaction discarded because of previous errors.&lt;br&gt;127.0.0.1:6379&amp;gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;事务开始后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务开始后&#34;&gt;#&lt;/a&gt; 事务开始后&lt;/h3&gt;
&lt;p&gt;在调用了  &lt;code&gt;exec&lt;/code&gt;  命令执行事务后，如果某些命令执行发生了错误比如：让一个字符串进行自增，那么该命令将会返回  &lt;code&gt;error&lt;/code&gt;  ，但这并不会影响其他的命令的执行。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379(TX)&amp;gt; incr k1&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; incr k&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; exec&lt;br&gt;1) (error) ERR value is not an integer or out of range&lt;br&gt;2) (integer) 4&lt;br&gt;127.0.0.1:6379&amp;gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;上述结果得知： &lt;code&gt;redis&lt;/code&gt;  的事务并没有原子性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;乐观锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#乐观锁&#34;&gt;#&lt;/a&gt; 乐观锁&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  使用  &lt;code&gt;watch&lt;/code&gt;  命令来实现乐观锁。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;watch &amp;lt;key&amp;gt; [key...]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过  &lt;code&gt;watch&lt;/code&gt;  监控键，如果在命令入队时，该键的值发生了改变，那么事务不会执行，当你调用  &lt;code&gt;exec&lt;/code&gt;  后，事务将返回  &lt;code&gt;nil&lt;/code&gt;  并退出事务状态。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379&amp;gt; get k #k当前的值发生了改变&lt;br&gt;&amp;quot;4&amp;quot;&lt;br&gt;127.0.0.1:6379&amp;gt; watch k #监控k&lt;br&gt;OK&lt;br&gt;127.0.0.1:6379&amp;gt; multi&lt;br&gt;OK&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; incr k #此时，另一个客户端修改了k的值为5&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; set k1 qweasd&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; exec #执行事务后，发现返回nil&lt;br&gt;(nil)&lt;br&gt;127.0.0.1:6379&amp;gt; get k1 #发现所有键的值都没有被事务所修改&lt;br&gt;&amp;quot;hello&amp;quot;&lt;br&gt;127.0.0.1:6379&amp;gt; get k&lt;br&gt;&amp;quot;5&amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你在监控了某个键后，不想再监控了，可以使用  &lt;code&gt;unwatch&lt;/code&gt;  命令来取消监控。该命令没有任何参数，将会取消监控所有的键。&lt;/p&gt;
&lt;h1 id=&#34;管道&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#管道&#34;&gt;#&lt;/a&gt; 管道&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  是一种基于&lt;strong&gt;客户端 - 服务端模型&lt;/strong&gt;以及&lt;strong&gt;请求 / 响应协议&lt;/strong&gt;的 TCP 服务。一个请求会遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向服务端发送命令分四步 (发送命令→命令排队→命令执行→返回结果)，并监听  &lt;code&gt;Socket&lt;/code&gt;  返回，通常以阻塞模式等待服务端响应。&lt;/li&gt;
&lt;li&gt;服务端处理命令，并将结果返回给客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果同时需要执行大量的命令，那么就要等待上一条命令应答后再执行，这中间不仅仅多了&lt;strong&gt; RTT（Round Time Trip）&lt;/strong&gt;，而且还频繁调用系统 IO，发送网络请求，同时需要  &lt;code&gt;redis&lt;/code&gt;  调用多次  &lt;code&gt;read()&lt;/code&gt;  和  &lt;code&gt;write()&lt;/code&gt;  系统方法，系统方法会将数据从&lt;strong&gt;用户态&lt;/strong&gt;转移到&lt;strong&gt;内核态&lt;/strong&gt;，这样就会对进程上下文有比较大的影响了，性能不太好。&lt;/p&gt;
&lt;p&gt;管道用来优化客户端和服务端的&lt;strong&gt;网络时延 (RTT)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;管道(pipeline)&lt;/code&gt;  可以一次性发送多条命令给服务端，服务端依次处理完完毕后，通过一条响应一次性将结果返回，通过减少客户端与  &lt;code&gt;redis&lt;/code&gt;  的通信次数来实现降低往返延时时间。 &lt;code&gt;pipeline&lt;/code&gt;  实现的原理是队列，先进先出特性就保证数据的顺序性。&lt;/p&gt;
&lt;h1 id=&#34;主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制&#34;&gt;#&lt;/a&gt; 主从复制&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供一个主从复制机制。&lt;strong&gt;主 (master) 库&lt;/strong&gt; 能够进行读写，&lt;strong&gt;从 (slave) 库&lt;/strong&gt; 只能读。当  &lt;code&gt;master&lt;/code&gt;  数据变化的时候，自动将新的数据异步同步到其它  &lt;code&gt;slave&lt;/code&gt;  数据库，保证主从之间的数据保持一致性。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;通过修改从库的配置，标识从库要复制的是哪个主库。前往配置文件大概 553 行：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# replicaof &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;masterip&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;masterport&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过配置  &lt;code&gt;relicaof&lt;/code&gt;  的参数  &lt;code&gt;masterip&lt;/code&gt;  主库的  &lt;code&gt;ip&lt;/code&gt;  ， &lt;code&gt;masterport&lt;/code&gt;  主库的端口&lt;/p&gt;
&lt;p&gt;如果主库被设置了密码，那么需要修改另一个配置，前往配置文件大概 554 行：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# masterauth &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;master-password&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过配置  &lt;code&gt;masterauth&lt;/code&gt;  的参数  &lt;code&gt;master-password&lt;/code&gt;  指明主库的密码，从而能被验证通过。&lt;/p&gt;
&lt;p&gt;除上述配置之外，主库的配置文件不需要任何修改。&lt;/p&gt;
&lt;h2 id=&#34;连接主库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接主库&#34;&gt;#&lt;/a&gt; 连接主库&lt;/h2&gt;
&lt;p&gt;我们使用一个主库，然后再使用两个从库。使整个架构呈现出：一个主库下面挂着三个从库的状态。&lt;/p&gt;
&lt;p&gt;假设我们的主库的套接字为：172.17.0.2:6376。从库的套接字为：172.17.0.3:6377、172.17.0.4:6378。密码都为：12345&lt;/p&gt;
&lt;p&gt;所以从库的配置文件呈现如下情况：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;172.17.0.3:6377&lt;/span&gt;&lt;br&gt;replicaof 172.0.2 6376&lt;br&gt;masterauth 12345&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;172.17.0.4:6378&lt;/span&gt;&lt;br&gt;replicaof 172.0.2 6376&lt;br&gt;masterauth 12345&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了更好的观察运行情况，我们对上述三个库，继续修改如下配置：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;以下配置路径均可以自定义&lt;/span&gt;&lt;br&gt;dir /usr/local/etc/redis #设置工作目录&lt;br&gt;log /usr/local/etc/redis/redis.log #设置日志路径&lt;br&gt;pid /usr/local/etc/redis/redis.pid #设置pid文件路径&lt;br&gt;appendonly no #关闭AOF持久化，可关可不关&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置完成后，我们首先启动主库，观察之前配置的日志文件，如果出现以下日志，说明启动成功：&lt;/p&gt;
&lt;figure class=&#34;highlight ada&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ada&#34;&gt;Ready to &lt;span class=&#34;hljs-keyword&#34;&gt;accept&lt;/span&gt; connections tcp&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后，我们启动剩余两个从库，从库启动成功后会尝试连接主库，出现以下日志说明连接成功：&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;Connecting &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; MASTER &lt;span class=&#34;hljs-number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.2&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;6376&lt;/span&gt;&lt;br&gt;MASTER &amp;lt;-&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;REPLICA&lt;/span&gt; sync started&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想查看当前  &lt;code&gt;redis&lt;/code&gt;  实例的主从状态，可以使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;info replication&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令会显示当前  &lt;code&gt;redis&lt;/code&gt;  实例处于的主从状态，如果是主库，那么也会显示当前主库挂载了哪些从库。&lt;/p&gt;
&lt;h3 id=&#34;手动配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动配置&#34;&gt;#&lt;/a&gt; 手动配置&lt;/h3&gt;
&lt;p&gt;上面的配置均基于配置文件，在  &lt;code&gt;redis&lt;/code&gt;  服务启动后，也可以手动配置：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;slaveof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;slaveof&lt;/code&gt;  命令对标  &lt;code&gt;replicaof&lt;/code&gt;  配置。可以在运行时进行配置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果主库仍然含有密码，仍需要在配置文件中配置  &lt;code&gt;masterauth&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果，你想要在运行时让从库变为主库同样可以使用  &lt;code&gt;slaveof&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;slaveof no one&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意手动配置仅仅在当此运行中有效，重新启动服务后，任然会使用配置文件的配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步&#34;&gt;#&lt;/a&gt; 同步&lt;/h2&gt;
&lt;p&gt;尝试在主库中写入一些键，观察从库的状态。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6376&amp;gt; set k1 v1 #我们在从库中设置一个数据&lt;br&gt;OK &lt;br&gt;127.0.0.3:6377&amp;gt; get k1 #切换至从库，获取改键，发现能够获取，且值和主库中的对应&lt;br&gt;&amp;quot;v1&amp;quot;&lt;br&gt;&lt;br&gt;127.0.0.3:6377&amp;gt; set k2 v2 #尝试在从库中进行写入，发现报错无法写入&lt;br&gt;(error) READONLY You can&amp;#x27;t write against a read only replica.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;从库没有写入的权力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果运行时，主库宕机了怎么办？我们尝试  &lt;code&gt;shutdown&lt;/code&gt;  主库，观察从库的日志：&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;Connecting &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; MASTER &lt;span class=&#34;hljs-number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.2&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;6376&lt;/span&gt;&lt;br&gt;MASTER &amp;lt;-&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;REPLICA&lt;/span&gt; sync started&lt;br&gt;Error condition &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt; socket &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; SYNC: &lt;span class=&#34;hljs-keyword&#34;&gt;Connection&lt;/span&gt; refused&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会看到一场串的上面的内容，代表着当主库宕机后，从库其实一直在尝试连接主库。意味着，从库在主库宕机后选择发呆，什么事也不干，&lt;strong&gt;也不会从从库变为主库&lt;/strong&gt;，只是一味请求连接主库。同时如果你在从库查看数据，同步之后的数据任然存在。&lt;/p&gt;
&lt;p&gt;那此时的主库重启后仍然为主库吗？答案是，仍然是！&lt;/p&gt;
&lt;p&gt;如果从库宕机后，我们持续向主库中写入数据，从库再次启动后能否同步到主库的新数据？答案是也会！&lt;/p&gt;
&lt;h3 id=&#34;同步链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步链&#34;&gt;#&lt;/a&gt; 同步链&lt;/h3&gt;
&lt;p&gt;上一个  &lt;code&gt;slave&lt;/code&gt;  可以是下一个  &lt;code&gt;slave&lt;/code&gt;  的  &lt;code&gt;master&lt;/code&gt; ,  &lt;code&gt;slave&lt;/code&gt;  同样可以接收其他  &lt;code&gt;slave&lt;/code&gt;  的连接和同步请求，那么该  &lt;code&gt;slave&lt;/code&gt;  作为了链条中下一个的  &lt;code&gt;master&lt;/code&gt; , 可以有效减轻主  &lt;code&gt;master&lt;/code&gt;  的写压力形成同步链。&lt;/p&gt;
&lt;p&gt;可以在配置文件中直接配置  &lt;code&gt;replicaof&lt;/code&gt;  或者在运行中使用  &lt;code&gt;slaveof&lt;/code&gt;  来暂时设置。&lt;/p&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当主从库连接良好时，主库会向从库发送命令流来同步由于以下原因导致主库数据集发生改变的影响&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;客户端写入&lt;/li&gt;
&lt;li&gt;键过期或者删除&lt;/li&gt;
&lt;li&gt;更改主库数据集的任何其他操作，例如： &lt;code&gt;flushdb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;当主从库因为网络问题或者命令流发送超时导致连接丢失后，从库会进行重连并尝试进行部分的重新同步：意味着从库会尝试获取一部分它在失去连接中丢失的命令流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当部分重新同步不可能时， &lt;code&gt;slave&lt;/code&gt;  将请求完全重新同步，其中主服务器需要创建所有的数据快照，将其发送到从库，然后在数据集发生变化时继续发送命令流。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个主库都有一个 复制 ID ，这是一个超大伪随机的字符串用来标记一个给定数据集的状况。每个主库也拥有一个发送给从库且随着复制流字节增长的偏移量，使用主库的改变用来更新从库的状态。主库的偏移量在从库没有连接时也存在，下面给出的就是主库数据集版本的标识。&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;Replication&lt;/span&gt; ID, &lt;span class=&#34;hljs-keyword&#34;&gt;offset&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当从库连接至主库后，从库会使用  &lt;code&gt;PSYNC&lt;/code&gt;  命令用来发送他的旧主库的复制 ID 以及最近处理的的偏移量。这样主设备就可以只发送所需的增量部分。但是，如果主库缓冲区没有足够的  &lt;code&gt;backlog&lt;/code&gt;  或者从库正在参考的是一个历史的从来不知道的复制 ID，然后就会发生全量的重新同步：在这个情况下，从库会获得全量的数据集的复制。&lt;/p&gt;
&lt;p&gt;全量的重新同步的细节如下：&lt;/p&gt;
&lt;p&gt;主库会启动一个后台保存进程生产  &lt;code&gt;RDB&lt;/code&gt;  文件。同一时间，主库会开始缓存所有新收到的写命令。当后台保存完成后，主库会将数据库文件传输给从库，然后从库会将文件保存在硬盘上之后将它加载进内存。然后主库会发送所有缓存的命令到从库。这是以命令流的形式发送的。&lt;/p&gt;
&lt;p&gt;主库会使用心跳机制，默认每 10s 钟和从库进行通信保持长连接。&lt;/p&gt;
&lt;h2 id=&#34;缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h2&gt;
&lt;p&gt;由于所有的写操作都是先在  &lt;code&gt;Master&lt;/code&gt;  上操作，然后同步更新到  &lt;code&gt;Slave&lt;/code&gt;  上，所以从  &lt;code&gt;Master&lt;/code&gt;  同步到  &lt;code&gt;Slave&lt;/code&gt;  机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重， &lt;code&gt;Slave&lt;/code&gt;  机器数量的增加也会使这个问题更加严重。&lt;/p&gt;
&lt;p&gt;默认情况下，当  &lt;code&gt;master&lt;/code&gt;  宕机后，不会在引  &lt;code&gt;slave&lt;/code&gt;  节点中自动重选一个  &lt;code&gt;master&lt;/code&gt; ，这意味着，你无法进行写入。&lt;/p&gt;
&lt;h1 id=&#34;哨兵&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哨兵&#34;&gt;#&lt;/a&gt; 哨兵&lt;/h1&gt;
&lt;p&gt;为了解决主从复制的痛点 ——  &lt;code&gt;master&lt;/code&gt;  宕机后， &lt;code&gt;slave&lt;/code&gt;  中并不会产生一个  &lt;code&gt;master&lt;/code&gt;  来进行写入。吹哨人巡查监控后台  &lt;code&gt;master&lt;/code&gt;  主机是否故障，如果故障了根据投票数自动将某一个从库转换为新主库，继续对外服务。&lt;/p&gt;
 &lt;img src=&#34;redis/sentinel.png&#34; alt=&#34;哨兵架构&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;哨兵是在非集群状态下使用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是哨兵提供的一系列功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：哨兵能持续不断地检查  &lt;code&gt;master&lt;/code&gt;  和  &lt;code&gt;slave&lt;/code&gt;  是否如期运行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通知&lt;/strong&gt;：哨兵能通过  &lt;code&gt;API&lt;/code&gt;  通知系统管理员，或者其他电脑程序，某一个被监控的  &lt;code&gt;redis&lt;/code&gt;  实例出问题了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动的故障转移&lt;/strong&gt;：如果  &lt;code&gt;master&lt;/code&gt;  宕机了，哨兵会开始故障转移进程，将  &lt;code&gt;slave&lt;/code&gt;  提拔为  &lt;code&gt;master&lt;/code&gt;  ，其他的额外的  &lt;code&gt;slave&lt;/code&gt;  将会被&lt;strong&gt;重新配置&lt;/strong&gt;以使用新的  &lt;code&gt;master&lt;/code&gt;  ，并且使用  &lt;code&gt;reids&lt;/code&gt;  服务器的应用程序会在连接中被通知使用新的地址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置提供者&lt;/strong&gt;：哨兵充当客户端服务发现的权威来源，客户端连接到哨兵以询问负责给定服务的  &lt;code&gt;master&lt;/code&gt;  的地址。如果发生故障转移，哨兵将报告新地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;哨兵在进行故障转移时，会动态的修改配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;哨兵架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哨兵架构&#34;&gt;#&lt;/a&gt; 哨兵架构&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;reids&lt;/code&gt;  的哨兵是&lt;strong&gt;分布式系统&lt;/strong&gt;。哨兵被设计来以&lt;strong&gt;多个哨兵进程共同合作&lt;/strong&gt;的配置运行。这样的好处有如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当多个哨兵都认同某个给定的  &lt;code&gt;master&lt;/code&gt;  已经宕机，那么故障检测将会被执行。这降低了&lt;strong&gt;假阳性&lt;/strong&gt;的可能性，也就是误判  &lt;code&gt;master&lt;/code&gt;  宕机。&lt;/li&gt;
&lt;li&gt;在所有的哨兵进程没有完全停止工作时哨兵也能发挥作用，这提高了对抗故障的&lt;strong&gt;健壮性&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;哨兵、 &lt;code&gt;Redis&lt;/code&gt;  实例（ &lt;code&gt;master&lt;/code&gt;  和  &lt;code&gt;slave&lt;/code&gt; ）以及连接到哨兵 和  &lt;code&gt;Redis&lt;/code&gt;  的客户端的总和，也是一个具有特定属性的更大的分布式系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;如何运行哨兵实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何运行哨兵实例&#34;&gt;#&lt;/a&gt; 如何运行哨兵实例&lt;/h2&gt;
&lt;p&gt;你可以使用  &lt;code&gt;redis&lt;/code&gt;  提供的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-sentinel /path/to/sentinel.conf&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以同样使用  &lt;code&gt;redis-server&lt;/code&gt;  命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-server /path/to/sentinel.conf --sentinel&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;哨兵被&lt;strong&gt;强制使用配置文件&lt;/strong&gt;，无法默认运行，因为该文件会被系统使用，用来保存当前的状态，并且会在重新启动时被重新加载。如果没有给出配置文件或者配置文件路径不可写，哨兵将简单地拒绝启动。&lt;/p&gt;
&lt;p&gt;哨兵运行&lt;strong&gt;默认监听端口 26379&lt;/strong&gt;，所以为了保证能够运行，必须让你的服务器打开&lt;strong&gt; 26379 端口&lt;/strong&gt;。否则，哨兵们将不能交流并且也无法就该做什么达成一致，所以故障转义将不会被执行。&lt;/p&gt;
&lt;h3 id=&#34;配置哨兵文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置哨兵文件&#34;&gt;#&lt;/a&gt; 配置哨兵文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  源代码发行版包含一个名为  &lt;code&gt;Sentinel.conf&lt;/code&gt;  的文件，它是一个自记录示例配置文件，可用于配置  &lt;code&gt;Sentinel&lt;/code&gt; ，但是典型的最小配置文件如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs smali&#34;&gt;sentinel&lt;span class=&#34;hljs-built_in&#34;&gt; monitor &lt;/span&gt;mymaster 127.0.0.1 6379 2&lt;br&gt;sentinel down-after-milliseconds mymaster 60000&lt;br&gt;sentinel failover-timeout mymaster 180000&lt;br&gt;sentinel parallel-syncs mymaster 1&lt;br&gt;&lt;br&gt;sentinel&lt;span class=&#34;hljs-built_in&#34;&gt; monitor &lt;/span&gt;resque 192.168.1.3 6380 4&lt;br&gt;sentinel down-after-milliseconds resque 10000&lt;br&gt;sentinel failover-timeout resque 180000&lt;br&gt;sentinel parallel-syncs resque 5&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;您只需要指定要监视的  &lt;code&gt;master&lt;/code&gt; ，为每个单独的  &lt;code&gt;master&lt;/code&gt; （可能有任意数量的 &lt;code&gt;slave&lt;/code&gt; ）提供不同的名称，无需指定  &lt;code&gt;slave&lt;/code&gt; ， &lt;code&gt;slave&lt;/code&gt;  是自动发现的。 哨兵将使用有关 &lt;code&gt;slave&lt;/code&gt;  的附加信息自动更新配置（以便在重新启动时保留信息），每次在故障转移期间将  &lt;code&gt;slave&lt;/code&gt;  提升为  &lt;code&gt;master&lt;/code&gt;  以及每次发现新的哨兵时，配置也会被重写&lt;/p&gt;
&lt;p&gt;上面的示例配置基本上监视两组  &lt;code&gt;Redis&lt;/code&gt;  实例，每个实例由一个主实例和未定义数量的  &lt;code&gt;slave&lt;/code&gt;  组成。一组实例称为  &lt;code&gt;mymaster&lt;/code&gt; ，另一组实例称为  &lt;code&gt;resque&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sentinel monitor&lt;/code&gt;  语句的参数含义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; &amp;lt;quorum&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们一行一行检查：&lt;/p&gt;
&lt;p&gt;第一行用于告诉  &lt;code&gt;Redis&lt;/code&gt;  监视一个名为  &lt;code&gt;mymaster&lt;/code&gt;  的主机，该主机位于地址  &lt;code&gt;127.0.0.1&lt;/code&gt;  和端口  &lt;code&gt;6379&lt;/code&gt; ，投票数 ( &lt;code&gt;quorum&lt;/code&gt; ) 为 2。一切都非常明显，但&lt;strong&gt; quorum 参数&lt;/strong&gt;除外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;投票数是需要就  &lt;code&gt;master&lt;/code&gt;  无法访问这一事实达成一致的哨兵数量，以便真正将主站标记为故障，并在可能的情况下最终启动故障转移过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然而，投票数仅用于检测故障。为了实际执行故障转移，需要选举其中一个哨兵为故障转移的领导者并被授权继续进行。只有大多数哨兵进程投票才会发生这种情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，如果您有 5 个 哨兵进程，并且给定  &lt;code&gt;master&lt;/code&gt;  进程的投票数设置为 2，则会发生以下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个哨兵同时同意主节点无法访问，则两者之一将尝试启动故障转移&lt;/li&gt;
&lt;li&gt;如果总共至少有三个哨兵可达，则故障转移将被授权并实际启动&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，这意味着在故障期间，如果大多数哨兵进程无法通信（也称为少数分区中没有故障转移），则哨兵永远不会启动故障转移&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了上述配置之外，其余的哨兵配置遵从与以下格式：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sentinel &amp;lt;option_name&amp;gt; &amp;lt;master_name&amp;gt; &amp;lt;option_value&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;down-after-milliseconds &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;&lt;/code&gt; ：是当哨兵开始认为实例&lt;strong&gt;主观下线&lt;/strong&gt;时，实例不应该可达的时间（要么不回复我们的  &lt;code&gt;PING&lt;/code&gt; ，要么回复错误）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parallel-syncs &amp;lt;master-name&amp;gt; &amp;lt;nums&amp;gt;&lt;/code&gt; ：设置故障转移后可以重新配置为同时使用新  &lt;code&gt;master&lt;/code&gt;  的  &lt;code&gt;slave&lt;/code&gt;  数量。数字越低，完成故障转移过程所需的时间越长。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth-pass &amp;lt;master-name&amp;gt; &amp;lt;password&amp;gt;&lt;/code&gt; ： &lt;code&gt;master&lt;/code&gt;  设置了密码，连接  &lt;code&gt;master&lt;/code&gt;  服务的密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其余的可参照实例配置文件： &lt;code&gt;sentinel.conf&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  官方建议配置至少三个哨兵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;主观下线和客观下线&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主观下线和客观下线&#34;&gt;#&lt;/a&gt; 主观下线和客观下线&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  哨兵有两种下下线的判断：客观下线 (ODOWN) 和主观下线 (SDOWN)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主观下线 (SDOWN)：单独一个哨兵认为  &lt;code&gt;master&lt;/code&gt;  已经下线，这种情况由于， &lt;code&gt;master&lt;/code&gt;  没有在有效的时间正确回应哨兵的  &lt;code&gt;PING&lt;/code&gt;  命令。这个时间在配置文件中是  &lt;code&gt;is-master-down-after-milliseconds&lt;/code&gt;  参数。
&lt;ul&gt;
&lt;li&gt;仅仅通过  &lt;code&gt;SDOWN&lt;/code&gt;  无法判断  &lt;code&gt;master&lt;/code&gt;  是否下线。需要哨兵之间进行投票。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客观下线 (ODOWN)：当哨兵之间的投票数达到之前设定的  &lt;code&gt;quorm&lt;/code&gt;  时， &lt;code&gt;master&lt;/code&gt;  进入客观下线状态。触发故障转移。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;故障转移流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#故障转移流程&#34;&gt;#&lt;/a&gt; 故障转移流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主观下线&lt;/li&gt;
&lt;li&gt;客观下线&lt;/li&gt;
&lt;li&gt;选出领导者哨兵：当主节点被判断客观下线以后，各个哨兵节会进行协商，通过  &lt;code&gt;raft&lt;/code&gt;  算法 先选举出一个领导者 (leader) 哨兵节点并由该领导者节点，也即被选举出的兵王进行  &lt;code&gt;failover&lt;/code&gt;  (故障转移）&lt;/li&gt;
&lt;li&gt;由领导者 (leader) 开始推动故切流程并选出一个新  &lt;code&gt;master&lt;/code&gt; ：
&lt;ol&gt;
&lt;li&gt;在剩下的  &lt;code&gt;slave&lt;/code&gt;  中选出一个  &lt;code&gt;master&lt;/code&gt;  , 从节点选举过程评估从节点的下列信息来选举  &lt;code&gt;master&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;与主节点断开的时间&lt;/li&gt;
&lt;li&gt;从节点优先级：由  &lt;code&gt;replica-priority&lt;/code&gt;  参数指定，越低的优先级越高，但该参数指定为 0 时，该节点将不会参与选举。&lt;/li&gt;
&lt;li&gt;复制偏移处理：更新的偏移量越优先&lt;/li&gt;
&lt;li&gt;运行 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切换剩下的  &lt;code&gt;slave&lt;/code&gt;  至新的  &lt;code&gt;master&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;执行  &lt;code&gt;slaveof no one&lt;/code&gt;  命令让选出来的从节成为新的主节点，并通过  &lt;code&gt;slaveof&lt;/code&gt;  命令让其他节点成为其从节点&lt;/li&gt;
&lt;li&gt;会修改  &lt;code&gt;slave&lt;/code&gt;  以及  &lt;code&gt;sentinel&lt;/code&gt;  的配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;此时，若旧的  &lt;code&gt;master&lt;/code&gt;  重新上线，仍然会成为新选举出来的  &lt;code&gt;master&lt;/code&gt;  的  &lt;code&gt;slave&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群&#34;&gt;#&lt;/a&gt; 集群&lt;/h1&gt;
&lt;h2 id=&#34;为什么要使用-redis-集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么要使用-redis-集群&#34;&gt;#&lt;/a&gt; 为什么要使用 redis 集群&lt;/h2&gt;
&lt;p&gt;使用主从复制 + 哨兵的模式能够很大程度上减轻   &lt;code&gt;redis&lt;/code&gt;   的读写压力，但归根结底，此模式仍有不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受请求的服务器从始至终只有一台   &lt;code&gt;redis&lt;/code&gt;  实例，无法适应高并发的场景。&lt;/li&gt;
&lt;li&gt;从节点的上位可能会导致写丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是redis集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是redis集群&#34;&gt;#&lt;/a&gt; 什么是 redis 集群&lt;/h2&gt;
&lt;p&gt;由于数据量过大，单个   &lt;code&gt;master&lt;/code&gt;  复制集难以承担，因此需要对多个复制集进行集群，形成水平扩展每个复制集只负责存储整个数据集的一部分，这就是  &lt;code&gt;Redis&lt;/code&gt;  的集群，其作用是提供在多个  &lt;code&gt;Redis&lt;/code&gt;  节点间共享数据的程序集。&lt;/p&gt;
&lt;p&gt;形象的图像表示如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/cluster.png&#34; alt=&#34;cluster.png&#34; title=&#34;cluster架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;当客户端请求来到  &lt;code&gt;redis&lt;/code&gt;  服务之后，将会根据规则将请求分散至不同的  &lt;code&gt;redis&lt;/code&gt;  实例中，以减少每台服务器的压力。每台   &lt;code&gt;redis&lt;/code&gt;  服务器仅仅存储数据集的一部分，且  &lt;code&gt;redis&lt;/code&gt;   服务间数据共享。&lt;/p&gt;
&lt;h2 id=&#34;如何确定键的落点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何确定键的落点&#34;&gt;#&lt;/a&gt; 如何确定键的落点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  通过哈希的方式找到键的落点。下面我们一一介绍常见的哈希方式以及  &lt;code&gt;redis&lt;/code&gt;   最终的使用方案。&lt;/p&gt;
&lt;h3 id=&#34;普通哈希&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#普通哈希&#34;&gt;#&lt;/a&gt; 普通哈希&lt;/h3&gt;
&lt;p&gt;通过简单的哈希函数来确定键的落点。例如，现在我有三个实例：A、B、C 组成了一个集群。那么，可能的哈希函数就可能如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight mathematica&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs mathematica&#34;&gt;&lt;span class=&#34;hljs-variable&#34;&gt;RES&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过键对 3 取余得到键的落点在哪个实例上。这样的方法看似非常简单且稳妥。但实际上却有很大的弊端：当其中某个实例宕机或者新加入一些实例后，哈希函数将会发生改变，之前的键的映射方式将会重新洗牌，将会有大量的键无法映射到对应的  &lt;code&gt;redis&lt;/code&gt;   的服务上。&lt;/p&gt;
&lt;h3 id=&#34;一致性哈希&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一致性哈希&#34;&gt;#&lt;/a&gt; 一致性哈希&lt;/h3&gt;
&lt;p&gt;一致性哈希是为了解决普通哈希带来的问题 —— 当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系。一致性哈希算法将整个哈希值空间映射成一个虚拟的圆环。整个哈希空间的取值范围为 0~2&lt;sup&gt;32-1，按顺时针方向开始从 0~2&lt;/sup&gt;32-1 排列，最后的节点 2^32-1 在 0 开始位置重合，形成一个虚拟的圆环。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash.png&#34; alt=&#34;consistency-hash.png&#34; title=&#34;一致性哈希环&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;服务器映射到哈希环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器映射到哈希环&#34;&gt;#&lt;/a&gt; 服务器映射到哈希环&lt;/h5&gt;
&lt;p&gt;接下来，将服务器节点映射到哈希环上对应的位置。我们可以对服务器 IP 地址进行哈希计算，哈希计算后的结果对 2&lt;sup&gt;32 取模，结果一定是一个 0 到 2&lt;/sup&gt;32-1 之间的整数。最后将这个整数映射在哈希环上，整数的值就代表了一个服务器节点的在哈希环上的位置。即：hash（服务器 ip）% 2^32。下面我们依次将 node0、node1、node2 三个缓存服务器映射到哈希环上，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-node.png&#34; alt=&#34;consistency-hash-node.png&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;对象key映射到服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象key映射到服务器&#34;&gt;#&lt;/a&gt; 对象 key 映射到服务器&lt;/h5&gt;
&lt;p&gt;当服务器接收到数据请求时，首先需要计算请求 Key 的哈希值；然后将计算的哈希值映射到哈希环上的具体位置；接下来，从这个位置沿着哈希环顺时针查找，遇到的第一个节点就是 key 对应的节点；最后，将请求发送到具体的服务器节点执行数据操作。&lt;/p&gt;
&lt;p&gt;假设我们有 “key-01：张三”、“key-02：李四”、“key-03：王五” 三条缓存数据。经过哈希算法计算后，映射到哈希环上的位置如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hah-map.png&#34; alt=&#34;consistency-hah-map.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，通过哈希计算后，key-01 顺时针寻找将找到 node0，key-02 顺时针寻找将找到 node1，key-03 顺时针寻找将找到 node2。最后，请求找到的服务器节点执行具体的业务操作。&lt;/p&gt;
&lt;p&gt;以上便是一致性哈希算法的工作原理。&lt;/p&gt;
&lt;h4 id=&#34;服务器扩容缩容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器扩容缩容&#34;&gt;#&lt;/a&gt; 服务器扩容 &amp;amp; 缩容&lt;/h4&gt;
&lt;p&gt;前面介绍了一致性哈希算法的工作原理，那么，一致性哈希算法如何避免服务器动态伸缩的问题的呢？&lt;/p&gt;
&lt;h5 id=&#34;服务器缩容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器缩容&#34;&gt;#&lt;/a&gt; 服务器缩容&lt;/h5&gt;
&lt;p&gt;服务器缩容就是减少集群中服务器节点的数量或是集群中某个节点故障。假设，集群中的某个节点故障，原本映射到该节点的请求，会找到哈希环中的下一个节点，数据也同样被重新分配至下一个节点，其它节点的数据和请求不受任何影响。这样就确保节点发生故障时，集群能保持正常稳定。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-reduce.png&#34; alt=&#34;consistency-hash-reduce.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：节点 node2 发生故障时，数据 key-01 和 key-02 不会受到影响，只有 key-03 的请求被重定位到 node0。在一致性哈希算法中，如果某个节点宕机不可用了，那么受影响的数据仅仅是会寻址到此节点和前一节点之间的数据。其他哈希环上的数据不会受到影响。&lt;/p&gt;
&lt;h5 id=&#34;服务器扩容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器扩容&#34;&gt;#&lt;/a&gt; 服务器扩容&lt;/h5&gt;
&lt;p&gt;服务器扩容就是集群中需要增加一个新的数据节点，假设，由于需要缓存的数据量太大，必须对集群进行扩容增加一个新的数据节点。此时，只需要计算新节点的哈希值并将新的节点加入到哈希环中，然后将哈希环中从上一个节点到新节点的数据映射到新的数据节点即可。其他节点数据不受影响，具体如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-scall.png&#34; alt=&#34;consistency-hash-scall.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，加入新的 node3 节点后，key-01、key-02 不受影响，只有 key-03 的寻址被重定位到新节点 node3，受影响的数据仅仅是会寻址到新节点和前一节点之间的数据。&lt;/p&gt;
&lt;p&gt;通过一致性哈希算法，集群扩容或缩容时，只需要重新定位哈希环空间内的一小部分数据。其他数据保持不变。当节点数越多的时候，使用哈希算法时，需要迁移的数据就越多，使用一致哈希时，需要迁移的数据就越少。所以，一致哈希算法具有较好的容错性和可扩展性。&lt;/p&gt;
&lt;h4 id=&#34;缺点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-2&#34;&gt;#&lt;/a&gt; 缺点&lt;/h4&gt;
&lt;p&gt;一致性哈希也并不是那么完美，它有一个很致命的弱点 —— 数据倾斜。由于哈希计算的随机性，我们无法保证所有的节点都能完美地均匀地分散在哈希环上，特别是在节点太少的情况下，会导致大量的键会集中映射至少量几个节点的情况，造成数据访问的冷热不均，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-short.png&#34; alt=&#34;consistency-hash-short.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，key-1、key-2、key-3 可能被映射到同一个节点 node0 上。导致 node0 负载过大，而 node1 和 node2 却很空闲的情况。这有可能导致个别服务器数据和请求压力过大和崩溃，进而引起集群的崩溃。&lt;/p&gt;
&lt;h3 id=&#34;哈希槽&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希槽&#34;&gt;#&lt;/a&gt; 哈希槽&lt;/h3&gt;
&lt;p&gt;为了解决一致性哈希的数据倾斜问题， &lt;code&gt;redis&lt;/code&gt;  使用了名为&lt;strong&gt;哈希槽&lt;/strong&gt;的技术来实现集群。 &lt;code&gt;redis&lt;/code&gt;  通过将键映射至&lt;strong&gt;哈希槽&lt;/strong&gt;而不是节点来规避底层节点的变动带来的数据问题。使用如下的公式来计算哈希槽：&lt;/p&gt;
&lt;figure class=&#34;highlight mathematica&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs mathematica&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;HASH_SLOT&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;CRC16&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;16384&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过  &lt;code&gt;CRC16&lt;/code&gt;  算法计算  &lt;code&gt;key&lt;/code&gt;  的哈希值，该哈希值总共有 16 位，也就是哈希值的范围为 0~65535。但在  &lt;code&gt;redis&lt;/code&gt;  中哈希槽的个数被设定为 0~16383&lt;/p&gt;
&lt;h4 id=&#34;分片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分片&#34;&gt;#&lt;/a&gt; 分片&lt;/h4&gt;
&lt;p&gt;每个节点分配一定数量哈希槽，哈希槽被&lt;strong&gt;分片&lt;/strong&gt;至集群中的节点上。也就是每个节点就是哈希槽的&lt;strong&gt;分片&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假如，现在我有 A，B，C 三台节点并组成一个集群，三台机器的分片可能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点 A 包含哈希槽 0~5500&lt;/li&gt;
&lt;li&gt;节点 B 包含哈希槽 5501 到 11000&lt;/li&gt;
&lt;li&gt;节点 C 包含哈希槽 11001 至 16383&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们使用上面提到的哈希槽计算公式计算给定键的哈希槽，根据每个节点的分片将其分配至对应的节点上。&lt;/p&gt;
&lt;p&gt;哈希槽均匀地分布在各个节点上，这样数据倾斜问题就解决了。&lt;/p&gt;
&lt;p&gt;实际上，键的映射只和哈希槽有关。我们可以形象地将哈希槽和节点理解为：座位和教室的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;教室 (节点)&lt;strong&gt; 包含&lt;/strong&gt;座位 (哈希槽)&lt;/strong&gt;。同学 (键) 寻找的永远是座位，不管如何移动教室，同学最终只会根据其座位坐上他应在的位置上。只不过，座位可能会从属于不同的教室，即哈希槽位可能会从属于不同的节点。&lt;/p&gt;
&lt;h5 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h5&gt;
&lt;p&gt;使用哈希槽的技术可以可以很方便地添加和移除节点。例如，现在有 A、B、C 三台节点，现在我向里面添加一个新的节点 D，那么我们只需要从 A、B、C 三个节点中移走部分的哈希槽至节点 D 即可。同样的，如果我移除节点 C，那么我们只需要将 C 的哈希槽移动到 A、B 节点上，一旦节点 C 的哈希槽空了，那么删除 C 即可。&lt;/p&gt;
&lt;p&gt;同时哈希槽的移动并不会停止集群对外服务，这意味着无论是修改分片占比还是移动哈希槽都不会让集群下线。&lt;/p&gt;
&lt;h4 id=&#34;为什么使用16384个槽位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么使用16384个槽位&#34;&gt;#&lt;/a&gt; 为什么使用 16384 个槽位&lt;/h4&gt;
&lt;p&gt;前面提到 CRC16 计算的哈希位数有 16 位，即范围为 0~65535，但   &lt;code&gt;redis&lt;/code&gt;   只使用了 14 位，即哈希槽范围为 0~16383。为什么这样设计能？我目前的水平不足以理解背后的原因，但究其原因是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群之间发送的心跳包包含  &lt;code&gt;redis&lt;/code&gt;  所有的配置，包括哈希槽，且哈希槽占据心跳包的大部分空间，为了减小心跳包占用的带宽，所以缩小哈希槽的范围，14 位是折中的选择&lt;/li&gt;
&lt;li&gt;官方建议的集群节点数不超过 1000 个，所以不需要太大的哈希槽范围&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集群配置参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群配置参数&#34;&gt;#&lt;/a&gt; 集群配置参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cluster-enabled  &lt;code&gt;&amp;lt;yes/no&amp;gt;&lt;/code&gt; &lt;/strong&gt;：如果设置为 yes，那么这个配置文件所代表的  &lt;code&gt;redis&lt;/code&gt;  实例将会支持集群。否则，该实例将会以普通的方式启动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster-config-file  &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; &lt;/strong&gt;：设置集群的配置文件，该文件是无法写入的，集群节点会在每次配置改变时自动将配置持久化进该文件里，为了当重新启动时读取该文件。该文件会列举像是集群中的节点、他们的状态、持久化变量等等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster-node-timeout &lt;milliseconds&gt;&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster-allow-reads-when-down&lt;/strong&gt;  &lt;code&gt;&amp;lt;yes/no&amp;gt;&lt;/code&gt; ：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建集群&#34;&gt;#&lt;/a&gt; 创建集群&lt;/h2&gt;
&lt;p&gt;在创建集群之间，我们必须首先进行配置以让  &lt;code&gt;redis&lt;/code&gt;  实例支持以集群模式运行。最小的配置如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;port 7000 #redis的端口&lt;br&gt;cluster-enabled yes #声明该实例支持集群模式&lt;br&gt;cluster-config-file nodes.conf #设置该实例的集群配置文件&lt;br&gt;cluster-node-timeout 5000 #超时时间&lt;br&gt;appendonly yes #支持AOF持久化&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最小的集群必须至少含有 3 台   &lt;code&gt;master&lt;/code&gt;  节点。官方推荐部署时，使用六台节点的集群，3 台   &lt;code&gt;master&lt;/code&gt;  节点和 3 台   &lt;code&gt;slave&lt;/code&gt;  节点。现在我们以这个场景进行创建集群的演示：&lt;/p&gt;
&lt;h3 id=&#34;运行集群节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行集群节点&#34;&gt;#&lt;/a&gt; 运行集群节点&lt;/h3&gt;
&lt;p&gt;首先我们必须让所有的在集群中工作的节点都支持以集群的模式运行。注意，此时不用单独配置主从复制的关系。 &lt;code&gt;redis&lt;/code&gt;  会自动为我们搭建主从复制关系。我们规定 6 个节点的端口分别为：7000，7001，7002，7003，7004，7005。那么每个节点的配置文件的内容如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;bind 0.0.0.0&lt;br&gt;daemonize yes&lt;br&gt;protected-mode no&lt;br&gt;port 7000 #端口自定&lt;br&gt;dir /usr/local/etc/redis #工作路径自定&lt;br&gt;logfile 7000.log #日志文件自定&lt;br&gt;pidfile 7000.pid #pid文件自定&lt;br&gt;appendonly yes&lt;br&gt;appendfilename &amp;quot;7000.aof&amp;quot; #aof文件前缀自定&lt;br&gt;masterauth 12345 #如果由密码，则必须配置该项，用于建立自从复制关系时的认证&lt;br&gt;requirepass 12345 #密码，可要可不要&lt;br&gt;&lt;br&gt;cluster-enabled yes&lt;br&gt;cluster-config-file node-7000.conf #集群配置文件自定&lt;br&gt;cluster-node-timeout 5000&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请确保每个节点都包含了属于该节点的配置文件。随后我们使用命令启动着 6 个节点：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-server /path/to/config.conf&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动完成后，你会在日志中发现下面这句话：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[82462] 26 Nov 11:56:55.329 * No cluster configuration found, I&amp;#x27;m 97a3a64667477371c4479320d683e4c8db5858b1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;ID&lt;/code&gt;  会在集群中被永久使用以代表唯一的实例名字。节点会使用  &lt;code&gt;ID&lt;/code&gt;  来记住其他节点。随后你会在工作目录下，看见新创建的集群配置文件。&lt;/p&gt;
&lt;h3 id=&#34;创建真正的集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建真正的集群&#34;&gt;#&lt;/a&gt; 创建真正的集群&lt;/h3&gt;
&lt;p&gt;现在我们已经有了正在运行的实例了，现在你可以使用以下的命令来创建你的集群：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster create &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; [ip:port....] --cluster-replicas 1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里使用的命令是 create，因为我们要创建一个新的集群。选项 --cluster-replicas 1 意味着我们希望为每个创建的主节点创建一个副本。其他参数是我想要用来创建新集群的实例的地址列表。&lt;/p&gt;
&lt;p&gt;redis-cli 将为一个配置提出建议。随机分配主从关系。输入 yes 接受建议的配置。集群将被配置并被加入。这意味着实例将被引导以相互通信。最后，如果一切顺利，您将看到如下消息：&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[OK]&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;All&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;16384&lt;/span&gt; slots covered&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你已经构建起三主三从的集群架构了。如果你这时候前往集群配置文件，你能观察到此时的配置文件已经被写入该集群的一些信息了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  之间通信的端口默认为，port + 10000。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;查看集群信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看集群信息&#34;&gt;#&lt;/a&gt; 查看集群信息&lt;/h4&gt;
&lt;p&gt;现在你可以查看你之前创建好地集群的信息。我们可以从端口为 7000 的这台实例入手，通过以下命令进入客户端并查看节点的信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; -p 7000&lt;br&gt;&lt;br&gt;127.0.0.1:7000&amp;gt; info replication&lt;br&gt;127.0.0.1:7000&amp;gt; cluster info&lt;br&gt;127.0.0.1:7000&amp;gt; cluster slots&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;读写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读写&#34;&gt;#&lt;/a&gt; 读写&lt;/h3&gt;
&lt;p&gt;现在进入某一个实例尝试读写吧。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;redis-cli -c -p 7000&lt;/span&gt;&lt;br&gt;redis 127.0.0.1:7000&amp;gt; set foo bar&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [12182] located at 127.0.0.1:7002&lt;/span&gt;&lt;br&gt;OK&lt;br&gt;redis 127.0.0.1:7002&amp;gt; set hello world&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [866] located at 127.0.0.1:7000&lt;/span&gt;&lt;br&gt;OK&lt;br&gt;redis 127.0.0.1:7000&amp;gt; get foo&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [12182] located at 127.0.0.1:7002&lt;/span&gt;&lt;br&gt;&amp;quot;bar&amp;quot;&lt;br&gt;redis 127.0.0.1:7002&amp;gt; get hello&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [866] located at 127.0.0.1:7000&lt;/span&gt;&lt;br&gt;&amp;quot;world&amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;  选项代表该客户端以集群模式连接服务端。你可能已经看见了上面结果的  &lt;code&gt;redirected&lt;/code&gt;  提示且观察到客户端连接到的服务端发生了变化。下面我们来介绍一下。该提示信息被称为 ——Moved 重定向错误。每当客户端的请求被某个节点接受后，会计算键的哈希槽，当判断该哈希槽不属于该节点，则会查找哈希槽和节点的映射集。然后回复客户端，让其重定向至指定的节点。&lt;/p&gt;
&lt;h3 id=&#34;重新分片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重新分片&#34;&gt;#&lt;/a&gt; 重新分片&lt;/h3&gt;
&lt;p&gt;这个操作将会让某一个节点的的分片被重新划分。让其他节点的部分哈希槽移动至该节点，使用如下的命令进行重新分片：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-clit -a &amp;lt;passowrd&amp;gt; --cluster reshard &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们以端口为 7000 的节点为例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster reshard 127.0.0.1:7000&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你只需要指定这个集群的单个节点， &lt;code&gt;redis&lt;/code&gt;  将会自动寻找剩余的节点。&lt;/p&gt;
&lt;p&gt;目前 redis-cli 只能在管理员支持下重新分片，你不能只是说将 5% 的槽从这个节点移动到另一个节点（但这实现起来非常简单）。所以它会一个问题开始。第一个问题是是您想要移动的哈希槽的个数：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;How many slots do you want to move (from 1 to 16384)?&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你确认后，会询问你接受这些哈希槽的   &lt;code&gt;master&lt;/code&gt;  节点 ID：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;What is the receiving node ID? &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你执行分片时，该集群中的所有节点包括 ID 等一切信息均以展示，所以你可以直接从上方查阅。&lt;/p&gt;
&lt;p&gt;当你确认后，会继续询问你哈希槽来源的 IDs。你有两个选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt; ：哈希槽来自于除该节点外的所有节点&lt;/li&gt;
&lt;li&gt;随着 node #1、node #2、node #3… 写入来源节点的 id，随后以  &lt;code&gt;done&lt;/code&gt;  结束输入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Please enter all the source node IDs.&lt;br&gt;  Type &amp;#x27;all&amp;#x27; to use all the nodes as source nodes for the hash slots.&lt;br&gt;  Type &amp;#x27;done&amp;#x27; once you entered all the source nodes IDs.&lt;br&gt;Source node #1: 2280954adfacc87e6f776bcb2684ea1be1b46567&lt;br&gt;Source node #2: done&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，会询问你是否执行重新分片：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Do you want to proceed with the proposed reshard plan (yes/no)?&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入 yes 即可开始重新分片&lt;/p&gt;
&lt;p&gt;分片完成成后可以使用如下的命令检查节点的健康状态：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster check &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新分片可以自动进行，无需以交互方式手动输入参数。这可以使用如下的命令行来实现：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli --cluster reshard &amp;lt;host&amp;gt;:&amp;lt;port&amp;gt; --cluster-from &amp;lt;node-id&amp;gt; --cluster-to &amp;lt;node-id&amp;gt; --cluster-slots &amp;lt;number of slots&amp;gt; --cluster-yes&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;故障转移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#故障转移&#34;&gt;#&lt;/a&gt; 故障转移&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  集群不用使用哨兵的支持则可以自动触发故障转移。现在，尝试使某一台  &lt;code&gt;master&lt;/code&gt;  宕机：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; -p &amp;lt;port&amp;gt; shutdown&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们使用，如下命令查看其中一个节点：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a 12345 -p 7001 cluster nodes&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现指定的那台节点已经宕机。但仍有三台  &lt;code&gt;master&lt;/code&gt;   节点。可以确定，从节点已经上位为主节点。&lt;/p&gt;
&lt;p&gt;现在让之前的主节点重新上线，仍然使用上面的命令可以发现，之前的宕机的主节点上线后变为从节点。&lt;/p&gt;
&lt;h4 id=&#34;手动故障转移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动故障转移&#34;&gt;#&lt;/a&gt; 手动故障转移&lt;/h4&gt;
&lt;p&gt;如果你想手动切换主从节点的状态，可以使用如下命令，进行手动的故障转移：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a 12345 -p 7000 cluster failover&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;添加新节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加新节点&#34;&gt;#&lt;/a&gt; 添加新节点&lt;/h3&gt;
&lt;p&gt;添加一个新的主节点非常简单，你只需要添加一个空的节点，并且移动一些哈希槽到这个新的主节点。而添加一个从节点只需要告诉这个节点以从节点的身份启动，就能添加一个从节点。&lt;/p&gt;
&lt;p&gt;下面我们从添加主节点开始。&lt;/p&gt;
&lt;h4 id=&#34;添加主节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加主节点&#34;&gt;#&lt;/a&gt; 添加主节点&lt;/h4&gt;
&lt;p&gt;我们以端口为 7006 的节点为例子。（注意，你之前已经创建了以 7000 到 7 005 端口的共六个节点的集群。）现在请确保你已经按照之前的步骤，创建了一个端口为 7006 的   &lt;code&gt;redis&lt;/code&gt;  配置文件。让我们启动他。&lt;/p&gt;
&lt;p&gt;当你启动完成后，你会发现该实例的集群配置文件只有它自己，是因为该节点还未加入原来的集群中，现在让我们使用下面的命令来加入他：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster add-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数代表着新加入集群的节点的套接字，第二个参数代表着集群中任意节点的套接字，用于标识新加入的节点加入的是哪个集群中。你只需要标识其中一个节点的套接字，其他的节点将会被自动寻找。&lt;/p&gt;
&lt;p&gt;现在你可以链接任何节点使用  &lt;code&gt;cluster nodes&lt;/code&gt;  查看节点状况。你会发现，新加入的节点默认为主节点。&lt;/p&gt;
&lt;h5 id=&#34;重新分片-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重新分片-2&#34;&gt;#&lt;/a&gt; 重新分片&lt;/h5&gt;
&lt;p&gt;当你将节点成功加入集群中后，该节点就能正确的将查询进行重定向，该新节点和其他的节点有如下的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该节点没有数据且没有被分配哈希槽&lt;/li&gt;
&lt;li&gt;因为该节点是没有分配哈希槽的主节点，所有该节点无法在从节点想提拔为主节点时参与选举&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以现在可以使用如下的命令进行重新分片：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;reids-cli -a &amp;lt;passowrd&amp;gt; --cluster reshard &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;添加从节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加从节点&#34;&gt;#&lt;/a&gt; 添加从节点&lt;/h4&gt;
&lt;p&gt;添加从节点有两种途径，一种是像之前我们添加主节点那样，但是在末尾添加一个   &lt;code&gt;--cluster-slave&lt;/code&gt;  参数：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster add-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; --cluster-slave&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用这个命令，我们并没有指定我们目标的主节点，所以  &lt;code&gt;redis-cli&lt;/code&gt;  会随机挑选一个主节点。但是如果你想明确指定一个目标主节点你可以使用如下的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster add-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; --cluster-slave --cluster-mster-id &amp;lt;id&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过指定目标主节点的 id，我们可以指定我们想要的目标主节点。&lt;/p&gt;
&lt;p&gt;另外的一种方式就是，你可以先添加一个空的主节点，然后让他变成某个主节点的从节点，我们以端口为 7006 的节点为例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:7006&amp;gt;cluster replicate &amp;lt;id&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数 id 为某个主节点的 id。执行完这个命令后即可让该节点变为指定主节点的从节点&lt;/p&gt;
&lt;h2 id=&#34;删除节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除节点&#34;&gt;#&lt;/a&gt; 删除节点&lt;/h2&gt;
&lt;p&gt;使用如下命令删除一个节点：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;passowrd&amp;gt; --cluster del-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;node-id&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数代表着集群中的一个节点，用于寻找集群中的其他节点。第二个参数时你想要删除的那个节点。&lt;/p&gt;
&lt;p&gt;你能使用这个命令删除主从节点，但是如果你想删除一个主节点，请确保这个主节点是空的。如果这个主节点不是空的，你需要在删除前将这个节点上的所有数据重新分片至其他的节点上。&lt;/p&gt;
&lt;p&gt;其他的删除主节点的替代方法就是你可以进行手动的故障转移，当这个节点转换为从节点后即可删除。但显然的，这个方法并不会帮你减少主节点的数量，所以当你想减少主节点的数量时，重新分片是必要的。&lt;/p&gt;
&lt;p&gt;还有一个特殊的方法当你想移除一个的宕机的节点时，你不应该使用   &lt;code&gt;del-node &lt;/code&gt;  命令因为他会尝试连接所有节点。所有你将会面对一个 —— &lt;code&gt;connection refused error&lt;/code&gt;  (连接拒绝错误)，相反的，你应该使用如下的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight vim&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs vim&#34;&gt;redis-cli --cluster &lt;span class=&#34;hljs-keyword&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;hljs-symbol&#34;&gt;&amp;lt;ip&amp;gt;&lt;/span&gt;:&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;lt;port&amp;gt;&lt;/span&gt; cluster forget &lt;span class=&#34;hljs-symbol&#34;&gt;&amp;lt;node-id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令将会在任何节点上执行  &lt;code&gt;cluster forget&lt;/code&gt;  命令&lt;/p&gt;
&lt;h2 id=&#34;hash-tag&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hash-tag&#34;&gt;#&lt;/a&gt; hash tag&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hash tag&lt;/code&gt;  用于将多个键分配至同一个哈希槽。这用于在集群中实现多键操作。&lt;/p&gt;
&lt;p&gt;为了实现  &lt;code&gt;hash tag&lt;/code&gt;  ，键的哈希槽和其他的键的计算在某种情况下有细微的差别。如果一个键包含一个  &lt;code&gt;&amp;quot;&amp;#123;...&amp;#125;&lt;/code&gt; &amp;quot; 那么只有  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  里的子串会被哈希，以获取哈希槽。但是也有可能会有大量的  &lt;code&gt;&amp;#123;&lt;/code&gt; 或} 出现。所以该算法被指定遵循以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键包含一个  &lt;code&gt;&amp;#123;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;并且有一个  &lt;code&gt;&amp;#125;&lt;/code&gt;  在  &lt;code&gt;&amp;#123;&lt;/code&gt;  右边&lt;/li&gt;
&lt;li&gt;有一个或多个字符在第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间字符串会被哈希。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个键，{user1000}.forllowing 和 {user1000}.forllowers 会被分配至一个哈希槽。因为只有唯一的字串 user1000 会被哈希&lt;/li&gt;
&lt;li&gt;键 foo {}{bar}，整个键会被哈希因为第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间没有字符&lt;/li&gt;
&lt;li&gt;键  &lt;code&gt;foo&amp;#123;&amp;#123;bar&amp;#125;&amp;#125;zap&lt;/code&gt;  的字串  &lt;code&gt;&amp;#123;bar&lt;/code&gt;  会被哈希，因为这是一个在第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间的字符子串&lt;/li&gt;
&lt;li&gt;键   &lt;code&gt;foo&amp;#123;bar&amp;#125;&amp;#123;zap&amp;#125;&lt;/code&gt;  的 子串  &lt;code&gt;bar&lt;/code&gt;  会被哈希&lt;/li&gt;
&lt;li&gt;如果键以  &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  开头，则保证它作为一个整体进行哈希处理。当使用二进制数据作为键名时这很有用&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.riversea.top/2024/03/10/docker/</guid>
            <title>docker</title>
            <link>https://blog.riversea.top/2024/03/10/docker/</link>
            <category>docker</category>
            <pubDate>Sun, 10 Mar 2024 13:07:52 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;什么是docker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是docker&#34;&gt;#&lt;/a&gt; 什么是 Docker&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;  提供了一个平台为开发，转交，测试，以及运行应用提供了便利，让应用从操作系统等底层环境中分离开，不再受底层环境的桎梏。 &lt;code&gt;docker&lt;/code&gt;  提供了一种名为 &lt;strong&gt;容器&lt;/strong&gt; 的特性，让应用的运行与打包，在一个隔离的环境中。&lt;/p&gt;
&lt;h1 id=&#34;容器container&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#容器container&#34;&gt;#&lt;/a&gt; 容器 (container)&lt;/h1&gt;
&lt;p&gt;容器是提供给代码运行的隔离的环境。这意味着容器对你的操作系统或者文件系统一无所知。容器提供了代码运行的所有必要的东西，像是软件运行的必要的环境、类库，甚至是最底层的操作系统。你可以将容器类比为集装箱 —— 事实上这也是  &lt;code&gt;docker&lt;/code&gt;  logo 的类比。容器就好似集装箱一样，所有的集装箱之间互不干扰。&lt;/p&gt;
&lt;h2 id=&#34;镜像image&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#镜像image&#34;&gt;#&lt;/a&gt; 镜像 (image)&lt;/h2&gt;
&lt;p&gt;镜像和容器的关系类似于类和对象的、程序和进程的关系。镜像在本地运行起来之后就是容器。镜像由开发人员所维护以及编写，镜像包括了代码运行的所有必要的环境。&lt;/p&gt;
&lt;h3 id=&#34;如何获得镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何获得镜像&#34;&gt;#&lt;/a&gt; 如何获得镜像&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt;  官方提供了一个镜像仓库 —— &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker hub&lt;/a&gt;，类似于  &lt;code&gt;Github&lt;/code&gt;  这样的代码托管平台，该镜像仓库托管了所有官方或者第三方提供的镜像。&lt;/p&gt;
&lt;img src=&#34;docker/docker_hub.png&#34; alt=&#34;docker hub&#34;/&gt;
&lt;p&gt;由于  &lt;code&gt;docker hub&lt;/code&gt;  是国外的，可以使用一些镜像仓库进行加速，例如阿里云、腾讯云。&lt;/p&gt;
&lt;p&gt;通过以下命令拉取镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker pull &amp;lt;image&amp;gt;:[tag] #如果不指定tag，tag将会是默认值：latest&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;某个版本的镜像由镜像名和 tag 进行指定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;查看本地镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看本地镜像&#34;&gt;#&lt;/a&gt; 查看本地镜像&lt;/h2&gt;
&lt;p&gt;查看本地的所有镜像：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker images&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看某个镜像的详细信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker image inspect &amp;lt;image-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;删除本地镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除本地镜像&#34;&gt;#&lt;/a&gt; 删除本地镜像&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker rmi &amp;lt;image-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;运行容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行容器&#34;&gt;#&lt;/a&gt; 运行容器&lt;/h2&gt;
&lt;p&gt;如何将镜像运行起来？ &lt;code&gt;docker&lt;/code&gt;  提供了一个子命令，来将镜像运行为容器。：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker run&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;如果该镜像本地没有，则会进行远程拉取&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假设现在我们有一个名为： &lt;code&gt;mysql&lt;/code&gt;  的镜像，我们来演示如何运行它：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker run -d|--detach #-d参数代表后台运行，并打印容器Id，如果不加这个参数，那么执行这个命令后，你的命令行会卡住，无法输入命令&lt;br&gt;--name mysql #--name，为该容器分配一个名字&lt;br&gt;-p|--publish 3306:3306 #-p为该容器分配一个端口映射，由于外部无法直接访问容器内部，因此需要进行端口映射。代表着宿主机的3306端口映射到容器的3306端口&lt;br&gt;-e|--env TZ=Asia/Shanghai #-e为容器写入环境变量，前面提到容器本事其实就算一个操作系统，所以理应由环境变量，该环境变量由容器中的容器读写&lt;br&gt;-e MYSQL_ROOT_PASSWORD=123&lt;br&gt;mysql #镜像名&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;好了，当你按下回车的那一刻，一个名为  &lt;code&gt;mysql&lt;/code&gt;  的容器就开始创建了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;环境变量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#环境变量&#34;&gt;#&lt;/a&gt; 环境变量&lt;/h3&gt;
&lt;p&gt;你可能想问，我怎么知道有哪些环境变量我可以使用。其实，每个镜像都配备了官方文档，你可以在上面寻找官方提供的环境变量，在&lt;a href=&#34;https://hub.docker.com/&#34;&gt; Docker hub&lt;/a&gt; 上面搜索  &lt;code&gt;mysql&lt;/code&gt;  找到最高  &lt;code&gt;star&lt;/code&gt;  的那个镜像：&lt;/p&gt;
&lt;img src=&#34;docker/mysql.png&#34; alt=&#34;mysql镜像&#34;/&gt;
&lt;p&gt;点进去，持续往下翻，直到你看到：&lt;/p&gt;
&lt;img src=&#34;docker/mysql_doc.png&#34; alt=&#34;mysql镜像&#34;/&gt;
&lt;p&gt;现在你就知道了官方给我们提供了哪些环境变量。如图， &lt;code&gt;MYSQL_ROOT_PASSWORD&lt;/code&gt;  代表着数据库的密码&lt;/p&gt;
&lt;h2 id=&#34;如何查看运行的容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何查看运行的容器&#34;&gt;#&lt;/a&gt; 如何查看运行的容器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;  提供了一个子命令，用于查看运行的容器：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker ps &amp;lt;container&amp;gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大概样式如下：&lt;/p&gt;
&lt;img src=&#34;docker/docker_ps.png&#34; alt=&#34;运行中的容器&#34;/&gt;
&lt;h2 id=&#34;启动-停止-删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#启动-停止-删除&#34;&gt;#&lt;/a&gt; 启动、停止、删除&lt;/h2&gt;
&lt;p&gt;如果你想暂停一个容器，那么只需要使用如下命令，即可暂停容器：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker stop &amp;lt;container-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，即使你暂停了容器，该容器任然存在，只是没有在运行了而已&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果此时你想重新启动这个容器，那么使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker start &amp;lt;container-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，不要使用  &lt;code&gt;docker run&lt;/code&gt;  因为，该命令总是新创建一个容器，而不是启动原来的容器，请注意与  &lt;code&gt;docker start&lt;/code&gt;  的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你想删除一个容器，那么运行下面的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker rm &amp;lt;container-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果此时你的容器正在运行，那么依靠上面的命令你是无法删除的，使用如下命令进行强制删除：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;docker rm &amp;lt;container-name&amp;gt; -f&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;数据卷volume&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据卷volume&#34;&gt;#&lt;/a&gt; 数据卷 (volume)&lt;/h1&gt;
&lt;h2 id=&#34;如何进入容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何进入容器&#34;&gt;#&lt;/a&gt; 如何进入容器&lt;/h2&gt;
&lt;p&gt;之前提到容器相当于操作系统，每个操作系统都有它自己的文件系统，所以如何进入到容器内部操纵里面的文件呢？&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;docker&lt;/code&gt;  提供的如下子命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker exec&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令会在容器内部运行你提供的命令，该命令会运行在默认的目录下，且必须保证命令是可执行，链式的或者引用的命令是无法执行的，例如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该命令可以执行:  &lt;code&gt;docker exec -it my_container sh -c &amp;quot;echo a &amp;amp;&amp;amp; echo b&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;该命令不可以执行:  &lt;code&gt;docker exec -it my_container &amp;quot;echo a &amp;amp;&amp;amp; echo b&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用如下命令进入容器内部：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker exec -it &amp;lt;container-name&amp;gt; bash&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;回车后你会发现，主机名改变了，使用  &lt;code&gt;ls&lt;/code&gt;  命令，你将会看到如  &lt;code&gt;linux&lt;/code&gt;  一般的文件系统。&lt;/p&gt;
&lt;p&gt;此时你可能会迫不及待，打算执行一些操作，于是你新创建一个名为  &lt;code&gt;test&lt;/code&gt;  的文件，然后尝试用  &lt;code&gt;vi&lt;/code&gt;  命令进行编辑，可是当你执行过后会发现， &lt;code&gt;vi&lt;/code&gt;  命令找不到。这是怎么回事呢？明明容器就如操作系统一样，应该也会包含所有的命令的啊。&lt;/p&gt;
&lt;p&gt;结论是：镜像所创建的环境仅仅会包含和镜像应用有关的命令，所有不会包含所有的命令。所有，你在有关  &lt;code&gt;mysql&lt;/code&gt;  的容器中使用  &lt;code&gt;mysql&lt;/code&gt;  命令会成功，而你在不包含  &lt;code&gt;mysql&lt;/code&gt;  的容器中使用，则会失败。&lt;/p&gt;
&lt;h2 id=&#34;和容器进行连接&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#和容器进行连接&#34;&gt;#&lt;/a&gt; 和容器进行连接&lt;/h2&gt;
&lt;p&gt;如果有些命令无法使用，拿我想修改容器中的数据的时候该怎么办？  &lt;code&gt;docker&lt;/code&gt;  提供了一个特性 —— 数据卷，来帮助我们完成这个操作。&lt;/p&gt;
&lt;p&gt;什么是数据卷？在操作系统中，万物皆文件，数据卷就是挂载载文件系统上的设备。像物理机上的硬盘就是数据卷。当然在  &lt;code&gt;docker&lt;/code&gt;  中数据卷只是逻辑的。&lt;/p&gt;
&lt;p&gt;所以，该如何使用这个数据卷呢？相信你一定使用过  &lt;code&gt;u盘&lt;/code&gt;  ，当你插上  &lt;code&gt;u盘&lt;/code&gt;  后，你的文件系统就会将这个  &lt;code&gt;u盘&lt;/code&gt;  挂载到文件系统上，你就能通过文件的形式访问  &lt;code&gt;u盘&lt;/code&gt;  的数据。&lt;/p&gt;
&lt;p&gt;所以我们要做的就是，将  &lt;code&gt;docker&lt;/code&gt;  容器中的文件看成  &lt;code&gt;u 盘&lt;/code&gt;  将其挂载到我们的宿主机的文件系统上，然后就能通过宿主机修改容器的数据。这就是数据卷的作用。那么我们该如何使用？&lt;/p&gt;
&lt;h2 id=&#34;挂载数据卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#挂载数据卷&#34;&gt;#&lt;/a&gt; 挂载数据卷&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数据卷只能在运行容器时进行挂载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在运行  &lt;code&gt;docker run&lt;/code&gt;  时只需要添加一个选项即可，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker run -d|--detach #-d参数代表后台运行，并打印容器Id，如果不加这个参数，那么执行这个命令后，你的命令行会卡住，无法输入命令&lt;br&gt;--name mysql #--name，为该容器分配一个名字&lt;br&gt;-p|--publish 3306:3306 #-p为该容器分配一个端口映射，由于外部无法直接访问容器内部，因此需要进行端口映射。代表着宿主机的3306端口映射到容器的3306端口&lt;br&gt;-e|--env TZ=Asia/Shanghai #-e为容器写入环境变量，前面提到容器本事其实就算一个操作系统，所以理应由环境变量，该环境变量由容器中的容器读写&lt;br&gt;-e MYSQL_ROOT_PASSWORD=123 &lt;br&gt;-v source:/var/lib/mysql #将名为source的数据卷与/var/lib/mysql相映射&lt;br&gt;mysql #镜像名&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;数据卷默认存放在： &lt;code&gt;/var/lib/docker/volumes/&amp;lt;volume-name&amp;gt;/_data&lt;/code&gt;  目录下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在你就能在： &lt;code&gt;/var/lib/docker/volumes/source/_data&lt;/code&gt;  下看到你挂载的数据卷了，里面包含了容器中  &lt;code&gt;/var/lib/mysql&lt;/code&gt;  目录下的所有的文件&lt;/p&gt;
&lt;p&gt;当然你也可以运行以下命令来提前创建一个数据卷：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker volume create [volume-name]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你不指定数据卷的名字，那么会使用一段  &lt;code&gt;hash&lt;/code&gt;  值来作为数据卷的名字。现在，请前往之前所说的那个目录下，你已经能看到这个数据卷了。当然，数据卷下面并没有任何数据，因为你没有进行挂载。然后你可以在运行容器时使用该数据卷的名字进行挂载。&lt;/p&gt;
&lt;h3 id=&#34;自定义数据卷位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义数据卷位置&#34;&gt;#&lt;/a&gt; 自定义数据卷位置&lt;/h3&gt;
&lt;p&gt;如果你不想让数据卷放在默认位置下，你可以在运行容器时指定目录：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker run -dp 80:80 &lt;br&gt;--name docker-demo&lt;br&gt;-v /root:/var/lib/nginx #我们在root目录下进行挂载&lt;br&gt;docker-demo &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前外  &lt;code&gt;/root&lt;/code&gt;  目录下，你就能看到这个数据卷&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意自定义目录必须要以绝对路径起首，不然会被默认为默认数据卷&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;查看数据卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看数据卷&#34;&gt;#&lt;/a&gt; 查看数据卷&lt;/h2&gt;
&lt;p&gt;你可以使用，如下命令查看所有的数据卷：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker volume ls&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想查看某个数据卷的详细信息，可以使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker volume inspect &amp;lt;volume-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;网络network&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络network&#34;&gt;#&lt;/a&gt; 网络 (network)&lt;/h1&gt;
&lt;p&gt;现在让我考考你一个问题。如果现在有两个容器，一个是数据库，一个是服务器，服务器想要访问数据库怎么办呢。前面说到，容器是一个个隔离的环境，如何才能让容器之间通信呢？&lt;/p&gt;
&lt;p&gt;容器作为操作系统，当然有自己的&lt;strong&gt;网络&lt;/strong&gt;。 &lt;code&gt;docker&lt;/code&gt;  在运行的时候会初始化一张虚拟网卡，现在前往你的宿主机尝试一下  &lt;code&gt;ip addr&lt;/code&gt;  命令，如果你的  &lt;code&gt;docker&lt;/code&gt;  在运行中，不出意外你将会看到：&lt;/p&gt;
&lt;img src=&#34;docker/net_adapter.png&#34; alt=&#34;docker的虚拟网卡&#34;/&gt;
&lt;p&gt;这就是  &lt;code&gt;docker&lt;/code&gt;  生成的虚拟网卡。意味着容器本身之间也能进行&lt;strong&gt;通信&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;使用默认的网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用默认的网络&#34;&gt;#&lt;/a&gt; 使用默认的网络&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;  会初始化一个  &lt;code&gt;docker0&lt;/code&gt;  的网卡，分配一个名为  &lt;code&gt;bridge&lt;/code&gt;  的默认网段。所有启动的容器将会默认使用这个网段，并分配一个  &lt;code&gt;ip&lt;/code&gt;  地址，但 &lt;code&gt;docker&lt;/code&gt;  官方并不推荐使用默认的网络，而是推荐 —— 自定义网络&lt;/p&gt;
&lt;h2 id=&#34;自定义网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义网络&#34;&gt;#&lt;/a&gt; 自定义网络&lt;/h2&gt;
&lt;p&gt;在  &lt;code&gt;docker&lt;/code&gt;  中只有同一网段的&lt;strong&gt;容器&lt;/strong&gt;才能互相通信。你可以创建自定义的&lt;strong&gt;网络&lt;/strong&gt;，然后将容器连接到这个自定义的网络上，一旦容器连接到同一个网络上，容器中间就能通过  &lt;code&gt;ip&lt;/code&gt;  地址或者容器名进行通信。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt;  提供了用于创建网络的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker network create &amp;lt;network-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该令会创建一个默认基于  &lt;code&gt;driver&lt;/code&gt;  网卡的网络，该网络会被分配一个网段。&lt;/p&gt;
&lt;h2 id=&#34;连接网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接网络&#34;&gt;#&lt;/a&gt; 连接网络&lt;/h2&gt;
&lt;p&gt;现在你可以在运行容器的时候，连接指定的网络：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker run -d|--detach #-d参数代表后台运行，并打印容器Id，如果不加这个参数，那么执行这个命令后，你的命令行会卡住，无法输入命令&lt;br&gt;--name mysql #--name，为该容器分配一个名字&lt;br&gt;-p|--publish 3306:3306 #-p为该容器分配一个端口映射，由于外部无法直接访问容器内部，因此需要进行端口映射。代表着宿主机的3306端口映射到容器的3306端口&lt;br&gt;-e|--env TZ=Asia/Shanghai #-e为容器写入环境变量，前面提到容器本事其实就算一个操作系统，所以理应由环境变量，该环境变量由容器中的容器读写&lt;br&gt;-e MYSQL_ROOT_PASSWORD=123 &lt;br&gt;--network=&amp;lt;network-name&amp;gt;&lt;br&gt;mysql #镜像名&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦你运行这个容器，该容器会加入这个网络，并分配一个  &lt;code&gt;ip&lt;/code&gt;  地址&lt;/p&gt;
&lt;p&gt;或者你可以为一个已经运行的容器连接网络：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;docker network connet &amp;lt;network-name&amp;gt; &amp;lt;container-name&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;层layer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#层layer&#34;&gt;#&lt;/a&gt; 层 (layer)&lt;/h1&gt;
&lt;p&gt;了解完上述概念，相信你已经能运行一个自己的容器了。&lt;/p&gt;
&lt;p&gt;现在让我们来思考一个问题：如果我们拉取两个镜像 —— 一个是只有操作系统的镜像，另外一个是建立在该操作系统上的  &lt;code&gt;jre&lt;/code&gt;  镜像。那么，拉取完操作系统镜像后，并在拉取  &lt;code&gt;jre&lt;/code&gt;  镜像时会再继续拉取一个包含操作系统的  &lt;code&gt;jre&lt;/code&gt;  环境吗？&lt;/p&gt;
&lt;p&gt;答案是不会的，这就涉及到了  &lt;code&gt;docker&lt;/code&gt;  的一个重要概念 —— &lt;strong&gt;层 (layer)&lt;/strong&gt;。 &lt;code&gt;docker&lt;/code&gt;  将容器成了多个层，层与层之间能够复用。如果两个镜像包含了相同的层，那么相同的层将不会进行重复拉取而是复用，这就增加了镜像的复用性，减少了镜像的空间大小。每个镜像都可以建立在某个层上，对某个层进行扩展和补充形成新的层。&lt;/p&gt;
&lt;p&gt;我们把那些提供基础环境的层叫做：基础镜像&lt;/p&gt;
&lt;h1 id=&#34;自定义镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义镜像&#34;&gt;#&lt;/a&gt; 自定义镜像&lt;/h1&gt;
&lt;p&gt;使用  &lt;code&gt;dcoker&lt;/code&gt;  我们可以自定义镜像，但我们不用去实现镜像的细节，我们只需要告诉  &lt;code&gt;docker&lt;/code&gt;  这个镜像需要什么，然后  &lt;code&gt;docker&lt;/code&gt;  帮我们组装这个镜像。那么，我们如何告诉  &lt;code&gt;docker&lt;/code&gt;  我们需要什么呢？ &lt;code&gt;docker&lt;/code&gt;  提供了一个文件 ——  &lt;code&gt;Dockerfile&lt;/code&gt;  来让我们编写自定义镜像的细节。&lt;/p&gt;
&lt;h2 id=&#34;编写dockerfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写dockerfile&#34;&gt;#&lt;/a&gt; 编写 Dockerfile&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;  常用的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;FROM #用于设置容器的基础镜像，用于应用运行的基础环境&lt;br&gt;WORKDIR &amp;lt;path&amp;gt; #容器的工作目录，当你进入容器的文件系统后，默认为该目录&lt;br&gt;COPY &amp;lt;src&amp;gt; &amp;lt;target&amp;gt;  #将宿主机的文件拷贝至容器的目录下&lt;br&gt;RUN #在构建镜像时执行一些命令&lt;br&gt;EXPOSE #暴露的端口，通知Docker监听的端口&lt;br&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] #在容器运行后执行&lt;br&gt;ENV key=value... #添加环境变量&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;cmd&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cmd&#34;&gt;#&lt;/a&gt; CMD&lt;/h2&gt;
&lt;p&gt;当你运行时容器，会执行  &lt;code&gt;CMD&lt;/code&gt;  给出的指令，公有三种形式：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;CMD [&amp;quot;executable&amp;quot;,&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] #executable形式：executable是执行的命令，param时给命令的参数&lt;br&gt;CMD [&amp;quot;param1&amp;quot;,&amp;quot;param2&amp;quot;] #param会传递给ENTRYPOINT&lt;br&gt;CMD command param1 param2 (shell form) #shell形式，默认用shell命令，shell类型默认为sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;只能存在一条  &lt;code&gt;CMD&lt;/code&gt;  语句，如果存在多条，只使用最后一条语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;entrypoint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#entrypoint&#34;&gt;#&lt;/a&gt; ENTRYPOINT&lt;/h2&gt;
&lt;p&gt;与  &lt;code&gt;CMD&lt;/code&gt;  类似，共有两种形式：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;ENTRYPOINT [&amp;quot;executable&amp;quot;, &amp;quot;param1&amp;quot;, &amp;quot;param2&amp;quot;] #executable形式：executable是执行的命令，param时给命令的参数&lt;br&gt;ENTRYPOINT command param1 param2  #shell形式，默认用设定的shell类型去执行，shell类型默认为sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;只能存在一条  &lt;code&gt;ENTRYPOINT&lt;/code&gt;  语句，如果存在多条，只使用最后一条语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt;  与  &lt;code&gt;ENTRYPOINT&lt;/code&gt;  不同之处在于， &lt;code&gt;ENTRYPOINT&lt;/code&gt;  不可以被  &lt;code&gt;docker run&lt;/code&gt;  后的参数覆盖，会把  &lt;code&gt;docker run&lt;/code&gt;  后面的参数传递给  &lt;code&gt;ENTRYPOINT&lt;/code&gt;  指定的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下为实例：&lt;/p&gt;
&lt;figure class=&#34;highlight dockerfile&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs dockerfile&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;FROM&lt;/span&gt; node:&lt;span class=&#34;hljs-number&#34;&gt;18&lt;/span&gt;-alpine &lt;span class=&#34;hljs-comment&#34;&gt;#dockerfile开头通常为FROM以引入基础环境&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;WORKDIR&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; /app &lt;span class=&#34;hljs-comment&#34;&gt;#设置工作路径 /app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; package*.json ./ &lt;span class=&#34;hljs-comment&#34;&gt;#拷贝待用package的json文件至 /app 下面&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; ./src ./src &lt;span class=&#34;hljs-comment&#34;&gt;#仍然时拷贝&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;COPY&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; ./public ./public&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;RUN&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; npm install \ &lt;span class=&#34;hljs-comment&#34;&gt;#运行命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;    &amp;amp;&amp;amp; npm install -g serve \&lt;br&gt;    &amp;amp;&amp;amp; npm &lt;span class=&#34;hljs-keyword&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; build \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-bash&#34;&gt;    &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;rm&lt;/span&gt; -fr node_modules&lt;/span&gt;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;EXPOSE&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3000&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#暴露端口&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;CMD&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt; [ &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;serve&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-s&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;build&amp;quot;&lt;/span&gt; ] &lt;span class=&#34;hljs-comment&#34;&gt;#容器运行时执行命令&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.riversea.top/2024/02/21/spring/</guid>
            <title>Spring</title>
            <link>https://blog.riversea.top/2024/02/21/spring/</link>
            <category>spring</category>
            <pubDate>Wed, 21 Feb 2024 13:47:16 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;引入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入&#34;&gt;#&lt;/a&gt; 引入&lt;/h1&gt;
&lt;p&gt;考虑下面一个模拟保存用户的 &lt;code&gt;MVC&lt;/code&gt;  程序：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//dao层&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserDao&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDaoForMysqlImpl&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserDao&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;正在保存user for mysql&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//service层&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserService&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserService&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;IUserDao&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userDao&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDaoForMysqlImpl&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        userDao.saveUser();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//controller层&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Controller&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;IUserService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userService&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserServiceImpl&lt;/span&gt;();&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;        userService.saveUser();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight crmsh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs crmsh&#34;&gt;正在保存&lt;span class=&#34;hljs-keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;for&lt;/span&gt; mysql&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果看起来完美无缺，能够正常保存，于是你正常上线。但某一天客户突然要求你更换数据库为  &lt;code&gt;Oracle&lt;/code&gt;  而不是  &lt;code&gt;Mysql&lt;/code&gt; ，你可能会想那好办，我再写一个  &lt;code&gt;UserDaoForOracleImpl&lt;/code&gt;  就好了呗。于是你马不停蹄地写出了这个给类，然后一一更改每一层的依赖…&lt;/p&gt;
&lt;p&gt;这样的操作以及源代码有什么问题？&lt;/p&gt;
&lt;p&gt;由&lt;strong&gt; OCP 原则&lt;/strong&gt;可知：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，我们应当采用扩展。对源代码的修改显然已经破坏了这个原则。&lt;/p&gt;
&lt;p&gt;由&lt;strong&gt; DIP 原则&lt;/strong&gt;可知：高层模块不应该依赖于下层模块的细节，也就是不应该在程序中出现下层模块的实例，换句话说也就是面向接口开发。源代码中高层对底层的依赖显然也违背了这个原则。&lt;/p&gt;
&lt;p&gt;由于高层实例和下层实例的强耦合，导致每做出一次更新，就要修改源代码，也就导致每次更新都要重新对以往的代码进行测试。&lt;/p&gt;
&lt;p&gt;争对以上所述情况，出现了一个新型的解决方案： &lt;code&gt;IOC&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开闭原则 (&lt;font color=&#34;red&#34;&gt;O&lt;/font&gt;pen &lt;font color=&#34;red&#34;&gt;C&lt;/font&gt;lose &lt;font color=&#34;red&#34;&gt;P&lt;/font&gt;rinciple OCP)&lt;/strong&gt; ：软件实体应当对扩展开放，对修改关闭。&lt;/p&gt;
&lt;p&gt;Software entities should be open for extension，but closed for modification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;依赖倒置原则 (&lt;font color=&#34;red&#34;&gt;D&lt;/font&gt;ependency &lt;font color=&#34;red&#34;&gt;I&lt;/font&gt;version &lt;font color=&#34;red&#34;&gt;P&lt;/font&gt;rinciple DIP)&lt;/strong&gt; ：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。&lt;/p&gt;
&lt;p&gt;High level modules shouldn’t depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;ioc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ioc&#34;&gt;#&lt;/a&gt; IoC&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;控制反转 (nversion &lt;font color=&#34;red&#34;&gt;o&lt;/font&gt;f &lt;font color=&#34;red&#34;&gt;C&lt;/font&gt;ontrol IoC)&lt;/strong&gt; ：通过使用直接构建类或诸如服务定位模式的机制来控制其依赖关系的实例化或位置的逆过程。以上为&lt;a href=&#34;https://docs.Spring.io/Spring-framework/reference/core/beans/introduction.html&#34;&gt; Spring 官方&lt;/a&gt;的解释。&lt;/p&gt;
&lt;p&gt;可能不太好懂，可以换作通俗的话来解释。也就是解释反转是什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不在程序中采用硬编码的方式来  &lt;code&gt;new&lt;/code&gt;  对象，也就是说&lt;strong&gt;创造对象的权力&lt;/strong&gt;被我反转出去了。&lt;/li&gt;
&lt;li&gt;不在程序中自己解决对象之间的依赖问题，也就是说&lt;strong&gt;依赖关系的维护权&lt;/strong&gt;被我反转出去了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Ioc&lt;/code&gt;  是种思想，不是某种具体的解决措施。  &lt;code&gt;Ioc&lt;/code&gt;  有很多种实现方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架 (容器) 为我们提供了  &lt;code&gt;Ioc&lt;/code&gt;  的一种具体的解决办法也就是&lt;strong&gt;依赖注入 (&lt;font color=&#34;red&#34;&gt;D&lt;/font&gt;ependency &lt;font color=&#34;red&#34;&gt;I&lt;/font&gt;njection DI)&lt;/strong&gt; 。也就是说我们能通过&lt;strong&gt;依赖注入&lt;/strong&gt;来实现&lt;strong&gt;控制反转&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;依赖注入  &lt;code&gt;DI&lt;/code&gt;  的两种注入方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造器注入：通过构造器注入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;  注入：通过  &lt;code&gt;set&lt;/code&gt;  方法注入&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;依赖：A 和 B 之间的关系&lt;/p&gt;
&lt;p&gt;注入：创造 A 和 B 之间的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第一个spring程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一个spring程序&#34;&gt;#&lt;/a&gt; 第一个 Spring 程序&lt;/h2&gt;
&lt;h3 id=&#34;获取配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取配置文件&#34;&gt;#&lt;/a&gt; 获取配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架称呼被  &lt;code&gt;Ioc&lt;/code&gt;  管理的对象为  &lt;code&gt;bean&lt;/code&gt; 。 &lt;code&gt;Spring&lt;/code&gt;  通过  &lt;code&gt;xml&lt;/code&gt;  配置文件来进行相关配置，同时&lt;strong&gt;对配置文件的命名不做要求&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;   bean标签为bean对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;   id：代表bean对象的唯一标识，不能重复。否则会抛出BeanDefinitionParsingException bean定义解析错误&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;   class：实例对象的全类名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.demo.bens.UserBean&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;获取ioc容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取ioc容器&#34;&gt;#&lt;/a&gt; 获取 IoC 容器&lt;/h3&gt;
&lt;p&gt;配置完成配置文件后，紧接着就要通过解析配置文件获取  &lt;code&gt;IOC&lt;/code&gt;  容器，在  &lt;code&gt;Spring&lt;/code&gt;  中  &lt;code&gt;ApplicationContext&lt;/code&gt;  接口即为  &lt;code&gt;IoC&lt;/code&gt;  容器&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//在类路径中查找配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ioc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Spring.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//在本地查找配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ioc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileSystemXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;path/to/xml&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//初始化Ioc容器时支持多个配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//ApplicationContext ioc = new ClassPathXmlApplicationContext(&amp;quot;asd.xml&amp;quot;,&amp;quot;asad.xml&amp;quot;,&amp;quot;asdaa.xml&amp;quot;....);&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;在获取  &lt;code&gt;IoC&lt;/code&gt;  容器时，就会实例化那些单例的  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;  继承自  &lt;code&gt;BeanFactory&lt;/code&gt; ，实际上也就是  &lt;code&gt;bean&lt;/code&gt;  工厂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;获取bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取bean&#34;&gt;#&lt;/a&gt; 获取 bean&lt;/h3&gt;
&lt;p&gt;获得  &lt;code&gt;Ioc&lt;/code&gt;  容器后，我们就可以获取容器里面锁创造的  &lt;code&gt;bean&lt;/code&gt;  了， &lt;code&gt;Spring&lt;/code&gt;  提供了三种获取  &lt;code&gt;bean&lt;/code&gt;  的重载方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userBean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userBean&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;UserBean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userBean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userBean&amp;quot;&lt;/span&gt;,UserBean.class);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;UserBean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userBean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(UserBean.Class);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架通过反射机制和工厂模式来创造  &lt;code&gt;bean&lt;/code&gt;  。也就是：首先解析  &lt;code&gt;XML&lt;/code&gt;  文件，获取类路径，其次通过工厂模式利用反射通过类路径创建对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  默认使用空构造方法创建对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  底层使用一个  &lt;code&gt;map&lt;/code&gt;  集合来管理对象和  &lt;code&gt;id&lt;/code&gt;  之间的关系， &lt;code&gt;getBean&lt;/code&gt;  方法实际上是就是通过键获取值。&lt;/p&gt;
&lt;p&gt;当获取  &lt;code&gt;bean&lt;/code&gt;  时，如果指定的 &lt;code&gt;id&lt;/code&gt;  或者类型不存在，那么将会抛出  &lt;code&gt;NoSuchBeanDefinitionException&lt;/code&gt;  没有该  &lt;code&gt;bean&lt;/code&gt;  定义异常&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;spring对ioc的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对ioc的实现&#34;&gt;#&lt;/a&gt; Spring 对 IOC 的实现&lt;/h2&gt;
&lt;h3 id=&#34;依赖注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依赖注入&#34;&gt;#&lt;/a&gt; 依赖注入&lt;/h3&gt;
&lt;p&gt;解决对象之间的依赖问题。&lt;/p&gt;
&lt;h4 id=&#34;set注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set注入&#34;&gt;#&lt;/a&gt; set 注入&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;  注入，基于  &lt;code&gt;set&lt;/code&gt;  方法实现的，底层会通过反射机制调用属性对应的  &lt;code&gt;set&lt;/code&gt;  方法然后给属性赋值。这种方式要求属性必须对外提供  &lt;code&gt;set&lt;/code&gt;  方法：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.UserService&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		property标签：代表通过set的方式注入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		name：代表对应属性。注意，该属性不是指的属性名，而是setter方法，去掉set以及首字母小写之后的属性。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		ref：引用类型。ref填入的时其他bean的id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		value：普通的字面量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		--&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;set 注入底层通过反射获取的 setter 方法，所以 name 属性必须是 setter 方法去掉 set 以及首字母小写之后的名字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;构造器注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造器注入&#34;&gt;#&lt;/a&gt; 构造器注入&lt;/h4&gt;
&lt;p&gt;核心原理：通过调用构造方法来给属性赋值。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;customService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.CustomService&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	constructor-arg：代表通过构造器注入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	index：构造器中的参数位置，默认以0开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	name：参数名字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	type：参数类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	value和ref与set注入同&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;constructor-arg&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;index&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;constructor-arg&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;constructor-arg&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;不指定  &lt;code&gt;index&lt;/code&gt;  、 &lt;code&gt;name&lt;/code&gt;  和  &lt;code&gt;type&lt;/code&gt;  的话， &lt;code&gt;Spring&lt;/code&gt;  也能猜出来该赋值给谁。注意此方法也是使用的  &lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;两种注入方式的实际不同：一个是实例化后注入，一个是实例的时候就注入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;set注入专题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set注入专题&#34;&gt;#&lt;/a&gt; set 注入专题&lt;/h3&gt;
&lt;h4 id=&#34;注入外部bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入外部bean&#34;&gt;#&lt;/a&gt; 注入外部 Bean&lt;/h4&gt;
&lt;p&gt;引用的是在  &lt;code&gt;bean&lt;/code&gt;  外面定义的  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDaoBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.OrderDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDaoBean&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入内部bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入内部bean&#34;&gt;#&lt;/a&gt; 注入内部 bean&lt;/h4&gt;
&lt;p&gt;在  &lt;code&gt;bean&lt;/code&gt;  标签中嵌套  &lt;code&gt;bean&lt;/code&gt;  标签。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderServiceInner&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.OrderDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入简单类型&#34;&gt;#&lt;/a&gt; 注入简单类型&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  认为的简单类型：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;isSimpleValueType&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Class&amp;lt;?&amp;gt; type)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (!isVoidType(type) &amp;amp;&amp;amp;&lt;br&gt;            (isPrimitiveOrWrapper(type) || &lt;span class=&#34;hljs-comment&#34;&gt;//基本类型和包装类型&lt;/span&gt;&lt;br&gt;             Enum.class.isAssignableFrom(type) || &lt;span class=&#34;hljs-comment&#34;&gt;//枚举类型&lt;/span&gt;&lt;br&gt;             CharSequence.class.isAssignableFrom(type) || &lt;br&gt;             Number.class.isAssignableFrom(type) ||&lt;br&gt;             Date.class.isAssignableFrom(type) || &lt;span class=&#34;hljs-comment&#34;&gt;//日期&lt;/span&gt;&lt;br&gt;             Temporal.class.isAssignableFrom(type) || &lt;br&gt;             ZoneId.class.isAssignableFrom(type) ||&lt;br&gt;             TimeZone.class.isAssignableFrom(type) ||&lt;br&gt;             File.class.isAssignableFrom(type) ||&lt;br&gt;             Path.class.isAssignableFrom(type) ||&lt;br&gt;             Charset.class.isAssignableFrom(type) ||&lt;br&gt;             Currency.class.isAssignableFrom(type) ||&lt;br&gt;             InetAddress.class.isAssignableFrom(type) ||&lt;br&gt;             URI.class == type ||&lt;br&gt;             URL.class == type ||&lt;br&gt;             UUID.class == type ||&lt;br&gt;             Locale.class == type ||&lt;br&gt;             Pattern.class == type ||&lt;br&gt;             Class.class == type));&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注入简单类型形如如下形式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderServiceInner&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;当把日期当作简单类型注入时必须考虑注入的格式，要必须完全符合日期格式才能成功注入，如下所示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Thu Feb 22 10:53:41 CST 2024&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;date1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2024/2/22 20:20:20&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;级联属性赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#级联属性赋值&#34;&gt;#&lt;/a&gt; 级联属性赋值&lt;/h4&gt;
&lt;p&gt;引用外部  &lt;code&gt;bean&lt;/code&gt;  后，对外部  &lt;code&gt;bean&lt;/code&gt;  的属性赋值&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Clazz&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjj&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz.name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;软件1班&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入数组&#34;&gt;#&lt;/a&gt; 注入数组&lt;/h4&gt;
&lt;p&gt;在注入时使用标签： &lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单类型&#34;&gt;#&lt;/a&gt; 简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjj&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;employee&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Employee&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入list集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入list集合&#34;&gt;#&lt;/a&gt; 注入 list 集合&lt;/h4&gt;
&lt;p&gt;在注入时使用标签： &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;是简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#是简单类型&#34;&gt;#&lt;/a&gt; 是简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjj&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型-2&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;employee&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Employee&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入map集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入map集合&#34;&gt;#&lt;/a&gt; 注入 map 集合&lt;/h4&gt;
&lt;p&gt;在注入时使用标签： &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;  以及其中的  &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;简单类型-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单类型-2&#34;&gt;#&lt;/a&gt; 简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  或者  &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;peopleBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.People&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;addrs&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果key不是简单类型，使用 key-ref 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果value不是简单类型，使用 value-ref 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;北京大兴区&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;上海浦东区&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;深圳宝安区&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型-3&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value-ref&amp;gt;&lt;/code&gt;  或者  &lt;code&gt;&amp;lt;key-ref&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;emploee1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Employee&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;deptMap&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果key不是简单类型，使用 key-ref 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果value是简单类型，使用 value 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入set集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入set集合&#34;&gt;#&lt;/a&gt; 注入 set 集合&lt;/h4&gt;
&lt;p&gt;在注入时使用  &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;h5 id=&#34;简单类型-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单类型-3&#34;&gt;#&lt;/a&gt; 简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;peopleBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.People&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phones&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--简单类型使用value，非简单类型可以使用ref--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;110&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;110&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;120&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;120&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;119&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;119&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型-4&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;peopleBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.People&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phones&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--非简单类型可以使用ref，简单类型使用value--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone4&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone5&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入properties&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入properties&#34;&gt;#&lt;/a&gt; 注入 Properties&lt;/h4&gt;
&lt;p&gt;在注入时使用  &lt;code&gt;&amp;lt;props&amp;gt;&lt;/code&gt;  标签和  &lt;code&gt;&amp;lt;prop&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.DataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;props&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;com.cj.jc.sql.Driver&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/tes&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;root&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;123456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;props&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入空字符串和null值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入空字符串和null值&#34;&gt;#&lt;/a&gt; 注入空字符串和 null 值&lt;/h4&gt;
&lt;p&gt;空字符串可以是以下的方式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注入  &lt;code&gt;null&lt;/code&gt;  可以不注入对应属性，也可以使用  &lt;code&gt;&amp;lt;null&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDaoBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.OrderDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;null&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;p命名空间注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#p命名空间注入&#34;&gt;#&lt;/a&gt; p 命名空间注入&lt;/h3&gt;
&lt;p&gt;使用前确保使用约束： &lt;code&gt;xmlns:p=http://www.Springframework.org/schema/p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相当于  &lt;code&gt;set&lt;/code&gt;  注入和在注入时使用  &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;stu&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;p:name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;llll&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;p:clazz-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;该命名空间的形式为： &lt;code&gt;p:xxx[-ref]&lt;/code&gt;   &lt;code&gt;xxx&lt;/code&gt;  为属性名，是否带  &lt;code&gt;ref&lt;/code&gt;  取决于该属性是否为引用属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;c命名空间注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c命名空间注入&#34;&gt;#&lt;/a&gt; c 命名空间注入&lt;/h3&gt;
&lt;p&gt;使用前确保使用约束： &lt;code&gt;xmlns:p=http://www.Springframework.org/schema/c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相当于构造器注入和在注入时使用  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;use&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.User&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;c:_0&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;111&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;c:name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjjj&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;c_1-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;该命名空间的形式为： &lt;code&gt;p:_num|xxx[-ref]&lt;/code&gt;   &lt;code&gt;_num&lt;/code&gt;  相当于  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  中的序号  &lt;code&gt;xxx&lt;/code&gt;  相当于属性名，是否带  &lt;code&gt;ref&lt;/code&gt;  取决于该属性是否为引用属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;util命名空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#util命名空间&#34;&gt;#&lt;/a&gt; util 命名空间&lt;/h3&gt;
&lt;p&gt;使用  &lt;code&gt;util &lt;/code&gt; 命名空间可以让&lt;strong&gt;配置复用&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:util&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/util&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/util http://www.Springframework.org/schema/util/Spring-util.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	保证有下面连个约束：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xmlns:util=&amp;quot;http://www.Springframework.org/schema/util&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 xsi:schemaLocation=&amp;quot;http://www.Springframework.org/schema/util http://www.Springframework.org/schema/util/Spring-util.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:properties&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;prop&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mysql.cj.jdbc.Driver&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/Spring&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;root&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;123456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.powernode.Spring6.beans.MyDataSource1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;prop&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.powernode.Spring6.beans.MyDataSource2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;prop&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	引用某个类里面的公共，静态的变量作为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:constant&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;static-field&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Integer.MAX_VALUE&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	相当于可复用的&amp;lt;list&amp;gt;标签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:list&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;321&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1234567&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	相当于可复用的&amp;lt;map&amp;gt;标签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	相当于可复用的&amp;lt;set&amp;gt;标签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;321&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1234567&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;基于xml的自动装配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于xml的自动装配&#34;&gt;#&lt;/a&gt; 基于 xml 的自动装配&lt;/h3&gt;
&lt;p&gt;自动装配：不用显示地对类地引用对象进行赋值。使用  &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;  标签的  &lt;code&gt;autowire&lt;/code&gt;  属性。&lt;/p&gt;
&lt;h4 id=&#34;根据名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据名称&#34;&gt;#&lt;/a&gt; 根据名称&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.UserService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;autowire&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;byName&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意根据名称自动注入装配，会根据  &lt;code&gt;id&lt;/code&gt;  或  &lt;code&gt;name&lt;/code&gt;  与  &lt;code&gt;setter&lt;/code&gt;  方法匹配。所以  &lt;code&gt;id&lt;/code&gt;  或  &lt;code&gt;name&lt;/code&gt;  不能随便写。&lt;/p&gt;
&lt;p&gt;没有  &lt;code&gt;name&lt;/code&gt;  属性时会根据  &lt;code&gt;id&lt;/code&gt;  进行匹配。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此类型也是  &lt;code&gt;set&lt;/code&gt;  注入，必须保证  &lt;code&gt;setter&lt;/code&gt;  方法的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;根据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据类型&#34;&gt;#&lt;/a&gt; 根据类型&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;customService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.CustomService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;autowire&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;byType&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意根据名称自动注入装配时，如果有多个相同类型的  &lt;code&gt;bean&lt;/code&gt;  存在，那么无法进行自动装配，会抛出  &lt;code&gt;UnsatisfiedDependencyException&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此类型也是  &lt;code&gt;set&lt;/code&gt;  注入，必须保证  &lt;code&gt;setter&lt;/code&gt;  方法的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;引入外部属性配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入外部属性配置文件&#34;&gt;#&lt;/a&gt; 引入外部属性配置文件&lt;/h3&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	确保以下两个约束存在：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  	xmlns:context=&amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xsi:schemaLocation=&amp;quot;http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入外部配置文件--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:property-placeholder&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;location&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jdbc.properties&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	使用$&amp;#123;&amp;#125;引用属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.powernode.Spring6.beans.MyDataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;bean的作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的作用域&#34;&gt;#&lt;/a&gt; bean 的作用域&lt;/h2&gt;
&lt;p&gt;默认情况下  &lt;code&gt;bean&lt;/code&gt;  是单例的。在  &lt;code&gt;Spring&lt;/code&gt;  上下文初始化的时候实例化。通过  &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;  标签的  &lt;code&gt;scope&lt;/code&gt;  属性进行配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scope&lt;/code&gt;  一个有  &lt;code&gt;8&lt;/code&gt;  个取值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;singleton&lt;/code&gt; ：默认的，单例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt; ：原型。每调用一次  &lt;code&gt;getBean()&lt;/code&gt;  方法则获取一个新的  &lt;code&gt;Bean&lt;/code&gt;  对象。或每次注入的时候都是新对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt; ：一个请求对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session&lt;/code&gt; ：一个会话对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;global session&lt;/code&gt; ：&lt;strong&gt;portlet 应用中专用的&lt;/strong&gt;。如果在  &lt;code&gt;Servlet&lt;/code&gt;  的  &lt;code&gt;WEB&lt;/code&gt;  应用中使用  &lt;code&gt;global session&lt;/code&gt;  的话，和  &lt;code&gt;session&lt;/code&gt;  一个效果。（  &lt;code&gt;portlet&lt;/code&gt;  和  &lt;code&gt;servlet&lt;/code&gt;  都是规范。servlet 运行在 servlet 容器中，例如  &lt;code&gt;Tomcat&lt;/code&gt;  。 &lt;code&gt;portlet&lt;/code&gt;  运行在  &lt;code&gt;portlet&lt;/code&gt;  容器中。）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application&lt;/code&gt; ：一个应用对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;websocket&lt;/code&gt; ：一个  &lt;code&gt;websocket&lt;/code&gt;  生命周期对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;自定义  &lt;code&gt;scope&lt;/code&gt; ：很少使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bean的创造&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的创造&#34;&gt;#&lt;/a&gt; bean 的创造&lt;/h2&gt;
&lt;h3 id=&#34;通过构造方法实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过构造方法实例化&#34;&gt;#&lt;/a&gt; 通过构造方法实例化&lt;/h3&gt;
&lt;p&gt;默认情况下， &lt;code&gt;Spring&lt;/code&gt;  会调用构造方法进行实例化&lt;/p&gt;
&lt;h3 id=&#34;通过简单工厂模式实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过简单工厂模式实例化&#34;&gt;#&lt;/a&gt; 通过简单工厂模式实例化&lt;/h3&gt;
&lt;p&gt;如下所示，需要申明一个带有&lt;strong&gt;静态方法的工厂类&lt;/strong&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StarFactory&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Star &lt;span class=&#34;hljs-title function_&#34;&gt;getStar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Star&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后申明  &lt;code&gt;bean&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;注意申明的bean的class属性为该工厂类而不是产品类，且通过factory-method属性申明哪个方法作为产品类的生产方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.SimpleStarFactory&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;factory-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;get&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后就可以通过  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  获得  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要为  &lt;code&gt;factory-method&lt;/code&gt;  转递参数，再  &lt;code&gt;bean&lt;/code&gt;  中通过  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  进行传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通过factory-bean实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过factory-bean实例化&#34;&gt;#&lt;/a&gt; 通过 factory-bean 实例化&lt;/h3&gt;
&lt;p&gt;如下所示，需要申明一个带有&lt;strong&gt;实例方法的工厂类&lt;/strong&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StarFactory&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Star &lt;span class=&#34;hljs-title function_&#34;&gt;getStar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Star&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后申明  &lt;code&gt;bean&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;首先要把该工厂类进行实例化，应为生产方法是实例方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;在产品类的bean中，在factory-bean属性中填入工厂类bean的id，表明对应的工厂类，其次使用factory-method属性申明生产产品类的生产方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;factory&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.StarFactory&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;star&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.Star&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;factory-bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;factory&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;factory-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getStar&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后就可以通过  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  获得  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要为  &lt;code&gt;factory-method&lt;/code&gt;  转递参数，再  &lt;code&gt;bean&lt;/code&gt;  中通过  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  进行传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通过factorybean接口实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过factorybean接口实例化&#34;&gt;#&lt;/a&gt; 通过 FactoryBean 接口实例化&lt;/h3&gt;
&lt;p&gt;如下所示，需要声明一个实现了  &lt;code&gt;FactoryBean&lt;/code&gt;  接口的工厂类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ProductFactory&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FactoryBean&lt;/span&gt;&amp;lt;Product&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//生产方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Product &lt;span class=&#34;hljs-title function_&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Product&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//返回对应的类型&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; getObjectType() &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Product.class;&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//判断是否单例。注意该方法时默认方法，返回true，也就是单例，如果不想为单例，则返回false&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;isSingleton&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; FactoryBean.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.isSingleton();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后申明  &lt;code&gt;bean&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;直接申明该工厂类，即可创造出对应产品类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;如果，需要引用产品类直接引用该bean即可&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.ProductFactory&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后就可以通过  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  获得  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实例化  &lt;code&gt;FactoryBean&lt;/code&gt;  接口的被成为 工厂  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;beanfactory和factorybean的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beanfactory和factorybean的区别&#34;&gt;#&lt;/a&gt; BeanFactory 和 FactoryBean 的区别&lt;/h4&gt;
&lt;h5 id=&#34;beanfactory&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beanfactory&#34;&gt;#&lt;/a&gt; BeanFactory&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Spring IoC&lt;/code&gt;  容器的顶级对象， &lt;code&gt;BeanFactory&lt;/code&gt;  被翻译为 “Bean 工厂”，在  &lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;IoC&lt;/code&gt;  容器中，“Bean 工厂” 负责创建  &lt;code&gt;Bean&lt;/code&gt;  对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeanFactory&lt;/code&gt;  是工厂。&lt;/p&gt;
&lt;h5 id=&#34;factorybean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#factorybean&#34;&gt;#&lt;/a&gt; FactoryBean&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;FactoryBean&lt;/code&gt; ：它是一个  &lt;code&gt;Bean&lt;/code&gt;  ，是一个能够&lt;strong&gt;辅助 Spring&lt;/strong&gt; 实例化其它  &lt;code&gt;Bean&lt;/code&gt;  对象的一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;Spring&lt;/code&gt;  中， &lt;code&gt;Bean&lt;/code&gt;  可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一类：普通 &lt;code&gt;Bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二类：工厂  &lt;code&gt;Bean&lt;/code&gt; （记住：工厂  &lt;code&gt;Bean&lt;/code&gt;  也是一种  &lt;code&gt;Bean&lt;/code&gt;  ，只不过这种  &lt;code&gt;Bean&lt;/code&gt;  比较特殊，它可以辅助  &lt;code&gt;Spring&lt;/code&gt;  实例化其它  &lt;code&gt;Bean&lt;/code&gt;  对象。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bean的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期&#34;&gt;#&lt;/a&gt; bean 的生命周期&lt;/h3&gt;
&lt;h4 id=&#34;什么是bean的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是bean的生命周期&#34;&gt;#&lt;/a&gt; 什么是 Bean 的生命周期&lt;/h4&gt;
&lt;p&gt;Spring 其实就是一个管理 Bean 对象的工厂。它负责对象的创建，对象的销毁等。&lt;/p&gt;
&lt;p&gt;所谓的生命周期就是：对象从创建开始到最终销毁的整个过程。&lt;/p&gt;
&lt;p&gt;什么时候创建 Bean 对象？创建 Bean 对象的前后会调用什么方法？Bean 对象什么时候销毁？Bean 对象的销毁前后调用什么方法？&lt;/p&gt;
&lt;h4 id=&#34;为什么要知道bean的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么要知道bean的生命周期&#34;&gt;#&lt;/a&gt; 为什么要知道 Bean 的生命周期&lt;/h4&gt;
&lt;p&gt;其实生命周期的本质是：&lt;strong&gt;在哪个时间节点上调用了哪个类的哪个方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们需要充分的了解在这个生命线上，都有哪些特殊的时间节点。只有我们知道了特殊的时间节点都在哪，到时我们才可以确定代码写到哪。我们可能需要在某个特殊的时间点上执行一段特定的代码，这段代码就可以放到这个节点上。当生命线走到这里的时候，自然会被调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bean 生命周期的管理，可以参考  &lt;code&gt;Spring&lt;/code&gt;  的源码： &lt;strong&gt; &lt;code&gt;AbstractAutowireCapableBeanFactory&lt;/code&gt;  类的  &lt;code&gt;doCreateBean()&lt;/code&gt;  方法 。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;bean的生命周期之5步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期之5步&#34;&gt;#&lt;/a&gt; Bean 的生命周期之 5 步&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Bean&lt;/code&gt;  生命周期可以粗略的划分为五大步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步：实例化  &lt;code&gt;Bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二步： &lt;code&gt;Bean&lt;/code&gt;  属性赋值&lt;/li&gt;
&lt;li&gt;第三步：初始化  &lt;code&gt;Bean&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通过自定义一个方法进行初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四步：使用  &lt;code&gt;Bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第五步：销毁  &lt;code&gt;Bean&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通过自定义一个方法进行销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;lifecycle5.png&#34; alt=&#34;bean生命周期之5步&#34;/&gt;
&lt;p&gt;我们来看下面这个类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//我们定义了一个类，该类含有两个特殊的方法，initBean用来初始化bean，destroyBean用来销毁bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第一步实例化bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第二步属性赋值&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s: &amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第四步使用bean&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;User&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;initBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步初始化bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;destroyBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第五步销毁bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义好这个类后，我们尝试将他注册为  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;光自定义初始化和摧毁方法不行，我们要让Spring知道这是哪些方法，这样Spring才能准确的回调他们&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.User&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;init-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;initBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;destroy-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;destroyBean&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们从  &lt;code&gt;ioc&lt;/code&gt;  容器中取出这个  &lt;code&gt;bean&lt;/code&gt;  然后打印这个  &lt;code&gt;bean&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    ConfigurableApplicationContext ioc= &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lifecycle.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(User.class);&lt;br&gt;    System.out.println(user);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调&lt;/span&gt;&lt;br&gt;    ioc.registerShutdownHook();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外，你将会看到以下五个生命周期步骤：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: 初始化&lt;br&gt;第四步: 使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;第五步: 销毁bean&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;bean的生命周期之7步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期之7步&#34;&gt;#&lt;/a&gt; Bean 的生命周期之 7 步&lt;/h4&gt;
&lt;p&gt;在以上的五步中，第三步是初始化 Bean，如果你还想在&lt;strong&gt;初始化前&lt;/strong&gt;和&lt;strong&gt;初始化后&lt;/strong&gt;添加代码，可以加入 **“Bean 后处理器”**。就形成了七个生命周期步骤。&lt;/p&gt;
&lt;img src=&#34;lifecycle7.png&#34; alt=&#34;bean生命周期之7步&#34;/&gt;
&lt;p&gt;我们重新创建一个  &lt;code&gt;LogBeanPostProcessor&lt;/code&gt;  类并实现  &lt;code&gt;BeanPostProcessor&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;LogBeanPostProcessor&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanPostProcessor&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第五步: BeanPostProcessor的after方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessAfterInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanPostProcessor的before方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessBeforeInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义好这个类后，我们尝试将他注册为  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;这将为这个xml文件代表的ioc容器创建一个全局的Bean后处理器，任何bean都会触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.LogBeanPostProcessor&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们从  &lt;code&gt;ioc&lt;/code&gt;  容器中取出  &lt;code&gt;user&lt;/code&gt;  然后打印这个  &lt;code&gt;bean&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    ConfigurableApplicationContext ioc= &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lifecycle.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(User.class);&lt;br&gt;    System.out.println(user);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调&lt;/span&gt;&lt;br&gt;    ioc.registerShutdownHook();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外，你将会看到以下七个生命周期步骤：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: BeanPostProcessor的before方法执行&lt;br&gt;第四步: 初始化&lt;br&gt;第五步: BeanPostProcessor的after方法执行&lt;br&gt;第六步使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;第七步: 销毁bean&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;bean的生命周期之10步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期之10步&#34;&gt;#&lt;/a&gt; Bean 的生命周期之 10 步&lt;/h4&gt;
&lt;p&gt;如果根据源码跟踪，可以划分更细粒度的步骤，我们通过  &lt;code&gt;*Aware&lt;/code&gt;  接口、 &lt;code&gt;InitializingBean&lt;/code&gt;  接口和  &lt;code&gt;DisposableBean&lt;/code&gt;  来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*Aware&lt;/code&gt;  接口会在  &lt;code&gt;InitializingBean&lt;/code&gt;  接口之前执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InitializingBean&lt;/code&gt;  接口会在初始方法调用前和  &lt;code&gt;BeanPostProcessor&lt;/code&gt;  的  &lt;code&gt;before&lt;/code&gt;  方法调用前执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DisposableBean&lt;/code&gt;  接口会在销毁方法调用前和使用  &lt;code&gt;bean&lt;/code&gt;  执行。&lt;/p&gt;
&lt;img src=&#34;lifecycle10.png&#34; alt=&#34;bean生命周期之10步&#34;/&gt;
&lt;p&gt;仍然使用  &lt;code&gt;User&lt;/code&gt;  类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanNameAware&lt;/span&gt;, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第一步: 实例化bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第二步: 属性赋值&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s: &amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第八步使用bean&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;User&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;initBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第六步: 初始化&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;destroyBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第十步: 销毁bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为BeanClassLoaderAware的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setBeanClassLoader&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ClassLoader classLoader)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanClassLoaderAware&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为BeanFactoryAware的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setBeanFactory&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanFactoryAware&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为BeanNameAware的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setBeanName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanNameAware&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为DisposableBean的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第九步: destroy执行&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为InitializingBean的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第五步: afterPropertiesSet执行&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;LogBeanPostProcessor&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanPostProcessor&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第七步: BeanPostProcessor的after方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessAfterInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanPostProcessor的before方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessBeforeInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义好这两个类后，我们尝试将他注册为  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;这将为这个xml文件代表的ioc容器创建一个全局的Bean后处理器，任何bean都会触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.LogBeanPostProcessor&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;光自定义初始化和摧毁方法不行，我们要让Spring知道这是哪些方法，这样Spring才能准确的回调他们&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.User&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;init-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;initBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;destroy-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;destroyBean&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们从  &lt;code&gt;ioc&lt;/code&gt;  容器中取出这个  &lt;code&gt;bean&lt;/code&gt;  然后打印这个  &lt;code&gt;bean&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    ConfigurableApplicationContext ioc= &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lifecycle.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(User.class);&lt;br&gt;    System.out.println(user);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调&lt;/span&gt;&lt;br&gt;    ioc.registerShutdownHook();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外，你将会看到以下十个生命周期步骤：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: BeanNameAware&lt;br&gt;第三步: BeanClassLoaderAware&lt;br&gt;第三步: BeanFactoryAware&lt;br&gt;第四步: BeanPostProcessor的before方法执行&lt;br&gt;第五步: afterPropertiesSet执行&lt;br&gt;第六步: 初始化&lt;br&gt;第七步: BeanPostProcessor的after方法执行&lt;br&gt;第八步使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;第九步: destroy执行&lt;br&gt;第十步: 销毁bean&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了一系列的  &lt;code&gt;Aware&lt;/code&gt;  回调接口，让  &lt;code&gt;Bean&lt;/code&gt;  向容器表明它们需要某种基础设施的依赖性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;接口名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;注入的依赖性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ApplicationContextAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;声明  &lt;code&gt;ApplicationContext&lt;/code&gt; 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-factory-aware&#34;&gt;ApplicationContextAware 和 BeanNameAware&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;封装了  &lt;code&gt;ApplicationContext&lt;/code&gt;  的 Event publisher 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#context-introduction&#34;&gt;ApplicationContex 的附加功能&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;BeanClassLoaderAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用来加载 Bean 类的类加载器（Class loader）。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-factory-class&#34;&gt;实例化 Bean&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;BeanFactoryAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;声明  &lt;code&gt;BeanFactory&lt;/code&gt; 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-beanfactory&#34;&gt;BeanFactory API&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;BeanNameAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;声明  &lt;code&gt;Bean&lt;/code&gt;  的名称。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-factory-aware&#34;&gt;ApplicationContextAware 和 BeanNameAware&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;LoadTimeWeaverAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义了用于在加载时处理类定义的织入点。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#aop-aj-ltw&#34;&gt;在 Spring 框架中用 AspectJ 进行加载时织入（Load-time Weaving）&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;MessageSourceAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;配置解析消息的策略（支持参数化和国际化）。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#context-introduction&#34;&gt;ApplicationContext 的附加功能&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;NotificationPublisherAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Spring JMX notification publisher&lt;/code&gt; 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/integration.html#jmx-notifications&#34;&gt;Notifications&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ResourceLoaderAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;配置的加载器用于低级别的资源访问。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#resources&#34;&gt;资源（Resources）&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ServletConfigAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;容器所运行的当前  &lt;code&gt;ServletConfig&lt;/code&gt; 。仅在 Web 感知的 Spring  &lt;code&gt;ApplicationContext&lt;/code&gt;  中有效。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/web.html#mvc&#34;&gt;Spring MVC&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;不同作用域的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同作用域的生命周期&#34;&gt;#&lt;/a&gt; 不同作用域的生命周期&lt;/h4&gt;
&lt;p&gt;对于  &lt;code&gt;singleton&lt;/code&gt;  作用域的  &lt;code&gt;Bean&lt;/code&gt; ， &lt;code&gt;Spring&lt;/code&gt;  能够精确地知道该  &lt;code&gt;Bean&lt;/code&gt;  何时被创建，何时初始化完成，以及何时被销毁；&lt;/p&gt;
&lt;p&gt;而对于  &lt;code&gt;prototype&lt;/code&gt;  作用域的  &lt;code&gt;Bean&lt;/code&gt;  ， &lt;code&gt;Spring&lt;/code&gt;  只负责创建，当容器创建了  &lt;code&gt;Bean&lt;/code&gt;  的实例并初始化后， &lt;code&gt;Bean&lt;/code&gt;  的实例就交给客户端代码管理， &lt;code&gt;Spring&lt;/code&gt;  容器将不再跟踪其生命周期。&lt;/p&gt;
&lt;p&gt;依然是上面的  &lt;code&gt;user&lt;/code&gt;  类，我们将这个类的作用域转换为  &lt;code&gt;prototype&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: BeanNameAware&lt;br&gt;第三步: BeanClassLoaderAware&lt;br&gt;第三步: BeanFactoryAware&lt;br&gt;第三步: ApplicationContextAware&lt;br&gt;第四步: BeanPostProcessor的before方法执行&lt;br&gt;第五步: afterPropertiesSet执行&lt;br&gt;第六步: 初始化&lt;br&gt;第七步: BeanPostProcessor的after方法执行&lt;br&gt;第八步: 使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们看到只执行到了第八步，也就是说  &lt;code&gt;Spring&lt;/code&gt;  不再管理其的销毁程序。&lt;/p&gt;
&lt;h4 id=&#34;将自己实例化的对象加入到ioc容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将自己实例化的对象加入到ioc容器&#34;&gt;#&lt;/a&gt; 将自己实例化的对象加入到 IoC 容器&lt;/h4&gt;
&lt;p&gt;可以通过  &lt;code&gt;getBeanFactory()&lt;/code&gt;  方法访问  &lt;code&gt;ApplicationContext&lt;/code&gt;  的  &lt;code&gt;BeanFactory&lt;/code&gt;  来实现，该方法返回  &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;  实现。 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;  通过  &lt;code&gt;registerSingleton(..)&lt;/code&gt;  和  &lt;code&gt;registerBeanDefinition(..)&lt;/code&gt;  方法支持这种注册。&lt;/p&gt;
&lt;h3 id=&#34;bean的循环依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的循环依赖&#34;&gt;#&lt;/a&gt; bean 的循环依赖&lt;/h3&gt;
&lt;p&gt;当我们创建  &lt;code&gt;bean&lt;/code&gt;  的时候可能会遇到这个问题：两个对象互相依赖了对方，即  &lt;code&gt;A&lt;/code&gt;  的属性包括  &lt;code&gt;B&lt;/code&gt;  ,  &lt;code&gt;B&lt;/code&gt;  的属性包括了  &lt;code&gt;A&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们创建下面两个类  &lt;code&gt;Wife&lt;/code&gt;  和  &lt;code&gt;Husband&lt;/code&gt;  类：&lt;/p&gt;
&lt;img src=&#34;huswife.png&#34; alt=&#34;Husband类和Wife类的关系&#34;&gt;
&lt;p&gt;由该图可知  &lt;code&gt;Husband&lt;/code&gt;  和  &lt;code&gt;Wife&lt;/code&gt;  构成了循环依赖&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Husband&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Wife wife;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// toString()方法重写时需要注意：不能直接输出wife，输出wife.getName()。要不然会出现递归导致的栈内存溢出错误。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Husband&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;, wife=&amp;quot;&lt;/span&gt; + wife.getName() +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Wife&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Husband husband;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// toString()方法重写时需要注意：不能直接输出husband，输出husband.getName()。要不然会出现递归导致的栈内存溢出错误。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Wife&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;, husband=&amp;quot;&lt;/span&gt; + husband.getName() +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们将其配置成  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;husband&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.cycle.bean.Husband&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;scope&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;singleton&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;wife&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;wife&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.cycle.bean.Wife&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;wife&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;scope&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;singleton&amp;quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;husband&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;husband&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过  &lt;code&gt;ioc&lt;/code&gt;  容器获取这两个  &lt;code&gt;bean&lt;/code&gt;  后，我们打印这两个类，结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Husband&amp;#123;name=&amp;#x27;hello&amp;#x27;, wife=world&amp;#125;&lt;br&gt;Wife&amp;#123;name=&amp;#x27;world&amp;#x27;, husband=hello&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可见这两个对象的属性都分配成功， &lt;code&gt;Spring&lt;/code&gt;  成功解决了循环依赖问题，为什么会这样呢？&lt;/p&gt;
&lt;p&gt;在上述情况下我们使用的是  &lt;code&gt;singleton&lt;/code&gt;  和  &lt;code&gt;set&lt;/code&gt;  注入的情况，下节将会回答这个问题。&lt;/p&gt;
&lt;h4 id=&#34;set注入的情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set注入的情况&#34;&gt;#&lt;/a&gt; set 注入的情况&lt;/h4&gt;
&lt;h5 id=&#34;全部为singleton&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全部为singleton&#34;&gt;#&lt;/a&gt; 全部为 singleton&lt;/h5&gt;
&lt;p&gt;在此情况下  &lt;code&gt;Spring&lt;/code&gt;  将  &lt;code&gt;bean&lt;/code&gt;  的创建分成两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Spring&lt;/code&gt;  会先将  &lt;code&gt;bean&lt;/code&gt;  实例化了出来，此时  &lt;code&gt;bean&lt;/code&gt;  的各个属性都没有赋值，处于 “曝光” 状态，意味着此时  &lt;code&gt;bean&lt;/code&gt;  已经可以被其他  &lt;code&gt;bean&lt;/code&gt;  知晓并使用。&lt;/li&gt;
&lt;li&gt;被创建出来的  &lt;code&gt;bean&lt;/code&gt;  通过  &lt;code&gt;setter&lt;/code&gt;  方法进行赋值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，两个单例的  &lt;code&gt;bean&lt;/code&gt;  再进行属性赋值的时候全部都已经存在，所以才不会存在循环依赖的问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  官方文档如下解释说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当容器被创建时， &lt;code&gt;Spring&lt;/code&gt;  容器会验证每个  &lt;code&gt;Bean&lt;/code&gt;  的配置。然而，在实际创建  &lt;code&gt;Bean&lt;/code&gt;  之前， &lt;code&gt;Bean&lt;/code&gt;  的属性本身不会被设置。当容器被创建时，那些具有单例作用域并被设置为预实例化的  &lt;code&gt;Bean&lt;/code&gt; （默认）被创建。创建  &lt;code&gt;bean&lt;/code&gt;  有可能导致创建  &lt;code&gt;bean&lt;/code&gt;  图（graph），因为  &lt;code&gt;bean&lt;/code&gt;  的依赖关系和它的依赖关系（等等）被创建和分配。请注意，这些依赖关系之间的解析不匹配可能会出现得很晚 — 也就是说，在第一次创建受影响的  &lt;code&gt;Bean&lt;/code&gt;  时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;单个为singleton&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单个为singleton&#34;&gt;#&lt;/a&gt; 单个为 singleton&lt;/h5&gt;
&lt;p&gt;下面我们将  &lt;code&gt;wife bean&lt;/code&gt;  改为  &lt;code&gt;prototype&lt;/code&gt;  ，再次运行观察结果：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Husband&amp;#123;name=&amp;#x27;hello&amp;#x27;, wife=world&amp;#125;&lt;br&gt;Wife&amp;#123;name=&amp;#x27;world&amp;#x27;, husband=hello&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;仍然运行成功。可见，只要两个  &lt;code&gt;bean&lt;/code&gt;  的作用域有一个为单例即可解决循环依赖问题。&lt;/p&gt;
&lt;p&gt;我们知道作用域处于  &lt;code&gt;prototype&lt;/code&gt;  的  &lt;code&gt;bean&lt;/code&gt;  只有在被需要的时候才会被创建，所以当单例的  &lt;code&gt;bean&lt;/code&gt;  需要一个原型的  &lt;code&gt;bean&lt;/code&gt;  时，该原型的  &lt;code&gt;bean&lt;/code&gt;  才会被创建，而该原型  &lt;code&gt;bean&lt;/code&gt;  需要单例的  &lt;code&gt;bean&lt;/code&gt;  的时候，该单例  &lt;code&gt;bean&lt;/code&gt;  早已存在，所以循环依赖问题不会发生。&lt;/p&gt;
&lt;h5 id=&#34;全部为prototype&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全部为prototype&#34;&gt;#&lt;/a&gt; 全部为 prototype&lt;/h5&gt;
&lt;p&gt;作用域处于  &lt;code&gt;prototype&lt;/code&gt;  的  &lt;code&gt;bean&lt;/code&gt;  只有在被需要的时候才会被创建，且会返回不同的实例。我们以上面的  &lt;code&gt;Wife&lt;/code&gt;  和  &lt;code&gt;Husband&lt;/code&gt;  举例。&lt;/p&gt;
&lt;p&gt;所以当  &lt;code&gt;Wife&lt;/code&gt;  创建的时候，会去创建另一个  &lt;code&gt;Husband&lt;/code&gt;  ；而当  &lt;code&gt;Husband&lt;/code&gt;  创建时，会创建另一个  &lt;code&gt;Wife&lt;/code&gt;  。由于原型每次创建新的  &lt;code&gt;bean&lt;/code&gt;  的特性，每次创建的  &lt;code&gt;Husband&lt;/code&gt;  和  &lt;code&gt;Wife&lt;/code&gt;  都不相同，所以会一直创建下去。循环依赖问题并不会解决&lt;/p&gt;
&lt;p&gt;当我们将  &lt;code&gt;bean&lt;/code&gt;  的作用域全部改为  &lt;code&gt;prototype&lt;/code&gt;  ，再次运行时会发现，程序抛出了下面的异常：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;org.springframework.beans.factory.BeanCurrentlyInCreationException: &lt;br&gt;Error creating bean with name &amp;#x27;husband&amp;#x27;: &lt;br&gt;Requested bean is currently in creation: Is there an unresolvable circular reference?&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代表着循环依赖问题并没有解决&lt;/p&gt;
&lt;h4 id=&#34;构造器注入的情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造器注入的情况&#34;&gt;#&lt;/a&gt; 构造器注入的情况&lt;/h4&gt;
&lt;p&gt;上面说过，只有实例化和注入的步骤分开的时候，循环依赖的情况才会解决，所以当使用构造器注入的时候，是实例化和注入同时进行，此时依赖的  &lt;code&gt;bean&lt;/code&gt;  并没有创建，所以也不存在能解决循环问题的办法。因此，构造器注入无法解决循环依赖问题。&lt;/p&gt;
&lt;p&gt;我们将注入改为构造器注入，运行后仍然会发现，程序抛出了  &lt;code&gt;BeanCreationException&lt;/code&gt;  异常：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;org.Springframework.beans.factory.BeanCreationException: &lt;br&gt;Error creating bean with name &amp;#x27;husband&amp;#x27; defined in class path resource [Spring.xml]: &lt;br&gt;Cannot resolve reference to bean &amp;#x27;wife&amp;#x27; while setting constructor argument&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三级依赖解决循环依赖源码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三级依赖解决循环依赖源码&#34;&gt;#&lt;/a&gt; 三级依赖解决循环依赖 (源码)&lt;/h4&gt;
&lt;p&gt;注意解决循环依赖问题建立在：单例和  &lt;code&gt;set&lt;/code&gt;  注入的情况下。&lt;/p&gt;
&lt;p&gt;让我们进入： &lt;strong&gt; &lt;code&gt;AbstractAutowireCapableBeanFactory&lt;/code&gt;  类的  &lt;code&gt;doCreateBean()&lt;/code&gt;  方法&lt;/strong&gt; ，所有的单例  &lt;code&gt;bean&lt;/code&gt;  都在这里创建：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;doCreateBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String beanName, RootBeanDefinition mbd, &lt;span class=&#34;hljs-meta&#34;&gt;@Nullable&lt;/span&gt; Object[] args)&lt;/span&gt;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeanCreationException &amp;#123;&lt;br&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Instantiate the bean.下面就是在实例化bean&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (mbd.isSingleton()) &amp;#123;&lt;br&gt;			instanceWrapper = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.factoryBeanInstanceCache.remove(beanName);&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (instanceWrapper == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;			instanceWrapper = createBeanInstance(beanName, mbd, args);&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; instanceWrapper.getWrappedInstance(); &lt;span class=&#34;hljs-comment&#34;&gt;//该方法就是已经获得了实例化的bean，此时该bean的所有属性均没有被赋值&lt;/span&gt;&lt;br&gt;		Class&amp;lt;?&amp;gt; beanType = instanceWrapper.getWrappedClass(); &lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (beanType != NullBean.class) &amp;#123;&lt;br&gt;			mbd.resolvedTargetType = beanType;&lt;br&gt;		&amp;#125;&lt;br&gt;		......&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//注意下面的代码块&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Eagerly cache singletons to be able to resolve circular references&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-comment&#34;&gt;// 急切地缓存单例以便能够解决循环依赖&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// even when triggered by lifecycle interfaces like BeanFactoryAware.&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-comment&#34;&gt;// 甚至当被如BeanFactoryAware生命周期接口触发地时候&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;earlySingletonExposure&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (mbd.isSingleton() &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.allowCircularReferences &amp;amp;&amp;amp;&lt;br&gt;				isSingletonCurrentlyInCreation(beanName)); &lt;span class=&#34;hljs-comment&#34;&gt;//判断是否要解决循环依赖问题&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (earlySingletonExposure) &amp;#123;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (logger.isTraceEnabled()) &amp;#123;&lt;br&gt;				logger.trace(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Eagerly caching bean &amp;#x27;&amp;quot;&lt;/span&gt; + beanName +&lt;br&gt;						&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;#x27; to allow for resolving potential circular references&amp;quot;&lt;/span&gt;);&lt;br&gt;			&amp;#125;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//解决循环依赖地问题地办法就在这里，该方法位于DefaultSingletonBeanRegistry，让我们进入这个方法.....&lt;/span&gt;&lt;br&gt;			addSingletonFactory(beanName, () -&amp;gt; getEarlyBeanReference(beanName, mbd, bean));&lt;br&gt;		&amp;#125;&lt;br&gt;		......&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;addSingletonFactory&lt;/code&gt;  方法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;addSingletonFactory&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String beanName, ObjectFactory&amp;lt;?&amp;gt; singletonFactory)&lt;/span&gt; &amp;#123;&lt;br&gt;		Assert.notNull(singletonFactory, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Singleton factory must not be null&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;synchronized&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects) &amp;#123;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects.containsKey(beanName)) &amp;#123; &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;/** 我们重点看这个表达式，它将bean的名字和创建这个bean的工厂放进了一个map集合里，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;                也就是将这个对象提前曝光。这个map集合就是我们待会儿要说的三级缓存之一*/&lt;/span&gt;&lt;br&gt;				&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonFactories.put(beanName, singletonFactory);&lt;br&gt;				&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.remove(beanName);&lt;br&gt;				&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.registeredSingletons.add(beanName);&lt;br&gt;			&amp;#125;&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面就是  &lt;code&gt;DefaultSingletonBeanRegistry&lt;/code&gt;  类的三个 map 集合属性，也就是–三级缓存&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** Cache of singleton factories: bean name to ObjectFactory. */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//三级缓存，单例工厂缓存。是bean名字和bean工厂的map集合。缓存创造对应bean的单例工厂，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt; singletonFactories = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** Cache of early singleton objects: bean name to bean instance. */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//二级缓存，预实例化对象的缓存。是bean名字和预实例化的bean的map集合。缓存对应的属性未赋值的bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; earlySingletonObjects = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** Cache of singleton objects: bean name to bean instance. */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//一级缓存，单例对象的缓存。是bean名字和实例化后的bean的map集合。缓存对应的属性已经赋值的bean，也就是对象本身了。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; singletonObjects = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;了解了三级缓存后，我们来到该类的另外一个方法  &lt;code&gt;getSingleton&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getSingleton&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String beanName, &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; allowEarlyReference)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 下面就是解决循环依赖的办法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Quick check for existing instance without full singleton lock&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//首先会从一级缓存中取该单例对象，看是否能取到&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;singletonObject&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects.get(beanName);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; isSingletonCurrentlyInCreation(beanName)) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//没有取到则去二级缓存取预实例化的单例对象&lt;/span&gt;&lt;br&gt;        singletonObject = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.get(beanName);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; allowEarlyReference) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;synchronized&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// Consistent creation of early reference within full singleton lock&lt;/span&gt;&lt;br&gt;                singletonObject = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects.get(beanName);&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;              &lt;br&gt;                    singletonObject = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.get(beanName);&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//最终都没有的话去三级缓存中去该对象的bean工厂&lt;/span&gt;&lt;br&gt;                        ObjectFactory&amp;lt;?&amp;gt; singletonFactory = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonFactories.get(beanName);&lt;br&gt;                        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonFactory != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//然后通过该bean工厂回去对应的bean&lt;/span&gt;&lt;br&gt;                            singletonObject = singletonFactory.getObject();&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//加入二级缓存&lt;/span&gt;&lt;br&gt;                            &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.put(beanName, singletonObject);&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//随后将该工厂移除&lt;/span&gt;&lt;br&gt;                            &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonFactories.remove(beanName);&lt;br&gt;                        &amp;#125;&lt;br&gt;                    &amp;#125;&lt;br&gt;                &amp;#125;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; singletonObject;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;基于注解的ioc开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于注解的ioc开发&#34;&gt;#&lt;/a&gt; 基于注解的 Ioc 开发&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了注解 + 扫描的方式来替代  &lt;code&gt;xml&lt;/code&gt;  配置&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;现在让我们创建一个注解  &lt;code&gt;@Component&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.TYPE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Component &amp;#123;&lt;br&gt;    String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//将这个注解加到一个类上去&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component(&amp;quot;user&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果当我获得了这个类的包名并且想让标注了这个注解的类能被实例化，并添加至一个 map 集合里，那我们应该怎么做？答案是使用反射：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testComponentScan&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;packageName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//包名&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;packagePath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; packageName.replaceAll(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\\.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//将包名改成路径&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ClassLoader.getSystemClassLoader().getResource(packagePath);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; resource.getPath();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(path); &lt;span class=&#34;hljs-comment&#34;&gt;//获得磁盘路径的File对象&lt;/span&gt;&lt;br&gt;        File[] files = file.listFiles(); &lt;span class=&#34;hljs-comment&#34;&gt;//查找该路径下的所有文件&lt;/span&gt;&lt;br&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//循环遍历&lt;/span&gt;&lt;br&gt;        Arrays.stream(files).forEach(f -&amp;gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; packageName + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; + f.getName().split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\\.&amp;quot;&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;span class=&#34;hljs-comment&#34;&gt;//获得类的全限定名&lt;/span&gt;&lt;br&gt;            Class&amp;lt;?&amp;gt; aClass = &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;                aClass = Class.forName(className); &lt;span class=&#34;hljs-comment&#34;&gt;//获得该类的字节码对象&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (aClass.isAnnotationPresent(Component.class)) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//判断是否标注了注解，标注了注解就通过反射实例化&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;annotation&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; aClass.getAnnotation(Component.class);&lt;br&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; annotation.value(); &lt;span class=&#34;hljs-comment&#34;&gt;//获得注解的值&lt;/span&gt;&lt;br&gt;                    Constructor&amp;lt;?&amp;gt; constructor = aClass.getConstructor();&lt;br&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; constructor.newInstance(); &lt;span class=&#34;hljs-comment&#34;&gt;//实例化&lt;/span&gt;&lt;br&gt;                    map.put(value,target); &lt;span class=&#34;hljs-comment&#34;&gt;//添加到一个map集合里&lt;/span&gt;&lt;br&gt;                &amp;#125;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;                e.printStackTrace();&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;);&lt;br&gt;        System.out.println(map); &lt;span class=&#34;hljs-comment&#34;&gt;//打印集合&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&amp;#123;user=com.jhy.bean.User@e580929&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你将这个注解添加至包下的更多类上，那么 map 结合中将会包含所有被标注了这个注解的实例。&lt;/p&gt;
&lt;p&gt;如上就是  &lt;code&gt;IoC&lt;/code&gt;  的注解开发的原理：扫描包下的所有类，将所有标注了指定注解的类通过反射调用进行实例化。&lt;/p&gt;
&lt;h3 id=&#34;注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解&#34;&gt;#&lt;/a&gt; 注解&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了四个注解来进行注解开发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;/code&gt; ：注解普通的类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt; ：注解表示层的类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Service&lt;/code&gt; ：注解业务层的类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Repository&lt;/code&gt; ：注解数据访问层的类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Indexed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Component &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * The value may indicate a suggestion for a logical component name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * to be turned into a Spring bean name in case of an autodetected component.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt; the suggested component name, if any (or empty String otherwise)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Controller &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Alias for &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Component#value&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Service &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Alias for &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Component#value&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Repository &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Alias for &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Component#value&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;除  &lt;code&gt;@Conponent&lt;/code&gt;  的三个注解都被  &lt;code&gt;@Componet&lt;/code&gt;  注解了，因此其余三个注解都是  &lt;code&gt;@Component&lt;/code&gt;  的衍生注解，功能一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上述注解的  &lt;code&gt;value()&lt;/code&gt;  属性代表该类实例化后的  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;name&lt;/code&gt;  ，如果省略，则以该类的首字母小写的类名作为实例化后的  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;name&lt;/code&gt;  。&lt;/p&gt;
&lt;h4 id=&#34;使用注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用注解&#34;&gt;#&lt;/a&gt; 使用注解&lt;/h4&gt;
&lt;p&gt;前面提到基于注解的  &lt;code&gt;IoC&lt;/code&gt;  开发时采用的扫描 + 反射的原理进行的。所以，注解存在，下面我们来进行扫描：&lt;/p&gt;
&lt;p&gt;如果使用  &lt;code&gt;xml&lt;/code&gt;  进行扫描，就要使用  &lt;code&gt;context&lt;/code&gt;  命名空间下的标签了&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt; &lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:context&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/beans/Spring-beans.xsd &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	使用context确保下面的约束存在&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xmlns:context = &amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 xsi:schemaLocation =  &amp;quot;http://www.Springframework.org/schema/context &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;							http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	component-scan专门用来进行扫描&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	base-package则为扫描的包的范围，如果要扫描多个包，可以用逗号，分号，空格等进行分割&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package则为扫描的包&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.anno.beans&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如果你想选择性实例化一些Bean，可以禁用默认的包扫描过滤器：use-default-filters=&amp;quot;false“，use-default-filters默认是true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	然后自己去设计自定义的包含过滤器：&amp;lt;context:include-filter&amp;gt;用来指定包含的过滤器，type指定包含策略，expression指定策略的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如下的内容表示将会让被@Repository注解的类注册为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	请注意：&amp;lt;context:include-filter&amp;gt;必须和use-default-filters=&amp;quot;false&amp;quot;使用才会生效&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package则为扫描的包&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.anno.beans&amp;quot;&lt;/span&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;use-default-filters&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	 &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:include-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;annotation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.Springframework.stereotype.Repository&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如果你想选择性实例化一些Bean，也可以选择自定义排除过滤器，排除过滤器和use-default-filters=&amp;quot;true&amp;quot;一起工作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	当然，use-default-filters默认为true，所以可以不写&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	&amp;lt;context:exclude-filter&amp;gt;排除过滤器 type指定排除策略，expression指定策略的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如下的内容表示不会将被@Service标注的类注解为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package则为扫描的包&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.anno.beans&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	 &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:exclude-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;annotation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.Springframework.stereotype.Service&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如下为排除过滤器和包含过滤器的一些详细信息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Filter Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;示例表达式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;注解 (annotation) (默认)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example.SomeAnnotation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个注解在目标组件中的类型级别是 &lt;em&gt;present&lt;/em&gt; 或 &lt;em&gt;meta-present&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可指定 (assignable)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example.SomeClass&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;目标组件可分配给（继承或实现）的一个类（或接口）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;aspectj&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example..*Service+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;要被目标组件匹配的 AspectJ type 表达式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;regex&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org\.example\.Default.*&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个与目标组件的类名相匹配的 regex expression。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;自定义 (custom)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example.MyTypeFilter&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.Springframework.core.type.TypeFilter&lt;/code&gt;  接口的自定义实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;自动装配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自动装配&#34;&gt;#&lt;/a&gt; 自动装配&lt;/h4&gt;
&lt;p&gt;与  &lt;code&gt;xml&lt;/code&gt;  的自动装配一样，注解式开发也提供了用于自动装配的注解&lt;/p&gt;
&lt;h5 id=&#34;value&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#value&#34;&gt;#&lt;/a&gt; @Value&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt;  用于简单类型的自动装配：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//可以注解：属性、方法、参数、注解&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Value &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * The actual value expression such as &amp;lt;code&amp;gt;#&amp;#123;systemProperties.myProp&amp;#125;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * or property placeholder such as &amp;lt;code&amp;gt;$&amp;#123;my.app.myProp&amp;#125;&amp;lt;/code&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//代表传入的简单类型字面值&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;123&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;789&amp;quot;)&lt;/span&gt; String name)&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//通过构造器初始化&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;456&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt; ：可以出现在：属性、构造器参数和  &lt;code&gt;setter&lt;/code&gt;  方法上。注意当  &lt;code&gt;@Value&lt;/code&gt;  出现在属性上时，不需要  &lt;code&gt;setter&lt;/code&gt;  方法，因为反射的机理，导致能通过反射拿到值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;autowired和qualifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#autowired和qualifier&#34;&gt;#&lt;/a&gt; @Autowired 和 @Qualifier&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;  用来注解 “非简单类型”--  &lt;code&gt;Spring&lt;/code&gt;  所认为的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//能注解：构造器、方法、参数、属性、注解&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Autowired &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Declares whether the annotated dependency is required.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * &amp;lt;p&amp;gt;Defaults to &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@code&lt;/span&gt; true&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//该属性代表该属性是否需要，默认为true则代表需要，也就是没找到能够注入的bean则会报错，如果为false则不会&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; UserDao userDao;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt; UserDao userDao)&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//通过构造器实例化&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.userDao = userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; UserDao &lt;span class=&#34;hljs-title function_&#34;&gt;getUserDao&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setUserDao&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt; UserDao userDao)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.userDao = userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        userDao.saveUser();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;特别的，当属性的名字和构造方法的参数名相同，且只有一个构造方法，那么不使用  &lt;code&gt;@Autowired&lt;/code&gt;  也能完成自动装配：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; UserDao userDao;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(UserDao userDao)&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//通过构造器实例化&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.userDao = userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;  能够注解在：属性、构造方法、参数、 &lt;code&gt;setter&lt;/code&gt;  方法。且当  &lt;code&gt;@Autowired&lt;/code&gt;  出现在属性上时，同样也不需要  &lt;code&gt;setter&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;且注意  &lt;code&gt;@Autowired&lt;/code&gt;  默认只能使用  &lt;code&gt;byType&lt;/code&gt;  查找  &lt;code&gt;bean&lt;/code&gt;  ，所以当容器中有多个相同类型的  &lt;code&gt;bean&lt;/code&gt;  出现时，单使用  &lt;code&gt;@Autowired&lt;/code&gt;  会报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是如果你想让  &lt;code&gt;@Autowired&lt;/code&gt;  根据  &lt;code&gt;byName&lt;/code&gt;  的方式查找  &lt;code&gt;bean&lt;/code&gt;  的话，那么要和  &lt;code&gt;@Qualifier&lt;/code&gt;  进行搭配使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Qualifier&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//能够注解属性、方法、参数、类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Inherited&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Qualifier &amp;#123;&lt;br&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//代表某个bean的id&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Qualifier(&amp;quot;userDaoMysql&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; IUerDao userDao;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这样就会根据名字去查找  &lt;code&gt;id&lt;/code&gt;  为  &lt;code&gt;userDaoMysql&lt;/code&gt;  的  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者如果你仍然想使用  &lt;code&gt;byType&lt;/code&gt;  的方式查找那么可以使用  &lt;code&gt;@Primary&lt;/code&gt;  注解&lt;/p&gt;
&lt;h5 id=&#34;primary&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#primary&#34;&gt;#&lt;/a&gt; @Primary&lt;/h5&gt;
&lt;p&gt;因为按类型自动注入可能会导致多个候选者，所以经常需要对选择过程进行更多的控制。实现这一目标的方法之一是使用  &lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;@Primary&lt;/code&gt;  注解。 &lt;code&gt;@Primary&lt;/code&gt;  表示，当多个 &lt;code&gt;bean&lt;/code&gt;  是自动注入到一个单值（ &lt;code&gt;single value&lt;/code&gt; ）依赖的候选者时，应该优先考虑一个特定的  &lt;code&gt;bean&lt;/code&gt; 。如果在候选者中正好有一个主要（ &lt;code&gt;primary&lt;/code&gt; ） &lt;code&gt;bean&lt;/code&gt;  存在，它就会成为自动注入的值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.TYPE, ElementType.METHOD&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//可以标注类型、方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Primary &amp;#123;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;resource&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#resource&#34;&gt;#&lt;/a&gt; @Resource&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Resource&lt;/code&gt;  注解也可以完成非简单类型注入。他有以下的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Resource&lt;/code&gt;  注解是  &lt;code&gt;JDK&lt;/code&gt;  扩展包中的，也就是说属于  &lt;code&gt;JDK&lt;/code&gt;  的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250 标准中制定的注解类型。JSR 是 Java 规范提案。)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;@Resource&lt;/code&gt;  注解默认根据名称装配  &lt;code&gt;byName&lt;/code&gt;  ，未指定  &lt;code&gt;name&lt;/code&gt;  时，使用属性名作为  &lt;code&gt;name&lt;/code&gt;  。通过  &lt;code&gt;name&lt;/code&gt;  找不到的话会自动启动通过类型  &lt;code&gt;byType&lt;/code&gt;  装配。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Resource&lt;/code&gt;  注解用在属性上、 &lt;code&gt;setter&lt;/code&gt;  方法上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于  &lt;code&gt;oracle&lt;/code&gt;  在  &lt;code&gt;jdk9&lt;/code&gt;  的时候将  &lt;code&gt;java ee&lt;/code&gt;  捐献给了  &lt;code&gt;Apache&lt;/code&gt;  基金会，并且改名  &lt;code&gt;jartarka ee&lt;/code&gt;  ，所以引入如下依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation-api&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.1&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;@Resource&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;TYPE, FIELD, METHOD&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//能注解类型、属性、方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Repeatable(Resources.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Resource &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * The JNDI name of the resource.  For field annotations,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * the default is the field name.  For method annotations,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * the default is the JavaBeans property name corresponding&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * to the method.  For class annotations, there is no default&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * and this must be specified.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    String &lt;span class=&#34;hljs-title function_&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//name属性用来接受bean的名称&lt;/span&gt;&lt;br&gt;    ......&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;全注解式开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全注解式开发&#34;&gt;#&lt;/a&gt; 全注解式开发&lt;/h3&gt;
&lt;p&gt;通过配置类取代  &lt;code&gt;xml&lt;/code&gt;  文件&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.Springframework.context.annotation.ComponentScan;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.Springframework.context.annotation.ComponentScans;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.Springframework.context.annotation.Configuration;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//代表此类为一个配置类。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ComponentScan(&amp;#123;&amp;quot;com.jhy.Spring6.dao&amp;quot;, &amp;quot;com.jhy.Spring6.service&amp;quot;&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//扫描包结构&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Spring6Configuration&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//@Configuration 被 @Component注解，代表该注解表示的类也会被注册为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Configuration &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//bean的名称&lt;/span&gt;&lt;br&gt;    ......&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之前的  &lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;  也被  &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;  取代：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ioc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AnnotationConfigApplicationContext&lt;/span&gt;(MyConfiguration.class); &lt;span class=&#34;hljs-comment&#34;&gt;//MyConfiguration.class为配置类的字节码对象&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;基于java的容器配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于java的容器配置&#34;&gt;#&lt;/a&gt; 基于 Java 的容器配置&lt;/h3&gt;
&lt;p&gt;上面我们介绍了如何通过配置类的方式取代  &lt;code&gt;xml&lt;/code&gt;  文件，那么下面我们介绍如何通过配置类配置  &lt;code&gt;bean&lt;/code&gt;  以及一些额外信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;Java&lt;/code&gt;  配置支持的核心工件是  &lt;code&gt;@Configuration&lt;/code&gt;  注解的类和  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt;  注解用来表示一个方法实例化、配置和初始化了一个新的对象，由  &lt;code&gt;Spring IoC&lt;/code&gt;  容器管理。 &lt;code&gt;@Bean&lt;/code&gt;  注解的作用与  &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;  元素的作用相同。你可以在任何  &lt;code&gt;Spring&lt;/code&gt;   &lt;code&gt;@Component&lt;/code&gt;  中使用  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法。然而，它们最常被用于  &lt;code&gt;@Configuration&lt;/code&gt;   &lt;code&gt;bean&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;用  &lt;code&gt;@Configuration&lt;/code&gt;  来注解一个类，表明它的主要目的是作为  &lt;code&gt;bean&lt;/code&gt;  定义的来源。此外，  &lt;code&gt;@Configuration&lt;/code&gt;  类允许通过调用同一个类中的其他  &lt;code&gt;@Bean&lt;/code&gt;  方法来定义  &lt;code&gt;bean&lt;/code&gt;  间的依赖关系。最简单的  &lt;code&gt;@Configuration&lt;/code&gt;  类如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; MyServiceImpl &lt;span class=&#34;hljs-title function_&#34;&gt;myService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面的  &lt;code&gt;AppConfig&lt;/code&gt;  类等同于下面的 Spring  &lt;code&gt;&amp;lt;beans/&amp;gt;&lt;/code&gt;  XML。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;myService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.acme.services.MyServiceImpl&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;使用bean注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用bean注解&#34;&gt;#&lt;/a&gt; 使用 @Bean 注解&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt;  是一个方法级注解，是 XML  &lt;code&gt;&amp;lt;bean/&amp;gt;&lt;/code&gt;  元素的直接类似物。该注解支持  &lt;code&gt;&amp;lt;bean/&amp;gt;&lt;/code&gt;  所提供的一些属性，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8E%A5%E6%94%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E5%9B%9E%E8%B0%83&#34;&gt;init-method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8E%A5%E6%94%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E5%9B%9E%E8%B0%83&#34;&gt;destroy-method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[autowiring](#Bean 依赖)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在  &lt;code&gt;@Configuration&lt;/code&gt;  或  &lt;code&gt;@Component&lt;/code&gt;  注解的类中使用  &lt;code&gt;@Bean&lt;/code&gt;  注解。&lt;/p&gt;
&lt;h5 id=&#34;声明一个-bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明一个-bean&#34;&gt;#&lt;/a&gt; 声明一个 Bean&lt;/h5&gt;
&lt;p&gt;为了声明一个 Bean，你可以用  &lt;code&gt;@Bean&lt;/code&gt;  注解来注解一个方法。你可以用这个方法在  &lt;code&gt;ApplicationContext&lt;/code&gt;  中注册一个 Bean 定义，该类型被指定为该方法的返回值。默认情况下，Bean 的名字和方法的名字是一样的。下面的例子显示了一个  &lt;code&gt;@Bean&lt;/code&gt;  方法声明。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; TransferServiceImpl &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面的配置完全等同于下面的 Spring XML。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transferService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.acme.TransferServiceImpl&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个声明使  &lt;code&gt;ApplicationContext&lt;/code&gt;  中一个名为  &lt;code&gt;transferService&lt;/code&gt;  的 Bean 可用，并与  &lt;code&gt;TransferServiceImpl&lt;/code&gt;  类型的对象实例绑定，正如下面的文字图片所示：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;transferService -&amp;gt; com.acme.TransferServiceImpl&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以使用  &lt;code&gt;default&lt;/code&gt;  方法来定义  &lt;code&gt;bean&lt;/code&gt; 。这允许通过在默认方法上实现带有  &lt;code&gt;bean&lt;/code&gt;  定义的接口来组成  &lt;code&gt;bean&lt;/code&gt;  配置。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BaseConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; TransferServiceImpl &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BaseConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以用一个接口（或基类）的返回类型来声明你的  &lt;code&gt;@Bean&lt;/code&gt;  方法，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; TransferService &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;bean-依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean-依赖&#34;&gt;#&lt;/a&gt; Bean 依赖&lt;/h5&gt;
&lt;p&gt;一个  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法可以有任意数量的参数，描述构建该  &lt;code&gt;bean&lt;/code&gt;  所需的依赖关系。例如，如果我们的  &lt;code&gt;TransferService&lt;/code&gt;  需要一个  &lt;code&gt;AccountRepository&lt;/code&gt; ，我们可以用一个方法参数将这种依赖关系具体化，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; TransferService &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(AccountRepository accountRepository)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;(accountRepository);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解析机制与基于构造函数的依赖注入基本相同。&lt;/p&gt;
&lt;h5 id=&#34;接收生命周期的回调&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接收生命周期的回调&#34;&gt;#&lt;/a&gt; 接收生命周期的回调&lt;/h5&gt;
&lt;p&gt;任何用  &lt;code&gt;@Bean&lt;/code&gt;  注解定义的类都支持常规的生命周期回调。 &lt;code&gt;@Bean&lt;/code&gt;  注解支持指定任意的初始化和销毁回调方法，就像  &lt;code&gt;Spring XML&lt;/code&gt;  在  &lt;code&gt;bean&lt;/code&gt;  元素上的  &lt;code&gt;init-method&lt;/code&gt;  和  &lt;code&gt;destroy-method&lt;/code&gt;  属性一样，如下例所示：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// initialization logic&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanTwo&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;cleanup&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// destruction logic&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(initMethod = &amp;quot;init&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanOne &lt;span class=&#34;hljs-title function_&#34;&gt;beanOne&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(destroyMethod = &amp;quot;cleanup&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanTwo &lt;span class=&#34;hljs-title function_&#34;&gt;beanTwo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanTwo&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况下，用  &lt;code&gt;Java&lt;/code&gt;  配置定义的具有  &lt;code&gt;public&lt;/code&gt;  的  &lt;code&gt;close&lt;/code&gt;  或  &lt;code&gt;shutdown&lt;/code&gt;  方法的 Bean 会自动被列入销毁回调。如果你有一个  &lt;code&gt;public&lt;/code&gt;  的  &lt;code&gt;close&lt;/code&gt;  或  &lt;code&gt;shutdown&lt;/code&gt;  方法，并且你不希望它在容器关闭时被调用，你可以在你的  &lt;code&gt;bean&lt;/code&gt;  定义中添加  &lt;code&gt;@Bean(destroyMethod = &amp;quot;&amp;quot;)&lt;/code&gt;  来禁用默认  &lt;code&gt;(inferred)&lt;/code&gt;  模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就前文例子中的  &lt;code&gt;BeanOne&lt;/code&gt;  而言，在构造过程中直接调用  &lt;code&gt;init()&lt;/code&gt;  方法同样有效，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanOne &lt;span class=&#34;hljs-title function_&#34;&gt;beanOne&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;BeanOne&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;beanOne&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt;();&lt;br&gt;        beanOne.init();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; beanOne;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;指定-bean-的-scope&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指定-bean-的-scope&#34;&gt;#&lt;/a&gt; 指定 Bean 的 Scope&lt;/h5&gt;
&lt;p&gt;Spring 包括  &lt;code&gt;@Scope&lt;/code&gt;  注解，这样你就可以指定 Bean 的 scope。&lt;/p&gt;
&lt;h6 id=&#34;使用-scope-注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用-scope-注解&#34;&gt;#&lt;/a&gt; 使用  &lt;code&gt;@Scope&lt;/code&gt;  注解&lt;/h6&gt;
&lt;p&gt;你可以指定你用  &lt;code&gt;@Bean&lt;/code&gt;  注解定义的  &lt;code&gt;bean&lt;/code&gt;  应该有一个特定的  &lt;code&gt;scope&lt;/code&gt; 。你可以指定任何一个标准  &lt;code&gt;scope&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;默认的  &lt;code&gt;scope&lt;/code&gt;  是  &lt;code&gt;singleton&lt;/code&gt; ，但你可以用  &lt;code&gt;@Scope&lt;/code&gt;  注解来覆盖它，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyConfiguration&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Scope(&amp;quot;prototype&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Encryptor &lt;span class=&#34;hljs-title function_&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;自定义bean的命名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义bean的命名&#34;&gt;#&lt;/a&gt; 自定义 Bean 的命名&lt;/h5&gt;
&lt;p&gt;默认情况下，配置类使用  &lt;code&gt;@Bean&lt;/code&gt;  方法的名称作为结果 Bean 的名称。然而，这个功能可以通过  &lt;code&gt;name&lt;/code&gt;  属性来重写，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(&amp;quot;myThing&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Thing &lt;span class=&#34;hljs-title function_&#34;&gt;thing&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Thing&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;bean-别名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean-别名&#34;&gt;#&lt;/a&gt; Bean 别名&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt;  注解的  &lt;code&gt;name&lt;/code&gt;  属性接受一个  &lt;code&gt;String&lt;/code&gt;  数组来实现这一目的。下面的例子展示了如何为一个  &lt;code&gt;bean&lt;/code&gt;  设置若干别名。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(&amp;#123;&amp;quot;dataSource&amp;quot;, &amp;quot;subsystemA-dataSource&amp;quot;, &amp;quot;subsystemB-dataSource&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; DataSource &lt;span class=&#34;hljs-title function_&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// instantiate, configure and return DataSource bean...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;bean-描述description&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean-描述description&#34;&gt;#&lt;/a&gt; Bean 描述（Description）&lt;/h5&gt;
&lt;p&gt;有时，为  &lt;code&gt;bean&lt;/code&gt;  提供更详细的文本描述是有帮助的。为了给  &lt;code&gt;@Bean&lt;/code&gt;  添加描述，你可以使用  &lt;code&gt;@Description&lt;/code&gt;  注解，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Description(&amp;quot;Provides a basic example of a bean&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Thing &lt;span class=&#34;hljs-title function_&#34;&gt;thing&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Thing&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;使用configuration注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用configuration注解&#34;&gt;#&lt;/a&gt; 使用 @Configuration 注解&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;  是一个类级注解，表示一个对象是 Bean 定义的来源。 &lt;code&gt;@Configuration&lt;/code&gt;  类通过  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法声明 bean。对  &lt;code&gt;@Configuration&lt;/code&gt;  类上的  &lt;code&gt;@Bean&lt;/code&gt;  方法的调用也可以用来定义 bean 间的依赖关系。&lt;/p&gt;
&lt;h5 id=&#34;注入bean间的依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入bean间的依赖&#34;&gt;#&lt;/a&gt; 注入 bean 间的依赖&lt;/h5&gt;
&lt;p&gt;当 Bean 相互之间有依赖关系时，表达这种依赖关系就像让一个  &lt;code&gt;bean&lt;/code&gt;  方法调用另一个一样简单，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanOne &lt;span class=&#34;hljs-title function_&#34;&gt;beanOne&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt;(beanTwo());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanTwo &lt;span class=&#34;hljs-title function_&#34;&gt;beanTwo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanTwo&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;使用componentscan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用componentscan&#34;&gt;#&lt;/a&gt; 使用 @ComponentScan&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ComponentScan(basePackages = &amp;quot;org.example&amp;quot;, //扫描的包&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        includeFilters = @Filter(type = FilterType.REGEX, pattern = &amp;quot;.*Stub.*Repository&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        excludeFilters = @Filter(Repository.class))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面的列表显示了等效的 XML。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.example&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:include-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;regex&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.*Stub.*Repository&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:exclude-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;annotation&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.Springframework.stereotype.Repository&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代理&#34;&gt;#&lt;/a&gt; 代理&lt;/h1&gt;
&lt;p&gt;代理模式术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理类：包装目标类的类&lt;/li&gt;
&lt;li&gt;目标类：被包装的类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过代理类包装目标类，代理类对客户端完全透明。客户端访问代理类，代理类再访问目标类，外界无法访问目标类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GoF&lt;/code&gt;  23 种设计模式之一的代理模式可用来进行一些功能操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现代码增强。目标对象只需要关注业务代码，额外的操作可以在代理对象中实现。&lt;/li&gt;
&lt;li&gt;提高安全性。在完全进入目标对象前，由代理对象进行一系列的安全判断，以防安全问题或错误出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;java&lt;/code&gt;  中代理可分为静态代理和动态代理。代理必须通过接口完成。&lt;/p&gt;
&lt;h2 id=&#34;静态代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态代理&#34;&gt;#&lt;/a&gt; 静态代理&lt;/h2&gt;
&lt;p&gt;现在有一个接口  &lt;code&gt;OrderService&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 生成订单&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 查看订单详情&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 修改订单&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是它的实现类  &lt;code&gt;OrderServiceImpl&lt;/code&gt;  也就是目标类，用于订单的一些操作：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceImpl&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;订单已生成&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;订单信息如下：******&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;订单已修改&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下就为目标类的代理类  &lt;code&gt;OrderServiceProxy&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceProxy&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;// 代理对象&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 目标对象&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; OrderService orderService;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 通过构造方法将目标对象传递给代理对象&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;OrderServiceProxy&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(OrderService orderService)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.orderService = orderService;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        orderService.generate();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        orderService.detail();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        orderService.modify();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可见代理类对目标类进行了一些功能增强，且使用了对象组合，大大降低了耦合度。&lt;/p&gt;
&lt;p&gt;客户端通过访问该代理类，就可以访问目标类的功能，且能使用额外的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上就是代理模式中的静态代理，其中  &lt;code&gt;OrderService&lt;/code&gt;  接口是代理类和目标类的共同接口。 &lt;code&gt;OrderServiceImpl&lt;/code&gt;  是目标类。 &lt;code&gt;OrderServiceProxy&lt;/code&gt;  是代理类。&lt;/p&gt;
&lt;p&gt;静态代理的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果系统中业务接口很多，一个接口对应一个代理类，会导致类爆炸&lt;/li&gt;
&lt;li&gt;增强代码荣誉无法复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态代理&#34;&gt;#&lt;/a&gt; 动态代理&lt;/h2&gt;
&lt;p&gt;动态代理通过使用反射来解决静态代理的缺点。下面我们来介绍动态代理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;  中的  &lt;code&gt;java.lang.reflect&lt;/code&gt;  中的  &lt;code&gt;Proxy&lt;/code&gt;  专门用来处理动态代理。 &lt;code&gt;Proxy&lt;/code&gt;  类使用静态方法  &lt;code&gt;newInstance()&lt;/code&gt;  来动态创建代理对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;proxy&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Proxy.newInstance(类加载器，接口，调用处理器) &lt;span class=&#34;hljs-comment&#34;&gt;//返回代理对象，可通过接口强转至目标接口的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*类加载器：	 ClassLoader，动态创建代理类字节码后，需要用类加载器加载进JVM内存。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    		代理类和目标类的类加载器必须相同，也就是应用类加载器。通过ClassLoader.getSystemClassLoader()获取默认的应用类加载器 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//接口：Class，目标类的接口的字节码对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//调用处理器：InvocationHandler。用于真正调用目标对象。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们仍然使用  &lt;code&gt;OrderService&lt;/code&gt;  和  &lt;code&gt;OrderServiceImpl&lt;/code&gt;  来举例子。下面我们来看  &lt;code&gt;InvocationHandler&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;InvocationHandler&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Throwable;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	InvocationHandler只有一个方法也就是invoke，我们来分析这个方法的参数。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	proxy：通过Proxy.newInstance()创建的代理对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	method：被调用的方法对象，通过method调用真正的目标方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	args：方法所用的参数数组。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	-------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	在调用目标方法前后即可使用增强代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们来实现  &lt;code&gt;InvocationHandler&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderInvocationHandler&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;InvocationHandler&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; OrderService orderService; &lt;span class=&#34;hljs-comment&#34;&gt;//获得目标对象，以用来调用目标对象的目标方法&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;OrderInvocationHandler&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(OrderService orderService)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.orderService = orderService;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; method.invoke(orderService, args); &lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; res;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成上述准备工作后，我们来创建代理对象：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;OrderService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;orderService&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (OrderService) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), OrderServiceImpl.class.getInterfaces(), &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderInvocationHandler&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceImpl&lt;/span&gt;()));&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//调用代理对象的方法&lt;/span&gt;&lt;br&gt;    orderService.generate();&lt;br&gt;    orderService.detail();&lt;br&gt;    orderService.modify();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;订单已生成&lt;br&gt;耗时1毫秒&lt;br&gt;订单信息如下：******&lt;br&gt;耗时0毫秒&lt;br&gt;订单已修改&lt;br&gt;耗时0毫秒&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可见动态代理解决了静态代理的类爆炸和代码冗余问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;下面我们来修改一下  &lt;code&gt;main&lt;/code&gt;  方法的一些细节：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    System.getProperties().put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;OrderService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;orderService&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (OrderService) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), OrderServiceImpl.class.getInterfaces(), &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderInvocationHandler&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceImpl&lt;/span&gt;()));&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//调用代理对象的方法&lt;/span&gt;&lt;br&gt;    orderService.generate();&lt;br&gt;    orderService.detail();&lt;br&gt;    orderService.modify();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外你将会在目录中看到  &lt;code&gt;jdk.proxy1.$proxy0&lt;/code&gt;  的字节码文件，该文件即之前创造的代理对象。下面我们来看看这对象：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;$Proxy0&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;																	该类实现了OrderService，所以该对象可以强转为目标接口对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;																	且继承了Proxy，由于单继承，所有JDK的动态代理无法使用继承实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;																	*/&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//代理类的所有属性均为Method常量。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m0;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m1;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m2;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m3;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m4;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m5;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 代理类的构造方法，以InvocationHandler为参数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; $Proxy0(InvocationHandler var1) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(var1);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (Integer)&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m0, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;		......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object var1)&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (Boolean)&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m1, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;[]&amp;#123;var1&amp;#125;);&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (String)&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m2, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;       ......&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m3, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;       ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;      ......&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m4, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;       ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;       ......&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m5, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;       ......&lt;br&gt;    &amp;#125;&lt;br&gt;    ......&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//代理类会获得Object的hashCode方法，equals方法、toString方法以及目标接口的所有方法的Method对象，然后重写他们&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            m0 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hashCode&amp;quot;&lt;/span&gt;);&lt;br&gt;            m1 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;equals&amp;quot;&lt;/span&gt;, Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;));&lt;br&gt;            m2 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;toString&amp;quot;&lt;/span&gt;);&lt;br&gt;            m3 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.proxy.OrderService&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;generate&amp;quot;&lt;/span&gt;);&lt;br&gt;            m4 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.proxy.OrderService&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;);&lt;br&gt;            m5 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.proxy.OrderService&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;modify&amp;quot;&lt;/span&gt;);&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;  会在运行中动态创建名为  &lt;code&gt;$Proxy&lt;/code&gt;  + 数字的代理类，并且让这个类继承  &lt;code&gt;Proxy&lt;/code&gt;  类并且实现目标接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;aop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aop&#34;&gt;#&lt;/a&gt; AOP&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;IoC&lt;/code&gt;  使软件组件松耦合。 &lt;code&gt;AOP&lt;/code&gt;  让你能够捕捉系统中经常使用的功能，把它转化成组件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOP（Aspect Oriented Programming）&lt;/code&gt; ：面向切面编程，面向方面编程。（ &lt;code&gt;AOP&lt;/code&gt;  是一种编程技术）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOP&lt;/code&gt;  是对  &lt;code&gt;OOP&lt;/code&gt;  的补充延伸。 &lt;code&gt;AOP&lt;/code&gt;  底层使用的就是动态代理来实现的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;AOP&lt;/code&gt;  使用的动态代理是： &lt;code&gt;JDK&lt;/code&gt;  动态代理 +  &lt;code&gt;CGLIB&lt;/code&gt;  动态代理技术。 &lt;code&gt;Spring&lt;/code&gt;  在这两种动态代理中灵活切换，如果是代理接口，会默认使用  &lt;code&gt;JDK&lt;/code&gt;  动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用  &lt;code&gt;CGLIB&lt;/code&gt;  。当然，你也可以强制通过一些配置让  &lt;code&gt;Spring&lt;/code&gt;  只使用  &lt;code&gt;CGLIB&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;aop介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aop介绍&#34;&gt;#&lt;/a&gt; AOP 介绍&lt;/h2&gt;
&lt;p&gt;一般一个系统当中都会有一些系统服务，例如：日志、事务管理、安全等。这些系统服务被称为：&lt;strong&gt;交叉业务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些&lt;strong&gt;交叉业务&lt;/strong&gt;几乎是通用的，不管你是做银行账户转账，还是删除用户数据。日志、事务管理、安全，这些都是需要做的。&lt;/p&gt;
&lt;p&gt;如果在每一个业务处理过程当中，都掺杂这些交叉业务代码进去的话，存在两方面问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一：交叉业务代码在多个业务流程中反复出现，显然这个交叉业务代码没有得到复用。并且修改这些交叉业务代码的话，需要修改多处。&lt;/li&gt;
&lt;li&gt;第二：程序员无法专注核心业务代码的编写，在编写核心业务代码的同时还需要处理这些交叉业务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用  &lt;code&gt;AOP&lt;/code&gt;  可以很轻松的解决以上问题。&lt;/p&gt;
&lt;img src=&#34;aop.png&#34; alt=&#34;AOP图解&#34;&gt;
&lt;h2 id=&#34;aop八大术语&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aop八大术语&#34;&gt;#&lt;/a&gt; AOP 八大术语&lt;/h2&gt;
&lt;p&gt;让我们首先定义一些核心的 AOP 概念和术语。这些术语并不是针对  &lt;code&gt;Spring&lt;/code&gt;  的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Aspect&lt;/code&gt; （切面）: 一个跨越多个类的关注点的模块化。事务管理是企业级 Java 应用中横切关注点的一个很好的例子。在  &lt;code&gt;Spring AOP&lt;/code&gt;  中，切面是通过使用常规类（基于  &lt;code&gt;XML&lt;/code&gt;  ）或使用  &lt;code&gt;@Aspect&lt;/code&gt;  注解的常规类（  &lt;code&gt;@AspectJ&lt;/code&gt;  风格）实现的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Join point&lt;/code&gt; （连接点）: 程序执行过程中的一个点，例如一个方法的执行或一个异常的处理。在  &lt;code&gt;Spring AOP&lt;/code&gt;  中，一个连接点总是代表一个方法的执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Advice&lt;/code&gt; （通知）: 一个切面在一个特定的连接点采取的行动。不同类型的 advice 包括 “around”、“before” 和 “after” 的 advice（Advice 类型将在后面讨论）。许多 AOP 框架，包括 Spring，都将 advice 建模为一个拦截器，并在连接点（Join point）周围维护一个拦截器链。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pointcut&lt;/code&gt; （切点）: 一个匹配连接点的谓词（predicate）。 &lt;code&gt;advice&lt;/code&gt;  与一个切点表达式相关联，并在切点匹配的任何连接点上运行（例如，执行一个具有特定名称的方法）。由切点表达式匹配的连接点概念是  &lt;code&gt;AOP&lt;/code&gt;  的核心，Spring 默认使用 AspectJ 的切点表达式语言。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Introduction&lt;/code&gt; （引入）: 代表一个类型声明额外的方法或字段。Spring AOP 允许你为任何 advice 的对象引入新的接口（以及相应的实现）。例如，你可以使用引入来使一个 bean 实现  &lt;code&gt;IsModified&lt;/code&gt;  接口，以简化缓存。（介绍在 AspectJ 社区中被称为类型间声明）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Target object&lt;/code&gt; （目标对象）: 被一个或多个切面所 advice 的对象。也被称为 “advised object”。由于 Spring AOP 是通过使用运行时代理来实现的，这个对象总是一个被代理的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AOP proxy&lt;/code&gt; （代理对象）: 一个由  &lt;code&gt;AOP&lt;/code&gt;  框架创建的对象，以实现切面契约（ &lt;code&gt;advice&lt;/code&gt;  方法执行等）。在  &lt;code&gt;Spring&lt;/code&gt;  框架中， &lt;code&gt;AOP&lt;/code&gt;  代理是一个  &lt;code&gt;JDK&lt;/code&gt;  动态代理或  &lt;code&gt;CGLIB&lt;/code&gt;  代理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Weaving&lt;/code&gt; （织入）: 将  &lt;code&gt;aspect&lt;/code&gt;  与其他应用程序类型或对象连接起来，以创建一个  &lt;code&gt;advice&lt;/code&gt;  对象。这可以在编译时（例如，使用  &lt;code&gt;AspectJ&lt;/code&gt;  编译器）、加载时或运行时完成。 &lt;code&gt;Spring AOP&lt;/code&gt;  和其他纯  &lt;code&gt;Java AOP&lt;/code&gt;  框架一样，在运行时进行织入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Spring AOP&lt;/code&gt;  包括以下类型的  &lt;code&gt;advice&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Before advice&lt;/code&gt; : 在连接点之前运行的 Advice ，但它不具备以下能力 阻止执行流进行到 join point 的能力（除非它抛出一个异常）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;After returning advice&lt;/code&gt; : 在一个连接点正常完成后运行的 Advice （例如，如果一个方法返回时没有抛出一个异常）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;After (finally) advice&lt;/code&gt; : 无论连接点以何种方式退出（正常或特殊返回），都要运行该 advice。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Around advice&lt;/code&gt; : 围绕一个连接点的 advice，如方法调用。这是最强大的一种 advice。Around advice 可以在方法调用之前和之后执行自定义行为。它还负责选择是否继续进行连接点或通过返回自己的返回值或抛出一个异常来缩短 advice 方法的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用spring的aop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用spring的aop&#34;&gt;#&lt;/a&gt; 使用 Spring 的 AOP&lt;/h2&gt;
&lt;p&gt;Spring 对 AOP 的实现包括以下 3 种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一种方式：Spring 框架结合 AspectJ 框架实现的 AOP，基于注解方式。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二种方式：Spring 框架结合 AspectJ 框架实现的 AOP，基于 XML 方式。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三种方式：Spring 框架自己实现的 AOP，基于 XML 配置方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用  &lt;code&gt;AOP&lt;/code&gt;  必须含有以下注解：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-aop&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-aspects&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;注解-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解-2&#34;&gt;#&lt;/a&gt; 注解&lt;/h3&gt;
&lt;p&gt;使用注解的方式，必须要是有  &lt;code&gt;@Aspecj&lt;/code&gt;  注解标注切面类。&lt;/p&gt;
&lt;h4 id=&#34;开启aspectj的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启aspectj的支持&#34;&gt;#&lt;/a&gt; 开启 @AspectJ 的支持&lt;/h4&gt;
&lt;h5 id=&#34;通过-xml-开启&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过-xml-开启&#34;&gt;#&lt;/a&gt; 通过  &lt;code&gt;XML&lt;/code&gt;  开启&lt;/h5&gt;
&lt;p&gt;使用  &lt;code&gt;aop&lt;/code&gt;  命名空间开启开启  &lt;code&gt;@AspectJ&lt;/code&gt;  的支持&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/aop&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	保证下面的约束存在&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	配置启用 @AspectJ 支持，当然如果你想约束aop的底层代理实现你也可以使用proxy-target-class属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	proxy-target-class默认为false，代表使用cglib动态代理或jdk的动态代理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	将proxy-target-class设置为true，则代表强制使用cglib动态代理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;aop:aspectj-autoproxy&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;通过注解开启&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过注解开启&#34;&gt;#&lt;/a&gt; 通过注解开启&lt;/h5&gt;
&lt;p&gt;在自定以的配置类中使用注解  &lt;code&gt;@EnableAspectJAutoProxy&lt;/code&gt;  开启  &lt;code&gt;@AspectJ&lt;/code&gt;  的支持：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@EnableAspectJAutoProxy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyConfiguration&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;声明一个-aspect类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明一个-aspect类&#34;&gt;#&lt;/a&gt; 声明一个 Aspect 类&lt;/h4&gt;
&lt;p&gt;启用  &lt;code&gt;@AspectJ&lt;/code&gt;  支持后，任何在你的  &lt;code&gt;application context&lt;/code&gt;  中定义的  &lt;code&gt;bean&lt;/code&gt;  ，其类是  &lt;code&gt;@AspectJ&lt;/code&gt;  切面（有  &lt;code&gt;@Aspect&lt;/code&gt;  注解），会被  &lt;code&gt;Spring&lt;/code&gt;  自动检测到，并用于配置 &lt;code&gt;Spring AOP&lt;/code&gt;  。接下来的两个例子展示了一个不怎么有用的切面所需的最小步骤。&lt;/p&gt;
&lt;p&gt;两个例子中的第一个显示了  &lt;code&gt;application context&lt;/code&gt;  中的一个普通  &lt;code&gt;Bean&lt;/code&gt;  定义，它指向一个用  &lt;code&gt;@Aspect&lt;/code&gt;  注解的  &lt;code&gt;Bean&lt;/code&gt;  类。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;myAspect&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.xyz.NotVeryUsefulAspect&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- configure properties of the aspect here --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两个例子中的第二个展示了  &lt;code&gt;NotVeryUsefulAspect&lt;/code&gt;  类的定义，它被  &lt;code&gt;@Aspect&lt;/code&gt;  注解了。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.xyz;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.aspectj.lang.annotation.Aspect;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;NotVeryUsefulAspect&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;声明一个切点pointcut&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明一个切点pointcut&#34;&gt;#&lt;/a&gt; 声明一个切点（Pointcut）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Pointcuts&lt;/code&gt;  确定感兴趣的连接点（ &lt;code&gt;join points&lt;/code&gt; ），从而使我们能够控制  &lt;code&gt;advice&lt;/code&gt;  的运行时间。 &lt;code&gt;Spring AOP&lt;/code&gt;  只支持  &lt;code&gt;Spring Bean&lt;/code&gt;  的方法执行连接点，所以你可以把 &lt;code&gt;pointcut&lt;/code&gt;  看作是对  &lt;code&gt;Spring Bean&lt;/code&gt;  上的方法执行的匹配。一个切点声明有两个部分：一个由名称和任何参数组成的签名，以及一个切点表达式，它决定了我们到底对哪些方法的执行感兴趣。在  &lt;code&gt;AOP&lt;/code&gt;  的  &lt;code&gt;@AspectJ&lt;/code&gt;  注解式中，一个  &lt;code&gt;pointcut&lt;/code&gt;  签名是由一个常规的方法定义提供的，而  &lt;code&gt;pointcut&lt;/code&gt;  表达式是通过使用  &lt;code&gt;@Pointcut&lt;/code&gt;  注解来表示的（作为 &lt;code&gt;pointcut&lt;/code&gt;  签名的方法必须是一个  &lt;code&gt;void&lt;/code&gt;  返回类型）。&lt;/p&gt;
&lt;p&gt;一个例子可以帮助我们清楚地了解切点签名和切点表达式之间的区别。下面的例子定义了一个名为  &lt;code&gt;anyOldTransfer&lt;/code&gt;  的切点，它匹配任何名为  &lt;code&gt;transfer&lt;/code&gt;  的方法的执行：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;execution(* transfer(..))&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// the pointcut expression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;anyOldTransfer&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;// the pointcut signature&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;支持的-pointcut-指定器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#支持的-pointcut-指定器&#34;&gt;#&lt;/a&gt; 支持的  &lt;code&gt;Pointcut&lt;/code&gt;  指定器&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Spring AOP&lt;/code&gt;  支持以下  &lt;code&gt;AspectJ&lt;/code&gt;  的切点指定器（  &lt;code&gt;PCD&lt;/code&gt;  ），用于切点表达式中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execution&lt;/code&gt; : 用于匹配方法执行的连接点。这是在使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时要使用的主要切点指定器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;within&lt;/code&gt; : 将匹配限制在某些类型内的连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时，执行在匹配类型内声明的方法）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中  &lt;code&gt;bean&lt;/code&gt;  引用（  &lt;code&gt;Spring AOP&lt;/code&gt;  代理）是给定类型的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中目标对象（被代理的应用程序对象）是给定类型的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中参数是给定类型的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@target&lt;/code&gt; : 限制匹配到连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中执行对象的类有一个给定类型的注解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@args&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中实际传递的参数的运行时类型有给定类型的注解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@within&lt;/code&gt; : 将匹配限制在具有给定注解的类型中的连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时，执行在具有给定注解的类型中声明的方法）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@annotation&lt;/code&gt; : 将匹配限制在连接点的主体（  &lt;code&gt;Spring AOP&lt;/code&gt;  中正在运行的方法）具有给定注解的连接点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;切点表达式用来定义通知（  &lt;code&gt;Advice&lt;/code&gt;  ）往哪些方法上切入。&lt;/p&gt;
&lt;h6 id=&#34;切点表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切点表达式&#34;&gt;#&lt;/a&gt; 切点表达式&lt;/h6&gt;
&lt;p&gt;切入点表达式语法格式：&lt;/p&gt;
&lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs stylus&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;execution&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;hljs-selector-attr&#34;&gt;[异常]&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问控制权限修饰符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选项。&lt;/li&gt;
&lt;li&gt;没写，就是 4 个权限都包括。&lt;/li&gt;
&lt;li&gt;写 public 就表示只包括公开的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回值类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必填项。&lt;/li&gt;
&lt;li&gt;* 表示返回值类型任意。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全限定类名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选项。&lt;/li&gt;
&lt;li&gt;两个点 “…” 代表当前包以及子包下的所有类。&lt;/li&gt;
&lt;li&gt;省略时表示所有的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必填项。&lt;/li&gt;
&lt;li&gt;* 表示所有方法。&lt;/li&gt;
&lt;li&gt;set * 表示所有的 set 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;形式参数列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;必填项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;() 表示没有参数的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(…) 参数类型和个数随意的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(*) 只有一个参数的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(*, String) 第一个参数类型随意，第二个参数是 String 的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异常：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选项。&lt;/li&gt;
&lt;li&gt;省略时表示任意异常类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;组合切点pointcut表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组合切点pointcut表达式&#34;&gt;#&lt;/a&gt; 组合切点（Pointcut）表达式&lt;/h6&gt;
&lt;p&gt;你可以通过使用  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;||&lt;/code&gt;  和  &lt;code&gt;!&lt;/code&gt;  来组合  &lt;code&gt;pointcut&lt;/code&gt;  表达式。你也可以通过名称来引用  &lt;code&gt;pointcut&lt;/code&gt;  表达式。下面的例子显示了三个  &lt;code&gt;pointcut&lt;/code&gt;  表达式。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.xyz;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Pointcuts&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;execution(public * *(..))&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//1&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;publicMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;within(com.xyz.trading..*)&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//2&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;inTrading&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;publicMethod() &amp;amp;&amp;amp; inTrading()&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//3&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;tradingOperation&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;如果一个方法执行连接点代表任何  &lt;code&gt;public&lt;/code&gt;  方法的执行，则  &lt;code&gt;publicMethod&lt;/code&gt;  匹配。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inTrading&lt;/code&gt;  匹配一个方法的执行是否在  &lt;code&gt;trading&lt;/code&gt;  模块中。&lt;/li&gt;
&lt;li&gt;如果一个方法的执行代表了  &lt;code&gt;trading&lt;/code&gt;  模块中的任何  &lt;code&gt;public&lt;/code&gt;  方法，则  &lt;code&gt;tradingOperation&lt;/code&gt;  匹配&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如上所示，从较小的命名的切点程序中建立更复杂的切点程序表达式是一种最佳做法。当通过名称来引用点切时，正常的  &lt;code&gt;Java&lt;/code&gt;  可见性规则适用（你可以看到同一类型中的  &lt;code&gt;private&lt;/code&gt;  切点、层次结构中的  &lt;code&gt;protected&lt;/code&gt;  切点、任何地方的  &lt;code&gt;public&lt;/code&gt;  切点，等等）。可见性并不影响切点的匹配。&lt;/p&gt;
&lt;h4 id=&#34;声明-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明-advice&#34;&gt;#&lt;/a&gt; 声明 Advice&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Advice&lt;/code&gt;  与一个切点表达式相关联，在切点匹配的方法执行之前、之后或周围（around）运行。切点表达式可以是一个内联切点，也可以是对一个 &lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-common-pointcuts&#34;&gt;命名切点&lt;/a&gt; 的引用&lt;/p&gt;
&lt;h5 id=&#34;before-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#before-advice&#34;&gt;#&lt;/a&gt; Before Advice&lt;/h5&gt;
&lt;p&gt;你可以通过使用  &lt;code&gt;@Before&lt;/code&gt;  注解在一个切面中声明  &lt;code&gt;before advice&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;下面的例子使用了一个内联的切点表达式。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeforeExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们使用一个 &lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-common-pointcuts&#34;&gt;命名的切点&lt;/a&gt;，我们可以把前面的例子改写成如下。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeforeExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;com.xyz.CommonPointcuts.dataAccessOperation()&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;after-returning-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#after-returning-advice&#34;&gt;#&lt;/a&gt; After Returning Advice&lt;/h5&gt;
&lt;p&gt;当一个匹配的方法执行正常返回时， &lt;code&gt;After returning advice&lt;/code&gt;  运行。你可以通过使用  &lt;code&gt;@AfterReturning&lt;/code&gt;  注解来声明它。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterReturningExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterReturning(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以有多个 advice 声明（也可以有其他成员），都在同一个切面。我们在这些例子中只展示了一个 advice 声明，以集中展示每个 advice 的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时，你需要在  &lt;code&gt;advice body&lt;/code&gt;  中访问被返回的实际值。你可以使用绑定返回值的  &lt;code&gt;@AfterReturning&lt;/code&gt;  的形式来获得这种访问权，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterReturningExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterReturning(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        pointcut=&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        returning=&amp;quot;retVal&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object retVal)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;returning&lt;/code&gt;  属性中使用的名称必须与 advice 方法中的参数名称相对应。当一个方法执行返回时，返回值会作为相应的参数值传递给  &lt;code&gt;advice&lt;/code&gt;  方法。 &lt;code&gt;returning&lt;/code&gt;  子句也限制了匹配，只匹配那些返回指定类型的值的方法执行（在这种情况下是  &lt;code&gt;Object&lt;/code&gt; ，它匹配任何返回值）。&lt;/p&gt;
&lt;h5 id=&#34;after-throwing-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#after-throwing-advice&#34;&gt;#&lt;/a&gt; After Throwing Advice&lt;/h5&gt;
&lt;p&gt;当一个匹配的方法执行通过抛出异常退出时， &lt;code&gt;After throwing advice&lt;/code&gt;  运行。你可以通过使用  &lt;code&gt;@AfterThrowing&lt;/code&gt;  注解来声明它，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterThrowingExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterThrowing(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doRecoveryActions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常情况下，你希望  &lt;code&gt;advice&lt;/code&gt;  只在给定类型的异常被抛出时运行，而且你也经常需要在  &lt;code&gt;advice body&lt;/code&gt;  中访问被抛出的异常。你可以使用  &lt;code&gt;throwing&lt;/code&gt;  属性来限制匹配（如果需要的话 — 否则使用  &lt;code&gt;Throwable&lt;/code&gt;  作为异常类型），并将抛出的异常绑定到  &lt;code&gt;advice&lt;/code&gt;  参数上。下面的例子展示了如何做到这一点。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterThrowingExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterThrowing(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        pointcut=&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        throwing=&amp;quot;ex&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doRecoveryActions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DataAccessException ex)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在  &lt;code&gt;throwing&lt;/code&gt;  属性中使用的名称必须与 advice 方法中的参数名称相对应。当一个方法的执行通过抛出一个异常退出时，该异常将作为相应的参数值传递给 advice 方法。 &lt;code&gt;throwing&lt;/code&gt;  子句也限制了匹配，只能匹配那些抛出指定类型的异常的方法执行（本例中是  &lt;code&gt;DataAccessException&lt;/code&gt; ）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意， &lt;code&gt;@AfterThrowing&lt;/code&gt;  并不表示一般的异常处理回调。具体来说， &lt;code&gt;@AfterThrowing advice&lt;/code&gt;  方法只应该接收来自连接点（用户声明的目标方法）本身的异常，而不是来自附带的  &lt;code&gt;@After&lt;/code&gt; / &lt;code&gt;@AfterReturning&lt;/code&gt;  方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;after-finally-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#after-finally-advice&#34;&gt;#&lt;/a&gt; After (Finally) Advice&lt;/h5&gt;
&lt;p&gt;当一个匹配的方法执行退出时，After (finally) advice 会运行。它是通过使用  &lt;code&gt;@After&lt;/code&gt;  注解来声明的。After advice 必须准备好处理正常和异常的返回条件。它通常被用于释放资源和类似的目的。下面的例子展示了如何使用 After finally advice。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterFinallyExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@After(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doReleaseLock&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意， &lt;code&gt;AspectJ&lt;/code&gt;  中的  &lt;code&gt;@After&lt;/code&gt;   &lt;code&gt;advice&lt;/code&gt;  被定义为 “after finally advice”，类似于  &lt;code&gt;try-catch&lt;/code&gt;  语句中的  &lt;code&gt;finally&lt;/code&gt;  块。它将对任何结果、正常返回或从连接点（用户声明的目标方法）抛出的异常进行调用，这与  &lt;code&gt;@AfterReturning&lt;/code&gt;  不同，后者只适用于成功的正常返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;around-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#around-advice&#34;&gt;#&lt;/a&gt; Around Advice&lt;/h5&gt;
&lt;p&gt;最后一种  &lt;code&gt;Advice&lt;/code&gt;  是  &lt;code&gt;Around Advice&lt;/code&gt; 。 “围绕” 一个匹配的方法的执行而运行。它有机会在方法运行之前和之后进行工作，并决定何时、如何、甚至是否真正运行该方法。如果你需要以线程安全的方式分享方法执行前后的状态，例如启动和停止一个定时器，那么  &lt;code&gt;Around advice&lt;/code&gt;  经常被使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;始终使用符合你要求的最不强大的  &lt;code&gt;advice&lt;/code&gt;  形式。例如，如果  &lt;code&gt;before advice&lt;/code&gt;  足以满足你的需要，就不要使用  &lt;code&gt;around advice&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Around advice&lt;/code&gt;  是通过用  &lt;code&gt;@Around&lt;/code&gt;  注解来声明一个方法的。该方法应该声明  &lt;code&gt;Object&lt;/code&gt;  为其返回类型，并且该方法的第一个参数必须是  &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  类型。在 advice 方法的 body 中，你必须在  &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  上调用  &lt;code&gt;proceed()&lt;/code&gt; ，以使底层方法运行。在没有参数的情况下调用  &lt;code&gt;proceed()&lt;/code&gt;  将导致调用者的原始参数在底层方法被调用时被提供给它。对于高级用例，有一个重载的  &lt;code&gt;proceed()&lt;/code&gt;  方法，它接受一个参数数组（ &lt;code&gt;Object[]&lt;/code&gt; ）。当底层方法被调用时，数组中的值将被用作该方法的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;around advice&lt;/code&gt;  返回的值是方法的调用者看到的返回值。例如，一个简单的缓存切面可以从缓存中返回一个值（如果有的话），或者调用  &lt;code&gt;proceed()&lt;/code&gt;  （并返回该值），如果没有的话。请注意，  &lt;code&gt;proceed&lt;/code&gt;  可以被调用一次，多次，或者根本就不在  &lt;code&gt;around advice&lt;/code&gt;  的  &lt;code&gt;body&lt;/code&gt;  中调用。所有这些都是合法的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你将  &lt;code&gt;around advice&lt;/code&gt;  方法的返回类型声明为  &lt;code&gt;void&lt;/code&gt; ，那么将总是返回给调用者  &lt;code&gt;null&lt;/code&gt; ，有效地忽略了任何调用  &lt;code&gt;proceed()&lt;/code&gt;  的结果。因此，我们建议  &lt;code&gt;around advice&lt;/code&gt;  方法声明一个  &lt;code&gt;Object&lt;/code&gt;  的返回类型。该  &lt;code&gt;advice&lt;/code&gt;  方法通常应该返回调用  &lt;code&gt;proceed()&lt;/code&gt;  所返回的值，即使底层方法的返回类型为  &lt;code&gt;void&lt;/code&gt; 。然而， &lt;code&gt;advice&lt;/code&gt;  可以根据使用情况选择性地返回一个缓存的值、一个封装的值或一些其他的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的例子显示了如何使用  &lt;code&gt;around advice&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AroundExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Around(&amp;quot;execution(* com.xyz..service.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;doBasicProfiling&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ProceedingJoinPoint pjp)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// start stopwatch&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;retVal&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; pjp.proceed();&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// stop stopwatch&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; retVal;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;advice-参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#advice-参数&#34;&gt;#&lt;/a&gt; Advice 参数&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了完全类型化的  &lt;code&gt;advice&lt;/code&gt;  ，这意味着你可以在  &lt;code&gt;advice&lt;/code&gt;  签名中声明你需要的参数（就像我们在前面看到的返回和抛出的例子一样），而不是一直用  &lt;code&gt;Object[]&lt;/code&gt;  数组工作。我们将在本节后面看到如何使参数和其他上下文值对  &lt;code&gt;advice&lt;/code&gt;  主体可用。首先，我们看一下如何编写通用  &lt;code&gt;advice&lt;/code&gt;  ，它可以找出  &lt;code&gt;advice&lt;/code&gt;  当前所  &lt;code&gt;advice&lt;/code&gt;  的方法。&lt;/p&gt;
&lt;h6 id=&#34;访问当前的-joinpoint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问当前的-joinpoint&#34;&gt;#&lt;/a&gt; 访问当前的  &lt;code&gt;JoinPoint&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;任何  &lt;code&gt;advice method&lt;/code&gt;  都可以声明一个  &lt;code&gt;org.aspectj.lang.JoinPoint&lt;/code&gt;  类型的参数作为其第一个参数。请注意， &lt;code&gt;around advice&lt;/code&gt;  方法需要声明一个  &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  类型的第一个参数，它是  &lt;code&gt;JoinPoint&lt;/code&gt;  的一个子类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JoinPoint&lt;/code&gt;  接口提供了许多有用的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getArgs()&lt;/code&gt; : 返回方法的参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getThis()&lt;/code&gt; : 返回代理对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getTarget()&lt;/code&gt; : 返回目标对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSignature()&lt;/code&gt; : 返回正在被  &lt;code&gt;advice&lt;/code&gt;  的方法的描述。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt; : 打印对所  &lt;code&gt;advice&lt;/code&gt;  的方法的有用描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;向-advice-传递参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#向-advice-传递参数&#34;&gt;#&lt;/a&gt; 向 Advice 传递参数&lt;/h6&gt;
&lt;p&gt;我们已经看到了如何绑定返回值或异常值（使用  &lt;code&gt;after returning&lt;/code&gt;  和  &lt;code&gt;after throwing advice&lt;/code&gt;  ）。为了使参数值对  &lt;code&gt;advice body&lt;/code&gt;  可用，你可以使用  &lt;code&gt;args&lt;/code&gt;  的绑定形式。如果你在  &lt;code&gt;args&lt;/code&gt;  表达式中使用参数名来代替类型名，那么当  &lt;code&gt;advice&lt;/code&gt;  被调用时，相应参数的值将作为参数值被传递。一个例子可以让我们更清楚地了解这一点。假设你想  &lt;code&gt;advice&lt;/code&gt;  执行以一个  &lt;code&gt;Account&lt;/code&gt;  对象为第一参数的 DAO 操作，并且你需要在  &lt;code&gt;advice body&lt;/code&gt;  中访问该  &lt;code&gt;account&lt;/code&gt;  。你可以写如下内容。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* com.xyz.dao.*.*(..)) &amp;amp;&amp;amp; args(account,..)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;validateAccount&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Account account)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pointcut&lt;/code&gt;  表达式的  &lt;code&gt;args(account,..)&lt;/code&gt;  部分有两个作用。首先，它将匹配限制在方法的执行上，即方法至少需要一个参数，并且传递给该参数的参数是一个  &lt;code&gt;Account&lt;/code&gt;  的实例。其次，它使实际的  &lt;code&gt;Account&lt;/code&gt;  对象通过  &lt;code&gt;account&lt;/code&gt;  参数对  &lt;code&gt;advice&lt;/code&gt;  可用。&lt;/p&gt;
&lt;p&gt;另一种写法是声明一个 pointcut，当它与一个连接点匹配时 “提供”  &lt;code&gt;Account&lt;/code&gt;  对象的值，然后从 advice 中引用命名的 pointcut。这看起来就像这样。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;execution(* com.xyz.dao.*.*(..)) &amp;amp;&amp;amp; args(account,..)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;accountDataAccessOperation&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Account account)&lt;/span&gt; &amp;#123;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;accountDataAccessOperation(account)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;validateAccount&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Account account)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多细节请参见 AspectJ 编程指南。&lt;/p&gt;
&lt;p&gt;代理对象（ &lt;code&gt;this&lt;/code&gt; ）、目标对象（ &lt;code&gt;target&lt;/code&gt; ）和注解（ &lt;code&gt;@within&lt;/code&gt; 、 &lt;code&gt;@target&lt;/code&gt; 、 &lt;code&gt;@annotation&lt;/code&gt;  和  &lt;code&gt;@args&lt;/code&gt; ）都可以用类似的方式绑定。接下来的一组例子展示了如何匹配执行带有  &lt;code&gt;@Auditable&lt;/code&gt;  注解的方法，并提取审计代码。&lt;/p&gt;
&lt;p&gt;下面是  &lt;code&gt;@Auditable&lt;/code&gt;  注解的定义。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.METHOD)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Auditable &amp;#123;&lt;br&gt;    AuditCode &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面显示了与  &lt;code&gt;@Auditable&lt;/code&gt;  方法的执行相匹配的 advice。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;com.xyz.Pointcuts.publicMethod() &amp;amp;&amp;amp; @annotation(auditable)&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Auditable auditable)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;AuditCode&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; auditable.value();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的  &lt;code&gt;pointcut&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;advice-参数和泛型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#advice-参数和泛型&#34;&gt;#&lt;/a&gt; Advice 参数和泛型&lt;/h6&gt;
&lt;p&gt;Spring AOP 可以处理类声明和方法参数中使用的泛型。假设你有一个像下面这样的泛型。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Sample&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sampleGenericMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(T param)&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sampleGenericCollectionMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Collection&amp;lt;T&amp;gt; param)&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以将方法类型的拦截限制在某些参数类型上，办法是将 advice 参数与你想拦截方法的参数类型联系起来。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* ..Sample+.sampleGenericMethod(*)) &amp;amp;&amp;amp; args(param)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;beforeSampleMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(MyType param)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Advice implementation&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法对泛型集合不起作用。所以你不能像下面这样定义一个 pointcut。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* ..Sample+.sampleGenericCollectionMethod(*)) &amp;amp;&amp;amp; args(param)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;beforeSampleMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Collection&amp;lt;MyType&amp;gt; param)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Advice implementation&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了实现这一点，我们必须检查集合中的每一个元素，这是不太合理的，因为我们也无法决定如何处理一般的  &lt;code&gt;null&lt;/code&gt; 。为了实现与此类似的东西，你必须将参数输入到  &lt;code&gt;Collection&amp;lt;?&amp;gt;&lt;/code&gt;  中，并手动检查元素的类型。&lt;/p&gt;
&lt;h6 id=&#34;确定参数名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#确定参数名称&#34;&gt;#&lt;/a&gt; 确定参数名称&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;advice&lt;/code&gt;  调用中的参数绑定依赖于将在切点表达式中使用的名称与 advice 和切点方法签名中声明的参数名称相匹配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring AOP&lt;/code&gt;  使用以下  &lt;code&gt;ParameterNameDiscoverer&lt;/code&gt;  实现来确定参数名称。每个 discoverers 将有机会发现参数名称，第一个成功的发现者获胜。如果没有一个注册的 discoverers 能确定参数名称，那么将抛出一个异常。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AspectJAnnotationParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用用户通过相应的 advice 或指向性注解中的  &lt;code&gt;argNames&lt;/code&gt;  属性明确指定的参数名称。详见 &lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-ataspectj-advice-params-names-explicit&#34;&gt;明确的参数名称&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;KotlinReflectionParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;Kotlin&lt;/code&gt;  反射 API 来确定参数名称。只有在 classpath 上存在这种 API 时，才会使用这个 discoverer。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;StandardReflectionParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用标准的  &lt;code&gt;java.lang.reflect.Parameter&lt;/code&gt;  API 来确定参数名称。需要用  &lt;code&gt;javac&lt;/code&gt;  的  &lt;code&gt;-parameters&lt;/code&gt;  标志来编译代码。建议在 Java 8 + 上采用这种方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LocalVariableTableParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;分析 advice 类的字节码中可用的局部变量表，从 debug 信息中确定参数名称。需要用 debug 参数（至少是  &lt;code&gt;-g:vars&lt;/code&gt; ）编译代码。从 Spring Framework 6.0 开始被弃用，在 Spring Framework 6.1 中被移除，以支持用  &lt;code&gt;-parameters&lt;/code&gt;  编译代码。在 GraalVM 原生镜像中不支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AspectJAdviceParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从  &lt;code&gt;pointcut&lt;/code&gt;  表达式、 &lt;code&gt;returning&lt;/code&gt; , 和  &lt;code&gt;throwing&lt;/code&gt;  子句中推导出参数名称。关于所用算法的细节，请参见 &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/6.0.8-SNAPSHOT/javadoc-api/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.html&#34;&gt;javadoc&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;明确的参数名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#明确的参数名称&#34;&gt;#&lt;/a&gt; 明确的参数名称&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;@AspectJ&lt;/code&gt;  advice 和 pointcut 注解有一个可选的  &lt;code&gt;argNames&lt;/code&gt;  属性，你可以用它来指定被注解方法的参数名称。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个 @AspectJ 切面已经被 AspectJ 编译器（ &lt;code&gt;ajc&lt;/code&gt; ）编译，即使没有 debug 信息，你也不需要添加  &lt;code&gt;argNames&lt;/code&gt;  属性，因为编译器会保留需要的信息。同样地，如果一个 @AspectJ 切面已经用  &lt;code&gt;javac&lt;/code&gt;  的  &lt;code&gt;-parameters&lt;/code&gt;  标志进行了编译，你就不需要添加  &lt;code&gt;argNames&lt;/code&gt;  属性，因为编译器会保留所需的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的例子显示了如何使用  &lt;code&gt;argNames&lt;/code&gt;  属性。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    value = &amp;quot;com.xyz.Pointcuts.publicMethod() &amp;amp;&amp;amp; target(bean) &amp;amp;&amp;amp; @annotation(auditable)&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    argNames = &amp;quot;bean,auditable&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, Auditable auditable)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;AuditCode&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; auditable.value();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ... use code and bean&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的 pointcut。声明  &lt;code&gt;bean&lt;/code&gt;  和  &lt;code&gt;auditable&lt;/code&gt;  为参数名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果第一个参数是  &lt;code&gt;JoinPoint&lt;/code&gt; 、 &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  或  &lt;code&gt;JoinPoint.StaticPart&lt;/code&gt;  类型，你可以在  &lt;code&gt;argNames&lt;/code&gt;  属性的值中省略参数的名称。例如，如果你修改前面的 advice 来接收连接点（join point）对象， &lt;code&gt;argNames&lt;/code&gt;  属性不需要包括它。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    value = &amp;quot;com.xyz.Pointcuts.publicMethod() &amp;amp;&amp;amp; target(bean) &amp;amp;&amp;amp; @annotation(auditable)&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    argNames = &amp;quot;bean,auditable&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(JoinPoint jp, Object bean, Auditable auditable)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;AuditCode&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; auditable.value();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ... use code, bean, and jp&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的 pointcut。声明  &lt;code&gt;bean&lt;/code&gt;  和  &lt;code&gt;auditable&lt;/code&gt;  为参数名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给予  &lt;code&gt;JoinPoint&lt;/code&gt; 、 &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  或  &lt;code&gt;JoinPoint.StaticPart&lt;/code&gt;  类型的第一个参数的特殊处理，对于不收集任何其他连接点上下文的 advice 方法特别方便。在这种情况下，你可以省略  &lt;code&gt;argNames&lt;/code&gt;  属性。例如，下面的 advice 不需要声明  &lt;code&gt;argNames&lt;/code&gt;  属性。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;com.xyz.Pointcuts.publicMethod()&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(JoinPoint jp)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ... use jp&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的 pointcut。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h1&gt;
&lt;h2 id=&#34;事务概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务概述&#34;&gt;#&lt;/a&gt; 事务概述&lt;/h2&gt;
&lt;p&gt;在一个业务流程当中，通常需要多条  &lt;code&gt;DML&lt;/code&gt;  语句共同联合才能完成，这多条  &lt;code&gt;DML&lt;/code&gt;  语句必须同时成功，或者同时失败，这样才能保证数据的安全。&lt;/p&gt;
&lt;p&gt;事务的四个处理过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开启事务 ( &lt;code&gt;start transaction&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;执行核心业务代码&lt;/li&gt;
&lt;li&gt;提交事务（如果核心业务处理过程中没有出现异常）( &lt;code&gt;commit transaction&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;回滚事务（如果核心业务处理过程中出现异常）( &lt;code&gt;rollback transaction&lt;/code&gt; )&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring对事务的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对事务的支持&#34;&gt;#&lt;/a&gt; Spring 对事务的支持&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编程式事务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过编写代码的方式来实现事务的管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明式事务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于注解方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 XML 配置方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;   专门针对事务开发了一套  &lt;code&gt;API&lt;/code&gt; ， &lt;code&gt;API&lt;/code&gt;  的核心接口如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransactionManager&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    TransactionStatus &lt;span class=&#34;hljs-title function_&#34;&gt;getTransaction&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TransactionDefinition definition)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; TransactionException;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TransactionStatus status)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; TransactionException;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TransactionStatus status)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; TransactionException;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;PlatformTransactionManager&lt;/code&gt;  接口： &lt;code&gt;spring&lt;/code&gt;   事务管理器的核心接口。在 ** &lt;code&gt;Spring6&lt;/code&gt; ** 中它有两个实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataSourceTransactionManager&lt;/code&gt; ：支持 &lt;code&gt;JdbcTemplate&lt;/code&gt; 、 &lt;code&gt;MyBatis&lt;/code&gt; 、 &lt;code&gt;Hibernate&lt;/code&gt;  等事务管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JtaTransactionManager&lt;/code&gt; ：支持分布式事务管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;声明式事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明式事务&#34;&gt;#&lt;/a&gt; 声明式事务&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架的声明式事务管理是通过  &lt;code&gt;Spring&lt;/code&gt;  面向切面编程（ &lt;code&gt;AOP&lt;/code&gt; ）实现的。然而，由于事务方面的代码是随  &lt;code&gt;Spring&lt;/code&gt;  框架的发布而来，并且可以以模板的方式使用，所以一般不需要理解  &lt;code&gt;AOP&lt;/code&gt;  的概念来有效地使用这些代码。&lt;/p&gt;
&lt;h3 id=&#34;注解实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解实现&#34;&gt;#&lt;/a&gt; 注解实现&lt;/h3&gt;
&lt;p&gt;使用注解  &lt;code&gt;@Transactional&lt;/code&gt;  注解方法或者类，则可以为方法添加事务管理。&lt;/p&gt;
&lt;h4 id=&#34;xml配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xml配置&#34;&gt;#&lt;/a&gt; xml 配置&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--配置数据源--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driverClassName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--通过数据源配置DataSourceTransactionManager--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--对指定事务管理器开启声明式事务注解--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;tx:annotation-driven&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;transaction-manager&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;配置类配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置类配置&#34;&gt;#&lt;/a&gt; 配置类配置&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ComponentScan(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        basePackages = &amp;#123;&amp;quot;com.jhy.bank&amp;quot;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        excludeFilters = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;            @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = &amp;#123;Data.class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@PropertySource(&amp;quot;jdbc.properties&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@EnableTransactionManagement&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//开启声明式事务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyConfiguration&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.driver&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String driver;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.url&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String url;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.username&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String username;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.password&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String password;&lt;br&gt;	&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//配置数据源&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; DruidDataSource &lt;span class=&#34;hljs-title function_&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;DruidDataSource&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;druidDataSource&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;DruidDataSource&lt;/span&gt;();&lt;br&gt;        druidDataSource.setUrl(url);&lt;br&gt;        druidDataSource.setDriverClassName(driver);&lt;br&gt;        druidDataSource.setUsername(username);&lt;br&gt;        druidDataSource.setPassword(password);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; druidDataSource;&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//通过数据源配置DataSourceTransactionManager&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span class=&#34;hljs-title function_&#34;&gt;transactionManager&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DataSource dataSource)&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;DataSourceTransactionManager&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dataSourceTransactionManager&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;DataSourceTransactionManager&lt;/span&gt;();&lt;br&gt;        dataSourceTransactionManager.setDataSource(dataSource);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; dataSourceTransactionManager;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;然后就可以使用注解  &lt;code&gt;@Transactional&lt;/code&gt;  开启声明式事务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;transactional设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#transactional设置&#34;&gt;#&lt;/a&gt; @Transactional 设置&lt;/h4&gt;
&lt;p&gt;默认的  &lt;code&gt;@Transactional&lt;/code&gt;  设置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;propagation&lt;/code&gt;  （传播）设置为  &lt;code&gt;PROPAGATION_REQUIRED&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;隔离级别是  &lt;code&gt;ISOLATION_DEFAULT&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;事务是读写的。&lt;/li&gt;
&lt;li&gt;事务超时默认为底层事务系统的默认超时，如果不支持超时，则默认为无。&lt;/li&gt;
&lt;li&gt;任何  &lt;code&gt;RuntimeException&lt;/code&gt;  或  &lt;code&gt;Error&lt;/code&gt;  都会触发回滚，而任何被检查的  &lt;code&gt;Exception&lt;/code&gt;  则不会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以改变这些默认设置。下表总结了  &lt;code&gt;@Transactional&lt;/code&gt;  注解的各种属性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://springdoc.cn/spring/data-access.html#tx-multiple-tx-mgrs-with-attransactional&#34;&gt;value&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的  &lt;code&gt;qualifier&lt;/code&gt; ，指定要使用的事务管理器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;transactionManager&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;value&lt;/code&gt;  别名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;label&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;  标签数组，用于为事务添加表达式描述。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标签可以由事务管理器评估，以便将特定于实现的行为与实际事务联系起来。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[propagation](# 事务传播（Propagation）)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;enum&lt;/code&gt; :  &lt;code&gt;Propagation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的  &lt;code&gt;propagation&lt;/code&gt;  （传播）设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%EF%BC%88Isolation%EF%BC%89&#34;&gt;isolation&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;enum&lt;/code&gt; :  &lt;code&gt;Isolation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的隔离级别。仅适用于  &lt;code&gt;REQUIRED&lt;/code&gt;  或  &lt;code&gt;REQUIRES_NEW&lt;/code&gt;  的传播值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E4%BA%8B%E5%8A%A1%E8%B6%85%E6%97%B6%EF%BC%88timeout%EF%BC%89&#34;&gt;timeout&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;int&lt;/code&gt;  (以秒为单位的粒度)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的事务超时。仅适用于  &lt;code&gt;REQUIRED&lt;/code&gt;  或  &lt;code&gt;REQUIRES_NEW&lt;/code&gt;  的传播值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timeoutString&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;  (以秒为单位的粒度)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于指定以秒为单位的  &lt;code&gt;timeout&lt;/code&gt; ，作为  &lt;code&gt;String&lt;/code&gt;  值的替代方案，例如，作为占位符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E5%8F%AA%E8%AF%BB%E4%BA%8B%E5%8A%A1%EF%BC%88readOnly%EF%BC%89&#34;&gt;readOnly&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;读写事务与只读事务。只适用于  &lt;code&gt;REQUIRED&lt;/code&gt;  或  &lt;code&gt;REQUIRES_NEW&lt;/code&gt;  的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E5%BC%82%E5%B8%B8%E5%9B%9E%E6%BB%9A%EF%BC%88rollbackFor%EF%BC%89&#34;&gt;rollbackFor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Class&lt;/code&gt;  对象的数组，必须从  &lt;code&gt;Throwable&lt;/code&gt;  派生。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的必然会引起回滚的异常类型数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rollbackForClassName&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异常名称模式（pattern）的数组。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的必然会引起回滚异常名称模式（ &lt;code&gt;patterns&lt;/code&gt; ）数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E5%BC%82%E5%B8%B8%E4%B8%8D%E5%9B%9E%E6%BB%9A%EF%BC%88rollbackFor&#34;&gt;noRollbackFor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;必须从  &lt;code&gt;Throwable&lt;/code&gt;  派生的  &lt;code&gt;Class&lt;/code&gt;  对象的数组。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的不会引起回滚的  &lt;code&gt;exception&lt;/code&gt;  类型数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;noRollbackForClassName&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异常名称模式（pattern）的数组。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的不会引起回滚异常名称模式（ &lt;code&gt;patterns&lt;/code&gt; ）数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;事务传播propagation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务传播propagation&#34;&gt;#&lt;/a&gt; 事务传播（Propagation）&lt;/h5&gt;
&lt;p&gt;一共有七种传播行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REQUIRED：支持当前事务，如果不存在当前事务就新建一个 (默认)&lt;strong&gt;【没有就新建，有就加入】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行 **【有就加入，没有就不管了】**&lt;/li&gt;
&lt;li&gt;MANDATORY：必须运行在一个事务中，如果当前没有事务，就会抛出一个异常 **【有就加入，没有就抛异常】**&lt;/li&gt;
&lt;li&gt;REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起 **【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】**&lt;/li&gt;
&lt;li&gt;NOT_SUPPORTED：以非事务方式运行，如果当前有事务存在，则挂起当前事务 **【不支持事务，存在就挂起】**&lt;/li&gt;
&lt;li&gt;NEVER：以非事务方式运行，如果有一个事务存在，抛出异常 **【不支持事务，存在就抛异常】**&lt;/li&gt;
&lt;li&gt;NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像 REQUIRED 一样。&lt;strong&gt;【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和 REQUIRED 一样。】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;事务隔离级别isolation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务隔离级别isolation&#34;&gt;#&lt;/a&gt; 事务隔离级别（Isolation）&lt;/h5&gt;
&lt;p&gt;数据库中读取数据存在的三大问题：（三大读问题）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脏读：读取到没有提交到数据库的数据，叫做脏读。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;  先进来修改了数据但未提交，此时切换至 &lt;code&gt;b&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt;  读取该数据，此后切换至 &lt;code&gt;a&lt;/code&gt;  提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可重复读：在同一个事务当中，第一次和第二次读取的数据不一样。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;  先进来读取了数据，然后切换至 &lt;code&gt;b&lt;/code&gt;  修改了数据并进行提交，此后切换至 &lt;code&gt;a&lt;/code&gt;  重新读取了数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;幻读：读到的数据是假的。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;  先进来但未开始读取数据，然后切换至 &lt;code&gt;b&lt;/code&gt;  修改了数据并提交，此后切换至 &lt;code&gt;a&lt;/code&gt;  开始读取数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务隔离级别包括四个级别，分别解决上述问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读未提交： &lt;code&gt;READ_UNCOMMITTED&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种隔离级别，存在脏读问题，所谓的脏读 (dirty read) 表示能够读取到其它事务未提交的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读提交： &lt;code&gt;READ_COMMITTED&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决了脏读问题，其它事务提交之后才能读到，但存在不可重复读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可重复读： &lt;code&gt;REPEATABLE_READ&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决了不可重复读，可以达到可重复读效果，只要当前事务不结束，读取到的数据一直都是一样的。但存在幻读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;序列化： &lt;code&gt;SERIALIZABLE&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决了幻读问题，事务排队执行。不支持并发。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;隔离级别&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;脏读&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;幻读&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读未提交&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读提交&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可重复读&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;序列化&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;Spring&lt;/code&gt;  中事务隔离有 &lt;strong&gt;5&lt;/strong&gt; 种情况：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Isolation&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//默认，数据库未Mysql则为可重复读，Oracle则为读未提交&lt;/span&gt;&lt;br&gt;	DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//读未提交&lt;/span&gt;&lt;br&gt;	READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//读可提交&lt;/span&gt;&lt;br&gt;	READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//可重复度&lt;/span&gt;&lt;br&gt;	REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//序列化&lt;/span&gt;&lt;br&gt;	SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;事务超时timeout&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务超时timeout&#34;&gt;#&lt;/a&gt; 事务超时（timeout）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(timeout = 10)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以秒为单位，如果&lt;strong&gt;指定时间&lt;/strong&gt;内  &lt;code&gt;DML&lt;/code&gt;  语句还未执行完成 &lt;strong&gt;最终结果会选择回滚。&lt;/strong&gt;，那么则会抛出错误。默认值 - 1，表示没有时间限制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指定时间：指的是从最后一条事务语句结束之前的时间，在这后的时间都不算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;只读事务readonly&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#只读事务readonly&#34;&gt;#&lt;/a&gt; 只读事务（readOnly）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(readOnly = true)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将当前事务设置为只读事务，在该事务执行过程中只允许  &lt;code&gt;select&lt;/code&gt;  语句执行，其余的  &lt;code&gt;DML&lt;/code&gt;  语句均不会允许执行。&lt;/p&gt;
&lt;h5 id=&#34;异常回滚rollbackfor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常回滚rollbackfor&#34;&gt;#&lt;/a&gt; 异常回滚（rollbackFor）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(rollbackFor = RuntimeException.class)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置发生了哪些异常才会回滚&lt;/p&gt;
&lt;h5 id=&#34;异常不回滚rollbackfor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常不回滚rollbackfor&#34;&gt;#&lt;/a&gt; 异常不回滚（rollbackFor）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(noRollbackFor = NullPointerException.class)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置发生哪些异常不会回滚&lt;/p&gt;
&lt;h1 id=&#34;测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试&#34;&gt;#&lt;/a&gt; 测试&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了一套  &lt;code&gt;API&lt;/code&gt;  对  &lt;code&gt;junit&lt;/code&gt;  进行了整合&lt;/p&gt;
&lt;h2 id=&#34;spring对junit4的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对junit4的支持&#34;&gt;#&lt;/a&gt; Spring 对 JUnit4 的支持&lt;/h2&gt;
&lt;p&gt;首先需要以下的依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--Spring整合JUnit的依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--junit4依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.13.2&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ContextConfiguration(&amp;quot;classpath:spring.xml&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//@ContextConfiguration(classes = MyConfiguration.class) 配置类的形式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SpringJUnit4Test&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;br&gt;  	&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; User user;    &lt;br&gt;    &lt;br&gt;   &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testFoo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt; .....&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;spring对junit5的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对junit5的支持&#34;&gt;#&lt;/a&gt; Spring 对 JUnit5 的支持&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--Spring整合JUnit的依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--junit5依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit-jupiter-api&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.10.0&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ExtendWith(SpringExtension.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ContextConfiguration(&amp;quot;classpath:spring.xml&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//@ContextConfiguration(classes = MyConfiguration.class) 配置类的形式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SpringJUnit4Test&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;br&gt;  	&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; User user;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testFoo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt; .....&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你不需要像以前那样获取  &lt;code&gt;IoC&lt;/code&gt;  容器之后再获取  &lt;code&gt;bean&lt;/code&gt;  ，而是可以通过自动装配的方式来获取  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;整合mybtias&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整合mybtias&#34;&gt;#&lt;/a&gt; 整合 Mybtias&lt;/h1&gt;
&lt;p&gt;将步骤分为 &lt;strong&gt;11&lt;/strong&gt; 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入依赖&lt;/li&gt;
&lt;li&gt;编写三层架构&lt;/li&gt;
&lt;li&gt;创建  &lt;code&gt;pojo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%BC%96%E5%86%99Mybatis%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&#34;&gt;编写 Mybatis 的核心配置文件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;该文件可以没有，大部分的配置可以转移到  &lt;code&gt;Spring&lt;/code&gt;  配置文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编写  &lt;code&gt;mapper&lt;/code&gt;  映射文件&lt;/li&gt;
&lt;li&gt;配置  &lt;code&gt;IoC&lt;/code&gt;  容器中三层架构的  &lt;code&gt;bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90&#34;&gt;配置数据源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AESqlSessionFactoryBean&#34;&gt;配置 SqlSessionFactoryBean&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;用于生产  &lt;code&gt;SqlSessionFactory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AEmapper%E6%8E%A5%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8&#34;&gt;配置 mapper 接口扫描器&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;用于将  &lt;code&gt;mapper&lt;/code&gt;  接口的代理类注册为  &lt;code&gt;bean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8&#34;&gt;配置事务管理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%BC%80%E5%90%AF%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1&#34;&gt;开启声明式事务&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编写mybatis的核心配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写mybatis的核心配置文件&#34;&gt;#&lt;/a&gt; 编写 Mybatis 的核心配置文件&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mybatis的总配置文件--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;hljs-keyword&#34;&gt;configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;   	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	关于Mybatis环境、数据源等移动至Spring配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	核心设置必须在该配置文件中配置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mapUnderscoreToCamelCase&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;logImpl&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;STDOUT_LOGGING&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置数据源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置数据源&#34;&gt;#&lt;/a&gt; 配置数据源&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:property-placeholder&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;location&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;classpath:jdbc.properties&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driverClassName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置sqlsessionfactorybean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置sqlsessionfactorybean&#34;&gt;#&lt;/a&gt; 配置 SqlSessionFactoryBean&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--注入数据源--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;configLocation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mybatis-config.xml&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--配置文件所在位置--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;typeAliasesPackage&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.acct.entity&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--起别名--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果mapper映射文件和接口不在同一目录要设置该属性--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mapperLocations&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com/jhy/acct/mapper/*.xml&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mapper映射文件所在地--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置mapper接口扫描器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置mapper接口扫描器&#34;&gt;#&lt;/a&gt; 配置 mapper 接口扫描器&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.mybatis.spring.mapper.MapperScannerConfigurer&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;basePackage&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.acct.mapper&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mapper接口的包路径--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  会默认扫描指定包下的  &lt;code&gt;Mapper&lt;/code&gt;  接口，并根据命名规则自动加载对应的  &lt;code&gt;Mapper&lt;/code&gt;  映射文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;配置事务管理器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置事务管理器&#34;&gt;#&lt;/a&gt; 配置事务管理器&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;开启声明式事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启声明式事务&#34;&gt;#&lt;/a&gt; 开启声明式事务&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;tx:annotation-driven&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;transaction-manager&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依赖&#34;&gt;#&lt;/a&gt; 依赖&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mysql驱动--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mysql&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-j&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;8.0.33&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--spring上下文，同时引入aop，bean，core，expression--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--druid数据源--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;druid&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.13&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入mybatis官方提供的mybatis与spring整合的依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.3&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入spring-jdbc，包括事务管理器--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入junit依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.13.2&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入spring-test--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入jakarta的注解，包括@Resource--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation-api&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.1&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入mybatis本体依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.5.11&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.riversea.top/2024/02/17/git/</guid>
            <title>Git学习</title>
            <link>https://blog.riversea.top/2024/02/17/git/</link>
            <category>Git</category>
            <pubDate>Sat, 17 Feb 2024 20:42:54 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;起步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#起步&#34;&gt;#&lt;/a&gt; 起步&lt;/h1&gt;
&lt;h2 id=&#34;关于版本控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关于版本控制&#34;&gt;#&lt;/a&gt; 关于版本控制&lt;/h2&gt;
&lt;p&gt;什么是 “版本控制”？我为什么要关心它呢？ 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特 定版本修订情况的系统。&lt;/p&gt;
&lt;p&gt;如果你是位图形或网页设计师，可能会需要保存某一幅图片或页面布局文件的所有修订版本（这或许是你非常渴 望拥有的功能），采用版本控制系统（VCS）是个明智的选择。 有了它你就可以将选定的文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地 方，从而找出导致怪异问题出现的原因，又是谁在何时报告了某个功能缺陷等等。 使用版本控制系统通常还意 味着，就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以轻松恢复到原先的样子。 但额外增加 的工作量却微乎其微。&lt;/p&gt;
&lt;h2 id=&#34;本地版本控制系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本地版本控制系统&#34;&gt;#&lt;/a&gt; 本地版本控制系统&lt;/h2&gt;
&lt;p&gt;许多人习惯用复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别。 这么做唯一的好处就是简单，但是特别容易犯错。有时候会混淆所在的工作目录，一不小心会写错文件或者覆盖意想外的文件。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，人们很久以前就开发了许多种本地版本控制系统，大多都是采用某种简单的数据库来记录文件的历次更新差异。&lt;/p&gt;
&lt;img src=&#34;local_vcs.png&#34; alt=&#34;本地版本控制&#34;/&gt;
&lt;h2 id=&#34;集中化的版本控制系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集中化的版本控制系统&#34;&gt;#&lt;/a&gt; 集中化的版本控制系统&lt;/h2&gt;
&lt;p&gt;接下来人们又遇到一个问题，如何让在不同系统上的开发者协同工作？ 于是，** 集中化的版本控制系统 （Centralized Version Control Systems，简称 CVCS）** 应运而生。 这类系统，诸如  &lt;code&gt;CVS&lt;/code&gt; 、 &lt;code&gt;Subversion&lt;/code&gt;  以及  &lt;code&gt;Perforce&lt;/code&gt;  等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。 多年以来，这已成为版本控制系统的标准做法。&lt;/p&gt;
&lt;img src=&#34;centry_vcs.png&#34; alt=&#34;集中化的版本控制&#34;/&gt;
&lt;p&gt;这种做法带来了许多好处，特别是相较于老式的本地  &lt;code&gt;VCS&lt;/code&gt;  来说。 现在，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个  &lt;code&gt;CVCS&lt;/code&gt;  要远比在各个客户端上维护本地数据库来得轻松容易。&lt;/p&gt;
&lt;p&gt;事分两面，有好有坏。 这么做最显而易见的缺点是中央服务器的单点故障。 如果宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据 —— 包括项目的整个变更历史，只剩下人们在各自机器上保留的单独快照。 本地版本控制系统也存在类似问题，只要整个项目的历史记录被保存在单一位置，就有丢失所有历史更新记录的风险。&lt;/p&gt;
&lt;h2 id=&#34;分布式版本控制系统&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分布式版本控制系统&#34;&gt;#&lt;/a&gt; 分布式版本控制系统&lt;/h2&gt;
&lt;p&gt;于是 ** 分布式版本控制系统（Distributed Version Control System，简称 DVCS）** 面世了。 在这类系统中，像  &lt;code&gt;Git&lt;/code&gt; 、 &lt;code&gt;Mercurial&lt;/code&gt; 、 &lt;code&gt;Bazaar&lt;/code&gt;  以及  &lt;code&gt;Darcs&lt;/code&gt;  等，客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。 这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。&lt;/p&gt;
&lt;img src=&#34;distributed_vcs.png&#34; alt=&#34;分布式版本控制&#34;/&gt;
&lt;p&gt;更进一步，许多这类系统都可以指定和若干不同的远端代码仓库进行交互。籍此，你就可以在同一个项目中，分别和不同工作小组的人相互协作。你可以根据需要设定不同的协作流程，比如层次模型式的工作流，而这在以前的集中式系统中是无法实现的。&lt;/p&gt;
&lt;h1 id=&#34;git的一些特点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git的一些特点&#34;&gt;#&lt;/a&gt; Git 的一些特点&lt;/h1&gt;
&lt;h2 id=&#34;基于快照而非差异&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于快照而非差异&#34;&gt;#&lt;/a&gt; 基于快照，而非差异&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  和其它版本控制系统（包括  &lt;code&gt;Subversion&lt;/code&gt;  和近似工具）的主要差别在于  &lt;code&gt;Git&lt;/code&gt;  对待数据的方式。 从概念上来说，其它大部分系统以文件变更列表的方式存储信息，这类系统（ &lt;code&gt;CVS&lt;/code&gt; 、 &lt;code&gt;Subversion&lt;/code&gt; 、 &lt;code&gt;Perforce&lt;/code&gt; 、 &lt;code&gt;Bazaar&lt;/code&gt;  等等）将它们存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异（它们通常称作&lt;strong&gt;基于差异（delta-based）的版本控制&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;基于差异的版本控制系统工作流如下：&lt;/p&gt;
&lt;img src=&#34;vcs_diff.png&#34; alt=&#34;基于差异的版本控制系统&#34; /&gt;
&lt;p&gt;基于快照的版本控制系统工作流如下：&lt;/p&gt;
&lt;img src=&#34;vcs_git.png&#34; alt=&#34;基于快照的版本控制系统&#34; /&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  不按照以上方式对待或保存数据。反之， &lt;code&gt;Git&lt;/code&gt;  更像是把数据看作是对小型文件系统的一系列快照。 在  &lt;code&gt;Git&lt;/code&gt;  中，每当你提交更新或保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。 为了效率，如果文件没有修改， &lt;code&gt;Git&lt;/code&gt;  不再重新存储该文件，而是只保留一个链接指向之前存储的文件。  &lt;code&gt;Git&lt;/code&gt;  对待数据更像是一个&lt;strong&gt;快照流&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  更像是一个小型的文件系统，提供了许多以此为基础构建的超强工具，而不只是一个简单的  &lt;code&gt;VCS&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;近乎所有操作都是本地执行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#近乎所有操作都是本地执行&#34;&gt;#&lt;/a&gt; 近乎所有操作都是本地执行&lt;/h2&gt;
&lt;p&gt;离线时可以本地进行更新或提交，联网后再提交至远程仓库。&lt;/p&gt;
&lt;h2 id=&#34;保证完整性&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#保证完整性&#34;&gt;#&lt;/a&gt; 保证完整性&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  中所有的数据在存储前都计算校验和，然后以校验和来引用。这意味着不可能在  &lt;code&gt;Git&lt;/code&gt;  不知情时更改任何文件内容或目录内容。 &lt;code&gt;Git&lt;/code&gt;  用以计算校验和的机制叫做  &lt;code&gt;SHA-1&lt;/code&gt;  散列（ &lt;code&gt;hash&lt;/code&gt; ，哈希）。这是一个由  &lt;code&gt;40&lt;/code&gt;  个十六进制字符（ &lt;code&gt;0-9&lt;/code&gt;  和  &lt;code&gt;a-f&lt;/code&gt; ）组 成的字符串，基于  &lt;code&gt;Git&lt;/code&gt;  中文件的内容或目录结构计算出来。  &lt;code&gt;SHA-1&lt;/code&gt;  哈希看起来是这样：&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powerpowershell&#34;&gt;24b9da6552252987aa493b52f8696cd6d3b00373&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。&lt;/p&gt;
&lt;h2 id=&#34;git一般只添加不删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git一般只添加不删除&#34;&gt;#&lt;/a&gt; Git 一般只添加不删除&lt;/h2&gt;
&lt;p&gt;你执行的  &lt;code&gt;Git&lt;/code&gt;  操作，几乎只往  &lt;code&gt;Git&lt;/code&gt;  数据库中添加数据。你很难使用  &lt;code&gt;Git&lt;/code&gt;  从数据库中删除数据，也就是说  &lt;code&gt;Git&lt;/code&gt;  几乎不会执行任何可能导致文件不可恢复的操作。一旦提交快照到  &lt;code&gt;Git&lt;/code&gt;  中，就难以丢失数据，特别是如果你定期的推送数据库到其它仓库的话，但是未提交更新时有可能丢失或弄乱修改的内容的风险。&lt;/p&gt;
&lt;p&gt;更深度探讨  &lt;code&gt;Git&lt;/code&gt;  如何保存数据及恢复丢失数据的话题，请参考&lt;a href=&#34;#%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C&#34;&gt;撤销操作&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;三种状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三种状态&#34;&gt;#&lt;/a&gt; 三种状态&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  有三种状态，你的文件可能处于其中之一：  &lt;code&gt;已提交（committed）&lt;/code&gt; 、 &lt;code&gt;已修改（modified）&lt;/code&gt; 和  &lt;code&gt;已暂存（staged&lt;/code&gt; ）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;已修改表示修改了文件，但还没保存到数据库中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;已提交表示数据已经安全地保存在本地数据库中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这会让我们的  &lt;code&gt;Git&lt;/code&gt;  项目拥有三个阶段：工作区、暂存区以及  &lt;code&gt;Git&lt;/code&gt;  目录。&lt;/p&gt;
&lt;img src=&#34;git_container.png&#34; alt=&#34;工作目录、暂存区域以及 Git 仓库&#34; /&gt;
&lt;p&gt;工作区是对项目的某个版本独立提取出来的内容。 这些从  &lt;code&gt;Git&lt;/code&gt;  仓库的压缩数据库中提取出来的文件，放在磁盘上 供你使用或修改。&lt;/p&gt;
&lt;p&gt;暂存区是一个文件，保存了下次将要提交的文件列表信息，一般在  &lt;code&gt;Git&lt;/code&gt;  仓库目录中。 按照  &lt;code&gt;Git&lt;/code&gt;  的术语叫做 “索引”，不过一般说法还是叫 “暂存区”。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  仓库目录是  &lt;code&gt;Git&lt;/code&gt;  用来保存项目的元数据和对象数据库的地方。 这是  &lt;code&gt;Git&lt;/code&gt;  中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。&lt;/p&gt;
&lt;h3 id=&#34;git流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git流程&#34;&gt;#&lt;/a&gt;  &lt;code&gt;Git&lt;/code&gt;  流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在工作区&lt;strong&gt;修改文件 (modified)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;将下次提交的更改选择性暂存，将部分更改&lt;strong&gt;添加到暂存区 (staged)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;提交更新，找到暂存区的文件，将快照永久性地&lt;strong&gt;存储到 Git 目录 (committed)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果  &lt;code&gt;Git&lt;/code&gt;  目录中保存着特定版本的文件，就属于&lt;strong&gt;已提交&lt;/strong&gt;状态。 如果文件已修改并放入暂存区，就属于&lt;strong&gt;已暂存&lt;/strong&gt;状态。 如果自上次检出后，作了修改但还没有放到暂存区域，就是&lt;strong&gt;已修改&lt;/strong&gt;状态&lt;/p&gt;
&lt;h1 id=&#34;git配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git配置&#34;&gt;#&lt;/a&gt; Git 配置&lt;/h1&gt;
&lt;h2 id=&#34;初次运行配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#初次运行配置&#34;&gt;#&lt;/a&gt; 初次运行配置&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  自带  &lt;code&gt;git config&lt;/code&gt;  工具来帮助设置  &lt;code&gt;Git&lt;/code&gt;  外观和行为配置变量，变量分别存储在 3 个不同地文件中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/etc/gitconfig&lt;/code&gt;  文件：位于  &lt;code&gt;Git&lt;/code&gt;  目录下，包含系统上每一个用户以及仓库的通用配置。执行 &lt;code&gt;git config --list --system&lt;/code&gt; 访问该文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt;  或  &lt;code&gt;~/.config/config&lt;/code&gt;  文件（ &lt;code&gt;windows&lt;/code&gt;  中位于  &lt;code&gt;%USERPROFILE%&lt;/code&gt;  目录下的  &lt;code&gt;.gitconfig&lt;/code&gt;  文件）：只针对当前用户。执行 &lt;code&gt;git config --list --global&lt;/code&gt; 访问该文件，&lt;strong&gt;这会对你系统上所有的仓库生效&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;当前使用仓库的  &lt;code&gt;Git&lt;/code&gt;  目录中的  &lt;code&gt;.config&lt;/code&gt;  文件  &lt;code&gt;.config&lt;/code&gt;  ：只针对该仓库。执行 &lt;code&gt;git config --list --local&lt;/code&gt; 访问该文件。默认情况使用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置文件会通过 &lt;code&gt;3 &amp;gt; 2 &amp;gt; 1&lt;/code&gt;  的顺序进行配置覆盖&lt;/p&gt;
&lt;p&gt;可以执行 &lt;code&gt;git config --list --show-origin&lt;/code&gt; 查看所有的配置变量以及它们所在的文件&lt;/p&gt;
&lt;h2 id=&#34;配置用户信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置用户信息&#34;&gt;#&lt;/a&gt; 配置用户信息&lt;/h2&gt;
&lt;p&gt;每一次  &lt;code&gt;Git&lt;/code&gt;  提交都会将这些信息写入提交中且&lt;strong&gt;不可更改&lt;/strong&gt;。邮箱可以不存在，只是用来标识某个用户&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; user.name &amp;lt;username&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置提交用户名&lt;/span&gt;&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; user.email &amp;lt;emai&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#设置提交邮箱&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以通过  &lt;code&gt;git config &amp;lt;key&amp;gt;&lt;/code&gt;  的 方式查看某一变量&lt;/p&gt;
&lt;h2 id=&#34;配置文本编辑器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置文本编辑器&#34;&gt;#&lt;/a&gt; 配置文本编辑器&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git config --global core.editor &amp;lt;editor&amp;gt;&lt;/code&gt; ，若在 windows 中则需添加绝对路径 &lt;code&gt;$ git config --global core.editor &amp;lt;path/to/editor&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;检查配置信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检查配置信息&#34;&gt;#&lt;/a&gt; 检查配置信息&lt;/h2&gt;
&lt;p&gt;使用  &lt;code&gt;git config --list&lt;/code&gt;  命令查看所有配置的变量，Git 会读取所有  &lt;code&gt;.gitconfig&lt;/code&gt;  文件，可能会包含相同变量，Git 只使用最后被找到的变量。&lt;/p&gt;
&lt;h2 id=&#34;获取帮助&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取帮助&#34;&gt;#&lt;/a&gt; 获取帮助&lt;/h2&gt;
&lt;p&gt;下面是三种等价配置&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git help &amp;lt;verb&amp;gt;&lt;br&gt;git &amp;lt;verb&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--help&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;man&lt;/span&gt; git-&amp;lt;verb&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若不想获取太详细的信息，则使用 &lt;code&gt;git &amp;lt;verb&amp;gt; -h&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如，要想获得  &lt;code&gt;git config&lt;/code&gt;  命令的手册，执行  &lt;code&gt;git help config&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;git基础&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git基础&#34;&gt;#&lt;/a&gt; Git 基础&lt;/h1&gt;
&lt;h2 id=&#34;获取仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取仓库&#34;&gt;#&lt;/a&gt; 获取仓库&lt;/h2&gt;
&lt;p&gt;两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将尚未成为仓库的文件夹变成仓库&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过 cd 命令进入文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行  &lt;code&gt;git init&lt;/code&gt;  将该文件夹变为仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该命令将创建一个名为  &lt;code&gt;.git&lt;/code&gt;  的子目录，默认为隐藏目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建并编写文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;添加文件至暂存区&lt;/p&gt;
 &lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git add .&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以执行以下命令进行提交&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git commit &lt;span class=&#34;hljs-literal&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;initial project version&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从其他服务器克隆一个已存在的 Git 仓库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运行  &lt;code&gt;git clone &amp;lt;url&amp;gt; [name]&lt;/code&gt;  命令获取 Git 仓库
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[name]&lt;/code&gt;  ：设置  &lt;code&gt;clone&lt;/code&gt;  之后的本地仓库名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;更新记录至仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更新记录至仓库&#34;&gt;#&lt;/a&gt; 更新记录至仓库&lt;/h2&gt;
&lt;p&gt;工作目录下的文件有且只有&lt;strong&gt;已跟踪&lt;/strong&gt;和&lt;strong&gt;未跟踪&lt;/strong&gt;两种状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;已跟踪&lt;/strong&gt;指已被纳入版本控制的文件，在上一次快照有记录。工作一段时间后它们的状态可能是未修改，已修改或已放入暂存区。简而言之，已跟踪的文件就是  &lt;code&gt;Git&lt;/code&gt;  已经知道的文件。&lt;/p&gt;
&lt;p&gt;工作目录中除&lt;strong&gt;已跟踪&lt;/strong&gt;文件外的其它所有文件都属于&lt;strong&gt;未跟踪&lt;/strong&gt;文件，它们既不存在于上次快照的记录中，也没有被放入暂存区。初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态，因为  &lt;code&gt;Git&lt;/code&gt;  刚刚检出了它们，而你尚未编辑过它们。&lt;/p&gt;
&lt;p&gt;编辑过某些文件之后，由于自上次提交后你对它们做了修改， &lt;code&gt;Git&lt;/code&gt;  将它们标记为已修改文件。 在工作时，你可以选择性地将这些修改过的文件放入暂存区，然后提交所有已暂存的修改，如此反复。&lt;/p&gt;
&lt;p&gt;文件周期变化如下：&lt;/p&gt;
&lt;img src=&#34;git_wk.png&#34; alt=&#34;文件的状态变化周期&#34; /&gt;
&lt;p&gt;使用 &lt;code&gt;git add&lt;/code&gt;  命令后即代表该文件被追踪&lt;/p&gt;
&lt;h2 id=&#34;检查当前文件状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检查当前文件状态&#34;&gt;#&lt;/a&gt; 检查当前文件状态&lt;/h2&gt;
&lt;p&gt;运行 &lt;code&gt;git status&lt;/code&gt;  命令查看哪些文件处于什么状态。如果在克隆仓库后立即使用此命令，会看到类似这样的输出：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master #分支名默认为master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;. #该分支同远程服务器上对应的分支没有偏离&lt;br&gt;nothing to commit, working directory clean &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则  &lt;code&gt;Git&lt;/code&gt;  会在&lt;a href=&#34;#%E6%96%B0%E6%B7%BB%E5%8A%A0%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6&#34;&gt;新添加跟踪文件&lt;/a&gt;中列出来&lt;/p&gt;
&lt;h3 id=&#34;新添加跟踪文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#新添加跟踪文件&#34;&gt;#&lt;/a&gt; 新添加跟踪文件&lt;/h3&gt;
&lt;p&gt;例：新建 README.txt 文件&lt;/p&gt;
&lt;p&gt;运行 &lt;code&gt;git status&lt;/code&gt;  命令，会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Untracked files:&lt;br&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)&lt;br&gt;  README.txt&lt;br&gt;nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在状态报告中可以看到新建的  &lt;code&gt;README.txt&lt;/code&gt;  文件出现在  &lt;code&gt;Untracked files&lt;/code&gt;  下面，代表其未被跟踪。即未曾出现在快照中。&lt;/p&gt;
&lt;h3 id=&#34;跟踪新文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跟踪新文件&#34;&gt;#&lt;/a&gt; 跟踪新文件&lt;/h3&gt;
&lt;p&gt;运行 &lt;code&gt;git add README.txt&lt;/code&gt;  命令，会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git restore --staged &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README.txt&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Changes to be committed&lt;/strong&gt; 代表该文件已被放入&lt;strong&gt;暂存区 (staged)&lt;/strong&gt;，现在已被跟踪&lt;/p&gt;
&lt;h3 id=&#34;暂存已经修改的文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#暂存已经修改的文件&#34;&gt;#&lt;/a&gt; 暂存已经修改的文件&lt;/h3&gt;
&lt;p&gt;例：该目录中有一被跟踪的  &lt;code&gt;README.md&lt;/code&gt;  文件，我们对其修改后，会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README&lt;br&gt;Changes not staged for commit:&lt;br&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;br&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working&lt;br&gt;directory)&lt;br&gt;  modified: README.md&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;文件  &lt;code&gt;README.md&lt;/code&gt;  出现在  &lt;code&gt;Changes not staged for commit&lt;/code&gt;  这行下面，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。再次运行&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git add README.md &lt;span class=&#34;hljs-comment&#34;&gt;#添加README.md至暂存区&lt;/span&gt;&lt;br&gt;git status&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会出现以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README.txt&lt;br&gt;  modified: README.md&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在两个文件都已暂存，下次提交时就会一并记录到仓库。&lt;/p&gt;
&lt;p&gt;此时若你再次修改  &lt;code&gt;README.md&lt;/code&gt;  或  &lt;code&gt;README.txt&lt;/code&gt;  会出现以下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  new file: README.txt&lt;br&gt;  modified: README.md&lt;br&gt;Changes not staged for commit:&lt;br&gt;  (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;br&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working&lt;br&gt;directory)&lt;br&gt;  modified: README.md&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代表着  &lt;code&gt;Git&lt;/code&gt;  只不过暂存了你运行  &lt;code&gt;git add&lt;/code&gt;  命令时的版本。如果你现在提交，版本将会是你最后一次运行  &lt;code&gt;git add&lt;/code&gt;  命令时的那个版本，而不是你运行  &lt;code&gt;git commit&lt;/code&gt;  时，在工作目录中的当前版本。所以，运行了  &lt;code&gt;git add&lt;/code&gt;  之后又作了修订的文件，需要重新运行  &lt;code&gt;git add&lt;/code&gt;  把最新版本重新暂存起来：&lt;/p&gt;
&lt;h2 id=&#34;状态简览&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#状态简览&#34;&gt;#&lt;/a&gt; 状态简览&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git status -s&lt;/code&gt;  或 &lt;code&gt;git status --short&lt;/code&gt;  可简略查看信息，例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status -s&lt;/span&gt;&lt;br&gt; M README&lt;br&gt;MM Rakefile&lt;br&gt;A lib/git.rb&lt;br&gt;M lib/simplegit.rb&lt;br&gt;?? LICENSE.txt&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;??&lt;/code&gt;  标记：新添加的未跟踪文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt; A&lt;/code&gt;  标记：新添加到暂存区中的文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;M &lt;/code&gt;  标记：修改过的文件&lt;/p&gt;
&lt;p&gt;输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示：  &lt;code&gt;README&lt;/code&gt;  文件 在工作区已修改但尚未暂存，而  &lt;code&gt;lib/simplegit.rb&lt;/code&gt;  文件已修改且已暂存。  &lt;code&gt;Rakefile&lt;/code&gt;  文件已修改，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。&lt;/p&gt;
&lt;h2 id=&#34;忽略文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#忽略文件&#34;&gt;#&lt;/a&gt; 忽略文件&lt;/h2&gt;
&lt;p&gt;忽略文件  &lt;code&gt;.gitignore&lt;/code&gt;  的格式规范如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有空行或者以  &lt;code&gt;#&lt;/code&gt;  开头的行都会被 Git 忽略。&lt;/li&gt;
&lt;li&gt;可以使用标准的  &lt;code&gt;glob&lt;/code&gt;  模式匹配，它会递归地应用在整个工作区中。 (shell 所使用的简化了的正则表达式)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;  匹配零个或多个任意字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[]&lt;/code&gt;  匹配括号中的任一字符
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[0-9a-z]&lt;/code&gt;  表示可以匹配到  &lt;code&gt;0-9&lt;/code&gt;  ，或者  &lt;code&gt;a-z&lt;/code&gt;  的任一字符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;  匹配任意一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**&lt;/code&gt;  表示匹配零个或多个中间目录&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;匹配模式可以以  &lt;code&gt;/&lt;/code&gt;  开头防止递归。 匹配模式可以以  &lt;code&gt;/&lt;/code&gt;  结尾指定目录。&lt;/li&gt;
&lt;li&gt;要忽略指定模式以外的文件或目录，可以在模式前加上叹号  &lt;code&gt;!&lt;/code&gt;  取反。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;查看已暂存和未暂存的修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看已暂存和未暂存的修改&#34;&gt;#&lt;/a&gt; 查看已暂存和未暂存的修改&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#当前做的哪些更新尚未暂存？&lt;/span&gt;&lt;br&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;diff&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;--staged&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#有哪些更新已暂存并准备好下次提交？&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;提交更新&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#提交更新&#34;&gt;#&lt;/a&gt; 提交更新&lt;/h2&gt;
&lt;p&gt;执行  &lt;code&gt;git commit&lt;/code&gt;  命令将暂存区的文件提交至仓库。此时 Git 会启动默认的编辑器，编辑器包含首行为一个空行 — 用于写入提示信息，其余为最后一次执行  &lt;code&gt;git add&lt;/code&gt;  命令的注释信息内容。关闭编辑器后， &lt;code&gt;Git&lt;/code&gt;  会丢弃注释信息，用输入的提交说明完成一次提交。也可直接执行  &lt;code&gt;git commit -m &amp;quot;&amp;lt;msg&amp;gt;&amp;quot;&lt;/code&gt;  。成功后， &lt;code&gt;Git&lt;/code&gt;  会提示你当前位于哪个分支，本 次提交的完整  &lt;code&gt;SHA-1&lt;/code&gt;  校验和是什么，以及在本次提交中，有多少文件修订过，多少行添加和删改过。&lt;/p&gt;
&lt;p&gt;执行  &lt;code&gt;git commit -a&lt;/code&gt;  可以跳过暂存区，直接将未放入暂存区的已跟踪文件进行提交。&lt;/p&gt;
&lt;h2 id=&#34;移除文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移除文件&#34;&gt;#&lt;/a&gt; 移除文件&lt;/h2&gt;
&lt;p&gt;要从  &lt;code&gt;Git&lt;/code&gt;  中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。 可以用  &lt;code&gt;git rm&lt;/code&gt;  命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;单纯删除工作区文件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用  &lt;code&gt;linux&lt;/code&gt;  命令 &lt;code&gt;rm&lt;/code&gt;  就能解决&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用  &lt;code&gt;git status&lt;/code&gt;  后会出现如下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes not staged for commit:&lt;br&gt;  (use &amp;quot;git add/rm &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)&lt;br&gt;  (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working&lt;br&gt;directory)&lt;br&gt;  deleted: 文件名&lt;br&gt;no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必须再次使用  &lt;code&gt;git rm&lt;/code&gt;  命令记录这次移除文件操作。下一次提交时，该文件不再列入版本管理，可以说该文件在  &lt;code&gt;Git&lt;/code&gt;  仓库中的新版本已经不存在了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除已放入暂存区的文件或已经修改的文件&lt;/p&gt;
 &lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;-f&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#会将已放入暂存区的文件删除(工作区的文件将会一并删除)，会暂存一条删除的变化，用于提交&lt;/span&gt;&lt;br&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;rm&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;-f&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;--cached&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#会将已放入暂存区的文件删除但仍会保留工作区的文件&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;移动文件修改文件名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#移动文件修改文件名称&#34;&gt;#&lt;/a&gt; 移动文件 (修改文件名称)&lt;/h2&gt;
&lt;p&gt;不像其它的  &lt;code&gt;VCS&lt;/code&gt;  系统， &lt;code&gt;Git&lt;/code&gt;  并不显式跟踪文件移动操作。 如果在  &lt;code&gt;Git&lt;/code&gt;  中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过  &lt;code&gt;Git&lt;/code&gt;  非常聪明，它会推断出究竟发生了什么。&lt;/p&gt;
&lt;p&gt;要在  &lt;code&gt;Git&lt;/code&gt;  中对文件改名，使用下面的命令&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;mv&lt;/span&gt; &amp;lt;old&lt;span class=&#34;hljs-operator&#34;&gt;-file&lt;/span&gt;&lt;span class=&#34;hljs-literal&#34;&gt;-name&lt;/span&gt;&amp;gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;new-file&lt;/span&gt;&lt;span class=&#34;hljs-literal&#34;&gt;-name&lt;/span&gt;&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它会恰如预期般正常工作。 实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;mv&lt;/span&gt; README.md README&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git status&lt;/span&gt;&lt;br&gt;On branch master&lt;br&gt;Your branch is up-to-date with &amp;#x27;origin/master&amp;#x27;.&lt;br&gt;Changes to be committed:&lt;br&gt;  (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)&lt;br&gt;  renamed: README.md -&amp;gt; README&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实，运行  &lt;code&gt;git mv&lt;/code&gt;  就相当于运行了下面三条命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;mv&lt;/span&gt; README.md README&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;rm&lt;/span&gt; README.md&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git add README&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此分开操作， &lt;code&gt;Git&lt;/code&gt;  也会意识到这是一次重命名，所以不管何种方式结果都一样。 两者唯一的区别在于， &lt;code&gt;git mv&lt;/code&gt;  是一条命令而非三条命令，直接使用  &lt;code&gt;git mv&lt;/code&gt;  方便得多。 不过在使用其他工具重命名文件时，记得在提交前  &lt;code&gt;git rm&lt;/code&gt;  删除旧文件名，再  &lt;code&gt;git add&lt;/code&gt;  添加新文件名。&lt;/p&gt;
&lt;h2 id=&#34;查看提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看提交历史&#34;&gt;#&lt;/a&gt; 查看提交历史&lt;/h2&gt;
&lt;p&gt;在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。完成这个任务最简单而又有效的工具是  &lt;code&gt;git log&lt;/code&gt;  命令。&lt;/p&gt;
&lt;p&gt;我们使用一个非常简单的 “simplegit” 项目作为示例。 运行下面的命令获取该项目：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git clone https://github.com/schacon/simplegit&lt;span class=&#34;hljs-literal&#34;&gt;-progit&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你在此项目中运行  &lt;code&gt;git log&lt;/code&gt;  命令时，可以看到下面的输出：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt;&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 16:40:33 2008 -0700&lt;br&gt;  removed unnecessary test&lt;br&gt;commit a11bef06a3f659402fe7563abf99ad00de2209e6&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 10:31:28 2008 -0700&lt;br&gt;  first commit&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不传入任何参数的默认情况下， &lt;code&gt;git log&lt;/code&gt;  会按时间先后顺序列出所有的提交，最近的更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 &lt;strong&gt;SHA-1 校验和、作者的名字和电子邮件地址、提交时间以及提交说明&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;补丁式的提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#补丁式的提交历史&#34;&gt;#&lt;/a&gt; 补丁式的提交历史&lt;/h3&gt;
&lt;p&gt;使用下面的命令查看补丁：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;-p&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--patch&lt;/span&gt; [-&lt;span class=&#34;hljs-type&#34;&gt;n&lt;/span&gt;] &lt;span class=&#34;hljs-comment&#34;&gt;#以补丁的方式查看提交历史，n用来限制的日志条目数量&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例如显示前两条日志条目：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; -p -2&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;diff --git a/Rakefile b/Rakefile&lt;br&gt;index a874b73..8f94139 100644&lt;br&gt;--- a/Rakefile&lt;br&gt;+++ b/Rakefile&lt;br&gt;@@ -5,7 +5,7 @@ require &amp;#x27;rake/gempackagetask&amp;#x27;&lt;br&gt; spec = Gem::Specification.new do |s|&lt;br&gt;  s.platform = Gem::Platform::RUBY&lt;br&gt;  s.name = &amp;quot;simplegit&amp;quot;&lt;br&gt;- s.version = &amp;quot;0.1.0&amp;quot;&lt;br&gt;+ s.version = &amp;quot;0.1.1&amp;quot;&lt;br&gt;  s.author = &amp;quot;Scott Chacon&amp;quot;&lt;br&gt;  s.email = &amp;quot;schacon@gee-mail.com&amp;quot;&lt;br&gt;  s.summary = &amp;quot;A simple gem for using Git in Ruby code.&amp;quot;&lt;br&gt;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 16:40:33 2008 -0700&lt;br&gt;  removed unnecessary test&lt;br&gt;diff --git a/lib/simplegit.rb b/lib/simplegit.rb&lt;br&gt;index a0a60ae..47c6340 100644&lt;br&gt;--- a/lib/simplegit.rb&lt;br&gt;+++ b/lib/simplegit.rb&lt;br&gt;@@ -18,8 +18,3 @@ class SimpleGit&lt;br&gt;  end&lt;br&gt; end&lt;br&gt;-&lt;br&gt;-if $0 == __FILE__&lt;br&gt;- git = SimpleGit.new&lt;br&gt;- puts git.show&lt;br&gt;-end&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该选项除了显示基本信息之外，还附带了每次提交的变化。&lt;/p&gt;
&lt;h3 id=&#34;统计式的提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#统计式的提交历史&#34;&gt;#&lt;/a&gt; 统计式的提交历史&lt;/h3&gt;
&lt;p&gt;你也使用以下命令为  &lt;code&gt;git log&lt;/code&gt;  显示一系列简略的统计信息：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;--stat&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令会有以下输出：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; --&lt;span class=&#34;hljs-built_in&#34;&gt;stat&lt;/span&gt;&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt; Rakefile | 2 +-&lt;br&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;br&gt;commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 16:40:33 2008 -0700&lt;br&gt;  removed unnecessary test&lt;br&gt; lib/simplegit.rb | 5 -----&lt;br&gt; 1 file changed, 5 deletions(-)&lt;br&gt;commit a11bef06a3f659402fe7563abf99ad00de2209e6&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Sat Mar 15 10:31:28 2008 -0700&lt;br&gt;  first commit&lt;br&gt; README | 6 ++++++&lt;br&gt; Rakefile | 23 +++++++++++++++++++++++&lt;br&gt; lib/simplegit.rb | 25 +++++++++++++++++++++++++&lt;br&gt; 3 files changed, 54 insertions(+)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;格式化式的提交历史&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#格式化式的提交历史&#34;&gt;#&lt;/a&gt; 格式化式的提交历史&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;  的  &lt;code&gt;--pretty&lt;/code&gt;  选项会提供一系列不同的格式化输出&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;--pretty&lt;/span&gt;=[&lt;span class=&#34;hljs-type&#34;&gt;short&lt;/span&gt;|&lt;span class=&#34;hljs-type&#34;&gt;full&lt;/span&gt;|&lt;span class=&#34;hljs-type&#34;&gt;fully&lt;/span&gt;|&lt;span class=&#34;hljs-type&#34;&gt;oneline&lt;/span&gt;]&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--short: 包括提交哈希值、分支、作者、提交信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--full: 包括提交哈希值、分支、作者、提交者、提交信息 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--fuller: 包括提交哈希值、分支、作者、写作日期、提交者、提交日期、提交信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#--oneline: 每次提交总共一行：包括提交哈希值、分支、提交信息&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了上述操作， &lt;code&gt;--pretty&lt;/code&gt;  选项提供了更强大的格式参数  &lt;code&gt;format&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;--pretty&lt;/span&gt;=format:&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;format&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;常用选项&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用选项&#34;&gt;#&lt;/a&gt; 常用选项&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%H&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交的完整哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%h&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交的简写哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%T&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;树的完整哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;树的简写哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%P&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父提交的完整哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;父提交的简写哈希值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%an&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ae&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者的电子邮件地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ad&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者修订日期（可以用 --date = 选项 来定制格式）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ar&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;作者修订日期，按多久以前的方式显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cn&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交者的名字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%ce&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交者的电子邮件地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交日期&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%cr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交日期（距今多长时间）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交说明&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;选项&lt;/td&gt;
&lt;td&gt;说明&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-----------------&lt;/td&gt;
&lt;td&gt;------------------------------------------------------------&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按补丁格式显示每个提交引入的差异&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示每次提交的文件修改统计信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--shortstat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;只显示  &lt;code&gt;--stat&lt;/code&gt;  中最后的行数修改添加移除统计&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅在提交信息后显示已修改的文件清单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--name-status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示新增、修改、删除的文件清单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示  &lt;code&gt;SHA-1&lt;/code&gt;  校验和所有 40 个字符中的前几个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--relative-date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用较短的相对时间而不是完整格式显示日期（比如 “2 weeks ago”）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--graph&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在日志旁以  &lt;code&gt;ASCII&lt;/code&gt;  图形显示分支与合并历史&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--pretty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用其他格式显示历史提交信息。可用的选项包括  &lt;code&gt;oneline&lt;/code&gt; 、 &lt;code&gt;short&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、 &lt;code&gt;fuller &lt;/code&gt; 和  &lt;code&gt;format&lt;/code&gt; （用来定义自己的格式）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--oneline&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--pretty=oneline --abbrev-commit&lt;/code&gt;  合用的简写&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;限制日志输出数量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#限制日志输出数量&#34;&gt;#&lt;/a&gt; 限制日志输出数量&lt;/h3&gt;
&lt;p&gt;使用如下方式限制日志输出数量：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &amp;lt;&lt;span class=&#34;hljs-literal&#34;&gt;-n&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#限制n条日志的输出&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;通过日期限制日志输出数量&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过日期限制日志输出数量&#34;&gt;#&lt;/a&gt; 通过日期限制日志输出数量&lt;/h4&gt;
&lt;p&gt;使用以下命令限制日志输出数量：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &amp;lt;&lt;span class=&#34;hljs-literal&#34;&gt;--since&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--until&lt;/span&gt;&amp;gt;=&amp;lt;n&amp;gt;.&amp;lt;seconds|minutes|hours|days|monthes|years&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#代表自现在n秒|分钟|小时|日|月份|年的日志&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令可用的格式十分丰富 —— 可以是类似 “2008-01-15” 的具体的某一天，也可以是类似 “2 years 1 day 3 minutes ago” 的相对日期。&lt;/p&gt;
&lt;p&gt;还可以过滤出匹配指定条件的提交。 用  &lt;code&gt;--author&lt;/code&gt;  选项显示指定作者的提交，用  &lt;code&gt;--grep&lt;/code&gt;  选项搜索提交说明中 的关键字。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;你可以指定多个  &lt;code&gt;--author&lt;/code&gt;  和  &lt;code&gt;--grep&lt;/code&gt;  搜索条件，这样会只输出匹配 任意  &lt;code&gt;--author&lt;/code&gt;  模式和任意  &lt;code&gt;--grep&lt;/code&gt;  模式的提交。然而，如果你添加了  &lt;code&gt;--all-match&lt;/code&gt;  选项， 则只会输出匹配所有  &lt;code&gt;--grep&lt;/code&gt;  模式的提交。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个非常有用的过滤器是  &lt;code&gt;-S&lt;/code&gt; （俗称 “pickaxe” 选项，取 “用鹤嘴锄在土里捡石头” 之意）， 它接受一个字符串参数，并且只会显示那些添加或删除了该字符串的提交。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git log &lt;span class=&#34;hljs-literal&#34;&gt;-s&lt;/span&gt; &amp;lt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一个很实用的  &lt;code&gt;git log&lt;/code&gt;  选项是路径（path）， 如果只关心某些文件或者目录的历史提交，可以在  &lt;code&gt;git log&lt;/code&gt;  选项的最后指定它们的路径。 因为是放在最后位置上的选项，所以用两个短划线（–）隔开之前的选项和后面限 定的路径名。&lt;/p&gt;
&lt;h4 id=&#34;常用选项-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常用选项-2&#34;&gt;#&lt;/a&gt; 常用选项&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;lt;n&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示最近的  &lt;code&gt;n&lt;/code&gt;  条提交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--since&lt;/code&gt; ,  &lt;code&gt;--after&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示指定时间之后的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--until&lt;/code&gt; ,  &lt;code&gt;--before&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示指定时间之前的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--author&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示作者匹配指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--committer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示提交者匹配指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示提交说明中包含指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仅显示添加或删除内容匹配指定字符串的提交。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;撤销操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#撤销操作&#34;&gt;#&lt;/a&gt; 撤销操作&lt;/h2&gt;
&lt;p&gt;在任何一个阶段，你都有可能想要撤消某些操作。 这里，我们将会学习几个撤消你所做修改的基本工具。 注意，有些撤消操作是不可逆的。 这是在使用  &lt;code&gt;Git&lt;/code&gt;  的过程中，会因为操作失误而导致之前的工作丢失的少有的几个地方之一。&lt;/p&gt;
&lt;h3 id=&#34;撤销提交&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#撤销提交&#34;&gt;#&lt;/a&gt; 撤销提交&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git commit &lt;span class=&#34;hljs-literal&#34;&gt;--amend&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#该命令会将暂存区中的文件加入上次提交中，同时可以对上次所写的提示信息进行修改。第二次提交将会修改第一次提交&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;取消暂存的文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#取消暂存的文件&#34;&gt;#&lt;/a&gt; 取消暂存的文件&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git restore &lt;span class=&#34;hljs-literal&#34;&gt;--staged&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将暂存区的文件变为恢复至为暂存的状态，并保留使用add命令之后的修改。&lt;/span&gt;&lt;br&gt;git reset HEAD &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将暂存区的文件变为恢复至为暂存的状态，并保留使用add命令之后的修改。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;  确实是个危险的命令，如果加上了  &lt;code&gt;--hard&lt;/code&gt;  选项则更是如此。 然而在上述场景中，工作目录中的文件尚未修改，因此相对安全一些。&lt;/p&gt;
&lt;p&gt;到目前为止这个神奇的调用就是你需要对  &lt;code&gt;git reset&lt;/code&gt;  命令了解的全部。 我们将会在&lt;a href=&#34;#%E9%87%8D%E7%BD%AE%E6%8F%AD%E5%AF%86&#34;&gt;重置揭密&lt;/a&gt;中了解 reset 的 更多细节以及如何掌握它做一些真正有趣的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;撤销文件的修改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#撤销文件的修改&#34;&gt;#&lt;/a&gt; 撤销文件的修改&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;--&lt;/span&gt; &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将工作区的文件恢复至最后一次提交的状态。&lt;/span&gt;&lt;br&gt;git restore &amp;lt;file&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将工作区的文件恢复至最后一次提交的状态。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;请务必记得  &lt;code&gt;git checkout --&lt;/code&gt;  是一个危险的命令。 你对那个文件在本地的任何修改都会消失 ——  &lt;code&gt;Git&lt;/code&gt;  会用最近提交的版本覆盖掉它。除非你确实清楚不想要对那个文件的本地修改了，否则请不要使用这个命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;记住，在  &lt;code&gt;Git&lt;/code&gt;  中任何已提交的东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用  &lt;code&gt;--amend&lt;/code&gt;  选项覆盖的提交也可以恢复（阅读&lt;a href=&#34;#%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D&#34;&gt;数据恢复&lt;/a&gt;了解数据恢复）。 然而，任何你未提交的东西丢失后很可能再也找不到了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程仓库&#34;&gt;#&lt;/a&gt; 远程仓库&lt;/h2&gt;
&lt;p&gt;远程仓库是指托管在因特网或其他网络中的你的项目的版本库。你可以有好几个远程仓库，通常有些仓库对你只读，有些则可以读写。 与他人协作涉及管理远程仓库以及根据需要推送或拉取数据。管理远程仓库包括了解如何添加远程仓库、移除无效的远程仓库、管理不同的远程分支并定义它们是否被跟踪等等。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git clone &amp;lt;url&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;# Git 会自动为该 URL 创建一个名为 origin 的仓库名。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查看远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看远程仓库&#34;&gt;#&lt;/a&gt; 查看远程仓库&lt;/h3&gt;
&lt;p&gt;使用如下命令，会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到  &lt;code&gt;origin&lt;/code&gt;  —— 这是  &lt;code&gt;Git&lt;/code&gt;  给你克隆的仓库服务器的默认名字&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote &lt;span class=&#34;hljs-comment&#34;&gt;#查看已创建的仓库名&lt;/span&gt;&lt;br&gt;git remote &lt;span class=&#34;hljs-literal&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#可以查看需要读写远程仓库使用的 Git 保存的简写与其对应的 URL&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;查看单个远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看单个远程仓库&#34;&gt;#&lt;/a&gt; 查看单个远程仓库&lt;/h4&gt;
&lt;p&gt;如果想要查看某一个远程仓库的更多信息，可以运行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote show &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#查看某个指定仓库&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它同样会列出远程仓库的  &lt;code&gt;URL&lt;/code&gt;  与跟踪分支的信息。 这些信息非常有用，它告诉你正处于哪个分支，并且如果运行  &lt;code&gt;git pull&lt;/code&gt; ， 就会抓取所有的远程引用，然后将远程  &lt;code&gt;master&lt;/code&gt;  分支合并到本地  &lt;code&gt;master&lt;/code&gt;  分支。 它也会列出拉取到的所有远程引用。&lt;/p&gt;
&lt;p&gt;这个命令会列出当你在特定的分支上执行  &lt;code&gt;git push&lt;/code&gt;  会自动地推送到哪一个远程分支。它也同样地列出了哪些远程分支不在你的本地，哪些远程分支已经从服务器上移除了，还有当你执行  &lt;code&gt;git pull&lt;/code&gt;  时哪些本地分支可以与它跟踪的远程分支自动合并。&lt;/p&gt;
&lt;h3 id=&#34;添加远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加远程仓库&#34;&gt;#&lt;/a&gt; 添加远程仓库&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote add &amp;lt;repo&amp;gt; &amp;lt;url&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#为指定的 URL 创建仓库&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;远程仓库的重命名与移除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程仓库的重命名与移除&#34;&gt;#&lt;/a&gt; 远程仓库的重命名与移除&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote rename &amp;lt;old&lt;span class=&#34;hljs-literal&#34;&gt;-repo&lt;/span&gt;&amp;gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;new-repo&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#重命名,值得注意的是这同样也会修改你所有远程跟踪的分支名字&lt;/span&gt;&lt;br&gt;git remote remove &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除某个远程仓库，所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;推送到远程仓库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推送到远程仓库&#34;&gt;#&lt;/a&gt; 推送到远程仓库&lt;/h3&gt;
&lt;p&gt;当你想分享你的项目时，必须将其推送到上游，使用以下命令推送至远程仓库&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;repo&amp;gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#向指定仓库推送指定的分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;从远程仓库中抓取与拉取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#从远程仓库中抓取与拉取&#34;&gt;#&lt;/a&gt; 从远程仓库中抓取与拉取&lt;/h3&gt;
&lt;p&gt;从远程仓库中获得数据，可以执行如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git fetch &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#拉取远程仓库的默认分支的最新内容&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;必须注意  &lt;code&gt;git fetch&lt;/code&gt;  命令只会将数据下载到你的本地仓库 ——&lt;strong&gt; 它并不会自动合并或修改你当前的工作&lt;/strong&gt;。当准备好时你必须手动将其合并入你的工作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你的当前分支设置了跟踪远程分支（阅读下一节&lt;a href=&#34;#%E5%88%86%E6%94%AF&#34;&gt; Git 分支&lt;/a&gt;了解更多信息），那么可以用 git pull 命令来自动抓取后合并该远程分支到当前分支。 这或许是个更加简单舒服的工作流程。默认情况下， &lt;code&gt;git clone&lt;/code&gt;  命令会自动设置本地  &lt;code&gt;master&lt;/code&gt;  分支跟踪克隆的远程仓库的  &lt;code&gt;master&lt;/code&gt;  分支（或其它名字的默认分支）。运行  &lt;code&gt;git pull&lt;/code&gt;  通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git pull &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#拉取远程仓库的默认分支的最新内容并合并分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;打标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#打标签&#34;&gt;#&lt;/a&gt; 打标签&lt;/h2&gt;
&lt;p&gt;像其他版本控制系统（ &lt;code&gt;VCS&lt;/code&gt; ）一样， &lt;code&gt;Git&lt;/code&gt;  可以给仓库历史中的某一个提交打上标签，以示重要。 比较有代表性的是人们会使用这个功能来标记发布结点（  &lt;code&gt;v1.0&lt;/code&gt;  、 &lt;code&gt;v2.0&lt;/code&gt;  等等）。&lt;/p&gt;
&lt;h3 id=&#34;列出标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#列出标签&#34;&gt;#&lt;/a&gt; 列出标签&lt;/h3&gt;
&lt;p&gt;在 Git 中列出已有的标签非常简单，只需要输入如下命令，就能按字母顺序列出标签：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git tag [-l]|[--list]&lt;/span&gt;&lt;br&gt;v1.0&lt;br&gt;v2.0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以按照特定的模式查找标签。 例如， &lt;code&gt;Git&lt;/code&gt;  自身的源代码仓库包含标签的数量超过  &lt;code&gt;500&lt;/code&gt;  个。 如果只对  &lt;code&gt;1.8.5&lt;/code&gt;  系列感兴趣，可以运行：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git tag -l &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;v1.8.5*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;v1.8.5&lt;br&gt;v1.8.5-rc0&lt;br&gt;v1.8.5-rc1&lt;br&gt;v1.8.5-rc2&lt;br&gt;v1.8.5-rc3&lt;br&gt;v1.8.5.1&lt;br&gt;v1.8.5.2&lt;br&gt;v1.8.5.3&lt;br&gt;v1.8.5.4&lt;br&gt;v1.8.5.5&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-l&lt;/span&gt; &amp;lt;regex&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#按照正则模式查找标签&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;按照通配符列出标签需要  &lt;code&gt;-l&lt;/code&gt;  或  &lt;code&gt;--list&lt;/code&gt;  选项，如果你只想要完整的标签列表，那么运行  &lt;code&gt;git tag&lt;/code&gt;  就会默认假定你想要一个列表，它会直接给你列出来， 此时的  &lt;code&gt;-l&lt;/code&gt;  或  &lt;code&gt;--list&lt;/code&gt;  是可选的。 然而，如果你提供了一个匹配标签名的通配模式，那么  &lt;code&gt;-l&lt;/code&gt;  或  &lt;code&gt;--list&lt;/code&gt;  就是强制使用的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;创建标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建标签&#34;&gt;#&lt;/a&gt; 创建标签&lt;/h3&gt;
&lt;p&gt;Git 支持两种标签：&lt;strong&gt;轻量标签（lightweight&lt;/strong&gt;）与 &lt;strong&gt;附注标签（annotated）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;轻量标签很像一个不会改变的分支 —— 它只是某个特定提交的引用。&lt;/p&gt;
&lt;p&gt;附注标签是存储在  &lt;code&gt;Git&lt;/code&gt;  数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件 地址、日期时间，此外还有一个标签信息，并且可以使用  &lt;code&gt;GNU Privacy Guard （GPG）&lt;/code&gt; 签名并验证。 通常会建议创建附注标签，这样你可以拥有以上所有信息。但是如果你只是想用一个临时的标签， 或者因为某些原因不想要保存这些信息，那么也可以用轻量标签。&lt;/p&gt;
&lt;h4 id=&#34;附注标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#附注标签&#34;&gt;#&lt;/a&gt; 附注标签&lt;/h4&gt;
&lt;p&gt;使用以下方式添加附注标签：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-a&lt;/span&gt; &amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;msg&amp;gt;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-m&lt;/code&gt;  选项指定了一条将会存储在标签中的信息。如果没有为附注标签指定一条信息， &lt;code&gt;Git&lt;/code&gt;  会启动编辑器要求你输入信息。&lt;/p&gt;
&lt;p&gt;通过使用  &lt;code&gt;git show&lt;/code&gt;  命令可以看到标签信息和与之对应的提交信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git show v1.4&lt;/span&gt;&lt;br&gt;tag v1.4&lt;br&gt;Tagger: Ben Straub &amp;lt;ben@straub.cc&amp;gt;&lt;br&gt;Date: Sat May 3 20:19:12 2014 -0700&lt;br&gt;my version 1.4&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;轻量标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#轻量标签&#34;&gt;#&lt;/a&gt; 轻量标签&lt;/h4&gt;
&lt;p&gt;轻量标签本质上是将提交校验和存储到一个文件中 —— 没有保存任何其他信息。 创建轻量标签，不需要使用  &lt;code&gt;-a&lt;/code&gt; 、 &lt;code&gt;-s&lt;/code&gt;  或  &lt;code&gt;-m&lt;/code&gt;  选项，只需要提供标签名字：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时，如果在标签上运行  &lt;code&gt;git show&lt;/code&gt; ，你不会看到额外的标签信息。 命令只会显示出提交信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git show v1.4-lw&lt;/span&gt;&lt;br&gt;commit ca82a6dff817ec66f44342007202690a93763949&lt;br&gt;Author: Scott Chacon &amp;lt;schacon@gee-mail.com&amp;gt;&lt;br&gt;Date: Mon Mar 17 21:52:11 2008 -0700&lt;br&gt;  changed the version number&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;后期打标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#后期打标签&#34;&gt;#&lt;/a&gt; 后期打标签&lt;/h4&gt;
&lt;p&gt;你也可以对过去的提交打标签。 假设提交历史是这样的：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; --pretty=oneline&lt;/span&gt;&lt;br&gt;15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch &amp;#x27;experiment&amp;#x27;&lt;br&gt;a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support&lt;br&gt;0d52aaab4479697da7686c15f77a3d64d9165190 one more thing&lt;br&gt;6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch &amp;#x27;experiment&amp;#x27;&lt;br&gt;0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function&lt;br&gt;4682c3261057305bdd616e23b64b0857d832627b added a todo file&lt;br&gt;166ae0c4d3f420721acbb115cc33848dfcc2121a started write support&lt;br&gt;9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile&lt;br&gt;964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo&lt;br&gt;8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，假设在  &lt;code&gt;v1.2&lt;/code&gt;  时你忘记给项目打标签，也就是在 “ &lt;code&gt;updated rakefile&lt;/code&gt; ” 提交。 你可以在之后补上标签。 要在那个提交上打标签，你需要在命令的末尾指定提交的校验和（或部分校验和）：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-a&lt;/span&gt; v1.&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;fceb02&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;共享标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#共享标签&#34;&gt;#&lt;/a&gt; 共享标签&lt;/h3&gt;
&lt;p&gt;默认情况下， &lt;code&gt;git push&lt;/code&gt;  命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样 —— 你可以运行以下命令来推送标签：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;repo&amp;gt; &amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#推送标签至远程仓库&lt;/span&gt;&lt;br&gt;git push &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--tags&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#推送所有不在远程仓库服务器上的标签至远程仓库&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt;  推送两种标签 使用  &lt;code&gt;git push  --tags&lt;/code&gt;  推送标签并不会区分轻量标签和附注标签， 没有简单的选项能够让你只选择推送一种标签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;删除标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除标签&#34;&gt;#&lt;/a&gt; 删除标签&lt;/h3&gt;
&lt;p&gt;要删除掉你本地仓库上的标签，可以使用如下名命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意上述命令并不会从任何远程仓库中移除这个标签，你必须用如下命令来更新远程仓库：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;remote&amp;gt; :refs/tags/&amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#这种操作的含义是，将冒号前面的空值推送到远程标签名，从而高效地删除它。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外一种高效的删除方式为：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;repo&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--delete&lt;/span&gt; &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;检出标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#检出标签&#34;&gt;#&lt;/a&gt; 检出标签&lt;/h3&gt;
&lt;p&gt;如果你想查看某个标签所指向的文件版本，可以使用如下命令，&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;tagname&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Caution]&lt;/p&gt;
&lt;p&gt;这个操作使你的仓库处于 “ &lt;strong&gt;分离头指针（detached HEAD）&lt;/strong&gt;” 的状态 —— 这个状态有些不好的副作用&lt;/p&gt;
&lt;p&gt;在 “分离头指针” 状态下，如果你做了某些更改然后提交它们，标签不会发生变化，但你的新提交将不属于任何分支，并且将无法访问，除非通过确切的提交哈希才能访问。 因此，如果你需要进行更改，比如你要修复旧版本中的错误，那么通常需要创建一个新分支&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基本操作&#34;&gt;#&lt;/a&gt; 基本操作&lt;/h3&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git tag [-&lt;span class=&#34;hljs-type&#34;&gt;l&lt;/span&gt;]|[--&lt;span class=&#34;hljs-type&#34;&gt;list&lt;/span&gt;] &lt;span class=&#34;hljs-comment&#34;&gt;#以字母顺序展示标签&lt;/span&gt;&lt;br&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-l&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--list&lt;/span&gt; &amp;lt;regx&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#通过正则表达式查找标签&lt;/span&gt;&lt;br&gt;git show &amp;lt;tag&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#查看某个标签的内容&lt;/span&gt;&lt;br&gt;git tag &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;tag&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除本地某个标签&lt;/span&gt;&lt;br&gt;git push &amp;lt;remote&amp;gt; :refs/tags/&amp;lt;tagname&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除远程仓库的指定标签&lt;/span&gt;&lt;br&gt;git push &amp;lt;remote&amp;gt; &lt;span class=&#34;hljs-literal&#34;&gt;--delete&lt;/span&gt; &amp;lt;remote&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除远程仓库的指定标签&lt;/span&gt;&lt;br&gt;git push &amp;lt;remote&amp;gt; tags &lt;span class=&#34;hljs-comment&#34;&gt;#向远程仓库推送所有标签&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;git别名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git别名&#34;&gt;#&lt;/a&gt; Git 别名&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  并不会在你输入部分命令时自动推断出你想要的命令。 如果不想每次都输入完整的  &lt;code&gt;Git&lt;/code&gt;  命令，可以通过  &lt;code&gt;git config&lt;/code&gt;  文件来轻松地为每一个命令设置一个别名。 这里有一些例子你可以试试：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.co checkout&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.br branch&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.ci commit&lt;br&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.st status&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你你可以使用如下别名来代替一些命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git co &lt;span class=&#34;hljs-comment&#34;&gt;#git checkout&lt;/span&gt;&lt;br&gt;git br &lt;span class=&#34;hljs-comment&#34;&gt;#git branch&lt;/span&gt;&lt;br&gt;git ci &lt;span class=&#34;hljs-comment&#34;&gt;#git commit&lt;/span&gt;&lt;br&gt;git st &lt;span class=&#34;hljs-comment&#34;&gt;#git status&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看出， &lt;code&gt;Git&lt;/code&gt;  只是简单地将别名替换为对应的命令。&lt;/p&gt;
&lt;p&gt;然而，你可能想要执行外部命令，而不是一个  &lt;code&gt;Git&lt;/code&gt;  子命令。 如果是那样的话，可以在命令前面加入 &lt;code&gt;!&lt;/code&gt;  符号。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git config &lt;span class=&#34;hljs-literal&#34;&gt;--global&lt;/span&gt; alias.l &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;!ls&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样当你执行  &lt;code&gt;git l&lt;/code&gt;  命令时，实际上会执行  &lt;code&gt;ls&lt;/code&gt;  命令&lt;/p&gt;
&lt;h1 id=&#34;git分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git分支&#34;&gt;#&lt;/a&gt; Git 分支&lt;/h1&gt;
&lt;p&gt;几乎所有的版本控制系统都以某种形式支持分支。使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。在很多版本控制系统中，这是一个略微低效的过程 —— 常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。&lt;/p&gt;
&lt;p&gt;然而  &lt;code&gt;Git&lt;/code&gt;  处理分支的方式可谓是难以置信的轻量，创建新分支这一操作几乎能在瞬间完成，并且在不同分支之间的切换操作也是一样便捷。 与许多其它版本控制系统不同， &lt;code&gt;Git&lt;/code&gt;  鼓励在工作流程中频繁地使用分支与合并，哪怕一天之内进行许多次。理解和精通这一特性，你便会意识到  &lt;code&gt;Git&lt;/code&gt;  是如此的强大而又独特，并且从此真正改变你的开发方式。&lt;/p&gt;
&lt;h2 id=&#34;分支简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支简介&#34;&gt;#&lt;/a&gt; 分支简介&lt;/h2&gt;
&lt;p&gt;在进行提交操作时， &lt;code&gt;Git&lt;/code&gt;  会保存一个&lt;strong&gt;提交对象（commit object）&lt;/strong&gt;。 知道了  &lt;code&gt;Git&lt;/code&gt;  保存数据的方式，我们可以很自然的想到 —— 该提交对象会包含一个指向暂存内容快照的指针。 但不仅仅是这样，该提交对象还包含了作者的姓名和邮箱、提交时输入的信息以及指向它的父对象的指针。 首次提交产生的提交对象没有父对象，&lt;strong&gt;普通提交操作产生的提交对象有一个父对象， 而由多个分支合并产生的提交对象有多个父对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了更加形象地说明，我们假设现在有一个工作目录，里面包含了三个将要被暂存和提交的文件。 暂存操作会为每一个文件计算校验和（使用我们在&lt;a href=&#34;#%E4%BF%9D%E8%AF%81%E5%AE%8C%E6%95%B4%E6%80%A7&#34;&gt;完整性&lt;/a&gt;中提到的 &lt;strong&gt;SHA-1 哈希算法&lt;/strong&gt;），然后会把当前版本的文件快照保存到  &lt;code&gt;Git&lt;/code&gt;  仓库中 （ &lt;code&gt;Git&lt;/code&gt;  使用  &lt;code&gt;blob&lt;/code&gt;  对象来保存它们），最终将校验和加入到暂存区域等待提交。&lt;/p&gt;
&lt;p&gt;当使用  &lt;code&gt;git commit&lt;/code&gt;  进行提交操作时， &lt;code&gt;Git&lt;/code&gt;  会先计算每一个子目录（本例中只有项目根目录）的校验和， 然后 在  &lt;code&gt;Git&lt;/code&gt;  仓库中这些校验和保存为树对象。随后， &lt;code&gt;Git&lt;/code&gt;  便会创建一个提交对象， 它除了包含上面提到的那些信息外，还包含指向这个&lt;strong&gt;树对象（项目根目录）&lt;strong&gt;的&lt;/strong&gt;指针&lt;/strong&gt;。 如此一来， &lt;code&gt;Git&lt;/code&gt;  就可以在需要的时候重现此次保存的快照。 现在， &lt;code&gt;Git&lt;/code&gt;  仓库中有五个对象：三个 &lt;strong&gt;blob 对象（保存着文件快照）&lt;/strong&gt;、一个 ** 树对象（记录着目录结构和 blob 对 象索引）** 以及一个 &lt;strong&gt;提交对象（包含着指向前述树对象的指针和所有提交信息）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;首次提交对象及其树结构如下：&lt;/p&gt;
&lt;img src=&#34;ct_first.png&#34; alt=&#34;首次提交对象及其树结构&#34; /&gt;
&lt;p&gt;做些修改后再次提交，那么这次产生的提交对象会包含一个指向上次提交对象（父对象）的指针：&lt;/p&gt;
&lt;img src=&#34;ct.png&#34; alt=&#34;提交对象及其父对象&#34; /&gt;
&lt;h2 id=&#34;git-分支本质&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git-分支本质&#34;&gt;#&lt;/a&gt; Git 分支本质&lt;/h2&gt;
&lt;p&gt;指向提交对象的可移动&lt;strong&gt;指针&lt;/strong&gt;，默认名字为  &lt;code&gt;master&lt;/code&gt;  。在多次提交操作之后，你其实已经有一个指向最后那个提交对象的  &lt;code&gt;master&lt;/code&gt;  分支。  &lt;code&gt;master&lt;/code&gt;  分支会在每次提交时自动向前移动。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  的  &lt;code&gt;master&lt;/code&gt;  分支并不是一个特殊分支。 它就跟其它分支完全没有区别。 之所以几乎每一个仓库都有  &lt;code&gt;master&lt;/code&gt;  分支，是因为  &lt;code&gt;git init&lt;/code&gt;  命令默认创建它，并且大多数人都懒得去改动它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&#34;git_history.png&#34; alt=&#34;分支及其提交历史&#34;&gt;
&lt;h2 id=&#34;分支新建&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支新建&#34;&gt;#&lt;/a&gt; 分支新建&lt;/h2&gt;
&lt;p&gt;使用如下命令创建一个分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#这会在当前所在的提交对象上创建一个指针&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然上述命令并不会让你切换至新创建的分支&lt;/p&gt;
&lt;p&gt;例如：当我想创建一个  &lt;code&gt;testing&lt;/code&gt;  分支，使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch testing&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提交历史会如下显示：&lt;/p&gt;
&lt;img src=&#34;git_new_branch.png&#34; alt=&#34;两个指向相同提交历史的分支&#34;&gt;
&lt;p&gt;那么， &lt;code&gt;Git&lt;/code&gt;  又是怎么知道当前在哪一个分支上呢？ 也很简单，它有一个名为  &lt;code&gt;HEAD&lt;/code&gt;  的特殊指针。&lt;strong&gt;指向当前所在的本地分支&lt;/strong&gt;。&lt;/p&gt;
&lt;img src=&#34;git_head.png&#34; alt=&#34;HEAD 指向当前所在的分支&#34;&gt;
&lt;h2 id=&#34;分支切换&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支切换&#34;&gt;#&lt;/a&gt; 分支切换&lt;/h2&gt;
&lt;p&gt;执行如下命令切换至对应分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样  &lt;code&gt;HEAD&lt;/code&gt;  就会指向指定的分支了。当你再次提交时，指定的分支和  &lt;code&gt;HEAD&lt;/code&gt;  将会向前移动，其他分支将会留在原地。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;分支切换会改变你工作目录中的文件。在切换分支时，一定要注意&lt;strong&gt;你工作目录里的文件会被改变&lt;/strong&gt;。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果  &lt;code&gt;Git&lt;/code&gt;  不能干净利落地完成这个任务，它将禁止切换分支。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若你想在创建分支的时候自动切换至新分支，可以执行如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;-b&lt;/span&gt; &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;分支分叉查看&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支分叉查看&#34;&gt;#&lt;/a&gt; 分支分叉查看&lt;/h3&gt;
&lt;p&gt;当你再新创建的分支和旧分支上都做了提交，这个项目的提交历史就会产生分叉，例如：&lt;/p&gt;
&lt;img src=&#34;branch_split.png&#34; alt=&#34;项目分叉历史&#34;&gt;
&lt;p&gt;执行如下命令，查看提交历史、各个分支的指向以及项目的分支分叉情况：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;log&lt;/span&gt; --oneline --decorate --graph --all&lt;/span&gt;&lt;br&gt;* c2b9e (HEAD, master) made other changes&lt;br&gt;| * 87ab2 (testing) made a change&lt;br&gt;|/&lt;br&gt;* f30ab add feature #32 - ability to add new formats to the&lt;br&gt;* 34ac2 fixed bug #1328 - stack overflow under certain conditions&lt;br&gt;* 98ca9 initial commit of my project&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;由于  &lt;code&gt;Git&lt;/code&gt;  的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符），如此的简单能不快吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分支删除&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支删除&#34;&gt;#&lt;/a&gt; 分支删除&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#删除指定分支&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-D&lt;/span&gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#可以强制删除处于未合并状态的分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;分支的合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支的合并&#34;&gt;#&lt;/a&gt; 分支的合并&lt;/h2&gt;
&lt;p&gt;如果你想将两个分支合并在一起，使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;branch&lt;span class=&#34;hljs-literal&#34;&gt;-from&lt;/span&gt;&amp;gt;&lt;br&gt;git merge &amp;lt;branch&lt;span class=&#34;hljs-literal&#34;&gt;-to&lt;/span&gt;&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将&amp;lt;branch-from&amp;gt;分支合并到&amp;lt;branch-to&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你成功合并后，就可以删除你不要的分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;简单分支合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单分支合并&#34;&gt;#&lt;/a&gt; 简单分支合并&lt;/h4&gt;
&lt;p&gt;这种情况是，想合并的分支是所处的分支的直接后继。&lt;/p&gt;
&lt;p&gt;执行合并分支命令后， &lt;code&gt;Git&lt;/code&gt;  会提醒你 &lt;strong&gt;Fast-forward (快进)&lt;/strong&gt; ，这意为简单的移动分支指针。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fast-forward (快进)&lt;/strong&gt; ：当你试图合并两个分支时， 如果顺着一个分支走下去能够到达另一个分支，那么  &lt;code&gt;Git&lt;/code&gt;  在合并两者的时候， 只会简单的将指针向前推进（指针右移），因为这种情况下的合并操作没有需要解决的分歧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;复杂分支合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#复杂分支合并&#34;&gt;#&lt;/a&gt; 复杂分支合并&lt;/h4&gt;
&lt;p&gt;想合并的分支不为所处的分支的直接后继。换言之，想和并的分支在所处分支之前就已经&lt;strong&gt;分叉开 (diverged)&lt;strong&gt; 了，即两个分支同时拥有一个&lt;/strong&gt;共同的祖先&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这时当执行合并命令时，Git 会将&lt;strong&gt;共同祖先的快照&lt;/strong&gt;，&lt;strong&gt;所处分支的快照&lt;/strong&gt;，&lt;strong&gt;想合并分支的快照&lt;/strong&gt;进行一个简单的三方合并。 &lt;code&gt;Git&lt;/code&gt;  会创建一个新的快照，并同时创建一个提交对象指向它，随后移动所处分支至该提交对象处。此时这个提交对象拥有两个祖先 (所处分支和想和并分支指向的提交对象)。移动所处分支至新的提交对象。&lt;/p&gt;
&lt;h4 id=&#34;遇到冲突时的分支合并&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#遇到冲突时的分支合并&#34;&gt;#&lt;/a&gt; 遇到冲突时的分支合并&lt;/h4&gt;
&lt;p&gt;有时候合并操作不会如此顺利。 如果你在两个不同的分支中，对同一个文件的同一个部分进行了不同的修 改， &lt;code&gt;Git&lt;/code&gt;  就没法干净的合并它们。&lt;/p&gt;
&lt;p&gt;此时  &lt;code&gt;Git&lt;/code&gt;  做了合并，但是没有自动地创建一个新的合并提交。  &lt;code&gt;Git&lt;/code&gt;  会暂停下来，等待你去解决合并产生的冲突。&lt;/p&gt;
&lt;p&gt;你可以在合并冲突后的任意时刻使用  &lt;code&gt;git status&lt;/code&gt;  命令来查看那些因包含合并冲突而处于 ** 未合并（unmerged）** 状态的文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Git&lt;/code&gt;  会在有冲突的文件中加入标准的冲突解决标记，这样你可以打开这些包含冲突的文件然后手动解决冲突。 出现冲突的文件会包含一些特殊区段，看起来像下面这个样子：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD:index.html&lt;br&gt;&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;contact : email.support@github.com&amp;lt;/div&amp;gt;&lt;br&gt;=======&lt;br&gt;&amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt;&lt;br&gt; please contact us at support@github.com&lt;br&gt;&amp;lt;/div&amp;gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; iss53:index.html&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在冲突文件中， &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD&lt;/code&gt;  以下， &lt;code&gt;=======&lt;/code&gt;  以上为  &lt;code&gt;HEAD&lt;/code&gt;  所指向的分支的内容， &lt;code&gt;=======&lt;/code&gt;  以下， &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt;  以上为想合并的分支的内容。为了解决冲突，你必须选择使用由  &lt;code&gt;=======&lt;/code&gt;  分割的两部分中的一个，或者你也可以自行合并这些内容。并且删除  &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;  ,  &lt;code&gt;=======&lt;/code&gt;  , 和  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;  这些内容。&lt;/p&gt;
&lt;p&gt;在你解决了所有文件里的冲突之后，对每个文件使用  &lt;code&gt;git add&lt;/code&gt;  命令来将其标记为冲突已解决。或者使用或者 &lt;code&gt;git mergetool&lt;/code&gt;  命令通过  &lt;code&gt;Git&lt;/code&gt;  自带的可视化程序执行修改。一旦暂存这些原本有冲突的文件， &lt;code&gt;Git&lt;/code&gt;  就会将它们标记为冲突已解决。&lt;/p&gt;
&lt;p&gt;如果你对结果感到满意，并且确定之前有冲突的的文件都已经暂存了，这时你可以输入  &lt;code&gt;git commit&lt;/code&gt;  来完成合并提交。 默认情况下提交信息看起来像下面这个样子：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Merge branch &amp;#x27;iss53&amp;#x27;&lt;br&gt;Conflicts:&lt;br&gt;  index.html&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# It looks like you may be committing a merge.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;If this is not correct, please remove the file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;.MERGE_HEAD&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;and try again.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Please enter the commit message &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; your changes. Lines starting&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;with &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;#&amp;#x27;&lt;/span&gt; will be ignored, and an empty message aborts the commit.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;On branch master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;All conflicts fixed but you are still merging.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;language-bash&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Changes to be committed:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;modified: index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;分支管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分支管理&#34;&gt;#&lt;/a&gt; 分支管理&lt;/h2&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-comment&#34;&gt;#可查看已有分支。其中带*号的为HEAD指向的分支&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-v&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#查看各个分支的最后一次提交。&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;--merged&lt;/span&gt;|&lt;span class=&#34;hljs-literal&#34;&gt;--no-merged&lt;/span&gt; [&lt;span class=&#34;hljs-type&#34;&gt;branch&lt;/span&gt;] &lt;span class=&#34;hljs-comment&#34;&gt;#查看&amp;lt;已|未&amp;gt;合并到[当前|指定]分支的分支&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-M&lt;/span&gt; &amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#将当前分支重命名未&amp;lt;branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;远程分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程分支&#34;&gt;#&lt;/a&gt; 远程分支&lt;/h2&gt;
&lt;p&gt;远程引用是对远程仓库的引用（指针），包括分支、标签等等。 你可以通过如下命令来显式地获得远程引用的完整列表：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git &lt;span class=&#34;hljs-built_in&#34;&gt;ls&lt;/span&gt;&lt;span class=&#34;hljs-literal&#34;&gt;-remote&lt;/span&gt; &amp;lt;remote&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者通过如下命令获得远程分支的更多信息：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git remote show &amp;lt;remote&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而，一个更常见的做法是利用&lt;strong&gt;远程跟踪分支&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;远程跟踪分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#远程跟踪分支&#34;&gt;#&lt;/a&gt; 远程跟踪分支&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;远程跟踪分&lt;/strong&gt;支是远程分支状态的引用。它们是你无法移动的本地引用。一旦你进行了网络通信，  &lt;code&gt;Git&lt;/code&gt;  就会为你移动它们以精确反映远程仓库的状态。请将它们看做书签， 这样可以提醒你该分支在远程仓库中的位置就是你最后一次连接到它们的位置。&lt;/p&gt;
&lt;p&gt;它们以  &lt;code&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt;  的形式命名。 例如，如果你想要看你最后一次与远程仓库  &lt;code&gt;origin&lt;/code&gt;  通信时  &lt;code&gt;master&lt;/code&gt;  分支的状态，你可以查看  &lt;code&gt;origin/master&lt;/code&gt;  分支。 你与同事合作解决一个问题并且他们推送了一个  &lt;code&gt;iss53&lt;/code&gt;  分支，你可能有自己的本地  &lt;code&gt;iss53&lt;/code&gt;  分支， 然而在服务器上的分支会以  &lt;code&gt;origin/iss53&lt;/code&gt;  来表示。 这可能有一点儿难以理解，让我们来看一个例子。 假设你的网络里有一个在  &lt;code&gt;git.ourcompany.com&lt;/code&gt;  的  &lt;code&gt;Git&lt;/code&gt;  服 务器。 如果你从这里克隆， &lt;code&gt;Git&lt;/code&gt;  的  &lt;code&gt;clone&lt;/code&gt;  命令会为你自动将其命名为  &lt;code&gt;origin&lt;/code&gt; ，拉取它的所有数据， 创建一个指向它的  &lt;code&gt;master&lt;/code&gt;  分支的指针，并且在本地将其命名为  &lt;code&gt;origin/master&lt;/code&gt; 。  &lt;code&gt;Git&lt;/code&gt;  也会给你一个与  &lt;code&gt;origin&lt;/code&gt;  的 m &lt;code&gt;aster&lt;/code&gt;  分支在指向同一个地方的本地  &lt;code&gt;master&lt;/code&gt;  分支，这样你就有工作的基础。&lt;/p&gt;
&lt;img src=&#34;after_clone.png&#34; alt=&#34;克隆之后的服务器与本地仓库&#34;/&gt;
&lt;p&gt;如果你在本地的  &lt;code&gt;master&lt;/code&gt;  分支做了一些工作，在同一段时间内有其他人推送提交到  &lt;code&gt;git.ourcompany.com&lt;/code&gt;  并且更新了它的  &lt;code&gt;master&lt;/code&gt;  分支，这就是说你们的提交历史已走向不同的方向。 即便这样，只要你保持不与  &lt;code&gt;origin&lt;/code&gt;  服务器连接（并拉取数据），你的  &lt;code&gt;origin/master&lt;/code&gt;  指针就不会移动。&lt;/p&gt;
&lt;img src=&#34;remote_local.png&#34; alt=&#34;本地与远程的工作可以分叉&#34;/&gt;
&lt;p&gt;如果要与给定的远程仓库同步数据，使用以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git fetch &amp;lt;remote&amp;gt;&lt;br&gt;git fetch origin &lt;span class=&#34;hljs-comment&#34;&gt;#本例中&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令查找 “origin” 是哪一个服务器（在本例中，它是  &lt;code&gt;git.ourcompany.com&lt;/code&gt; ），从中抓取本地没有的数据，并且更新本地数据库，移动  &lt;code&gt;origin/master&lt;/code&gt;  指针到更新之后的位置。&lt;/p&gt;
&lt;img src=&#34;fetch.png&#34; alt=&#34; git fetch 更新你的远程跟踪分支&#34;&gt;
&lt;h3 id=&#34;推送&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推送&#34;&gt;#&lt;/a&gt; 推送&lt;/h3&gt;
&lt;p&gt;当你想要公开分享一个分支时，需要将其推送到有写入权限的远程仓库上。本地的分支并不会自动与远程仓库同步 —— 你必须显式地推送想要分享的分支。 这样，你就可以把不愿意分享的内容放到私人分支上，而将需要和别人协作的内容推送到公开分支。&lt;/p&gt;
&lt;p&gt;使用如下命令进行推送：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有些工作被简化了。  &lt;code&gt;Git&lt;/code&gt;  自动将  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支名字展开为：&lt;/p&gt;
&lt;figure class=&#34;highlight elixir&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs elixir&#34;&gt;refs/heads/&amp;lt;branch&amp;gt;&lt;span class=&#34;hljs-symbol&#34;&gt;:refs/heads/&amp;lt;branch&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以运行以下命令进行推送：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git push origin &amp;lt;branch&amp;gt;:&amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;它会做同样的事 —— 也就是说 “推送本地的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支，将其作为远程仓库的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支” 可以通过这种格式来推送本地分支到一个命名不相同的远程分支。&lt;/p&gt;
&lt;p&gt;下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支  &lt;code&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt; ，指向服务器的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支的引用。&lt;/p&gt;
&lt;p&gt;要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的  &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt;  分支 —— 只有一个不可以修改的  &lt;code&gt;&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;/code&gt;  指针。&lt;/p&gt;
&lt;p&gt;可以运行合并命令将这些工作合并到当前所在的分支。 如果想要在自己的本地分支上工作，可以将其建立在远程跟踪分支之上：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;-b&lt;/span&gt; &amp;lt;&lt;span class=&#34;hljs-built_in&#34;&gt;new-branch&lt;/span&gt;&amp;gt; &amp;lt;old&lt;span class=&#34;hljs-literal&#34;&gt;-sbranch&lt;/span&gt;&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会给你一个用于工作的本地分支，并且起点位于  &lt;code&gt;&amp;lt;old-sbranch&amp;gt;&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;跟踪分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#跟踪分支&#34;&gt;#&lt;/a&gt; 跟踪分支&lt;/h3&gt;
&lt;p&gt;从一个远程跟踪分支检出一个本地分支会自动创建所谓的 “跟踪分支”（它跟踪的分支叫做 “上游分支”）。跟踪分支是与远程分支有直接关系的本地分支。如果在一个跟踪分支上输入  &lt;code&gt;git pull&lt;/code&gt; ， &lt;code&gt;Git&lt;/code&gt;  能自动地识别去哪个服务器上抓取、合并到哪个分支。&lt;/p&gt;
&lt;p&gt;当克隆一个仓库时，它通常会自动地创建一个跟踪  &lt;code&gt;origin/master&lt;/code&gt;  的  &lt;code&gt;master&lt;/code&gt;  分支。 然而，如果你愿意的话可以设置其他的跟踪分支，或是一个在其他远程仓库上的跟踪分支，又或者不跟踪  &lt;code&gt;master&lt;/code&gt;  分支。 最简单的实例就是像之前看到的那样，运行 &lt;code&gt;git checkout -b &amp;lt;new-branch&amp;gt; &amp;lt;old-sbranch&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是一个十分常用 的操作所以 Git 提供了  &lt;code&gt;--track&lt;/code&gt;  快捷方式：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;--track&lt;/span&gt; &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt; &lt;span class=&#34;hljs-comment&#34;&gt;#创建一个跟踪&amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;的跟踪分支&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于这个操作太常用了，该捷径本身还有一个捷径。 如果你尝试检出的分支 (a) 不存在且 (b) 刚好只有一个名字与之匹配的远程分支，那么  &lt;code&gt;Git&lt;/code&gt;  就会为你创建一个跟踪分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想要将本地分支与远程分支设置为不同的名字，你可以轻松地使用上一个命令增加一个不同名字的本地分支：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout &lt;span class=&#34;hljs-literal&#34;&gt;-b&lt;/span&gt; &amp;lt;branch&amp;gt; &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支， 你可以在任意时间使用  &lt;code&gt;-u&lt;/code&gt;  或  &lt;code&gt;--set-upstream-to&lt;/code&gt;  选项运行  &lt;code&gt;git branch&lt;/code&gt;  来显式地设置：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-u&lt;/span&gt; &amp;lt;remote&amp;gt;/&amp;lt;branch&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;上游快捷方式&lt;/p&gt;
&lt;p&gt;当设置好跟踪分支后，可以通过简写  &lt;code&gt;@&amp;#123;upstream&amp;#125;&lt;/code&gt;  或  &lt;code&gt;@&amp;#123;u&amp;#125;&lt;/code&gt;  来引用它的上游分支。 所以处于  &lt;code&gt;master&lt;/code&gt;  分支时并且它正在跟踪  &lt;code&gt;origin/master&lt;/code&gt;  时，如果愿意的话可以使用  &lt;code&gt;git merge @&amp;#123;u&amp;#125;&lt;/code&gt;  来取代  &lt;code&gt;git merge origin/master&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果想要查看设置的所有跟踪分支，可以使用 git branch 的 -vv 选项。 这会将所有的本地分支列出来并且包含更多的信息，如每一个分支正在跟踪哪个远程分支与本地分支是否是领先、落后或是都有。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git branch -vv&lt;/span&gt;&lt;br&gt;  iss53 7e424c3 [origin/iss53: ahead 2] forgot the brackets&lt;br&gt;  master 1ae2a45 [origin/master] deploying index fix&lt;br&gt;* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this&lt;br&gt;should do it&lt;br&gt;  testing 5ea463a trying something new&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里可以看到  &lt;code&gt;iss53&lt;/code&gt;  分支正在跟踪  &lt;code&gt;origin/iss53&lt;/code&gt;  并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。也能看到  &lt;code&gt;master&lt;/code&gt;  分支正在跟踪  &lt;code&gt;origin/master&lt;/code&gt;  分支并且是最新的。接下来可以看到  &lt;code&gt;serverfix&lt;/code&gt;  分支正在跟踪  &lt;code&gt;teamone&lt;/code&gt;  服务器上的  &lt;code&gt;server-fix-good&lt;/code&gt;  分支并且领先 3 落后 1， 意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到  &lt;code&gt;testing&lt;/code&gt;  分支并没有跟踪任何远程分支。&lt;/p&gt;
&lt;p&gt;需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。如果想要统计最新的领先与落后数字，需要在运行此命令前抓 取所有的远程仓库。 可以像这样做：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git fetch &lt;span class=&#34;hljs-literal&#34;&gt;--all&lt;/span&gt;&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-vv&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;拉取&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拉取&#34;&gt;#&lt;/a&gt; 拉取&lt;/h3&gt;
&lt;p&gt;当  &lt;code&gt;git fetch&lt;/code&gt;  命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然 后让你自己合并。 然而，有一个命令叫作  &lt;code&gt;git pull&lt;/code&gt;  在大多数情况下它的含义是一个  &lt;code&gt;git fetch&lt;/code&gt;  紧接着一个  &lt;code&gt;git merge&lt;/code&gt;  命令。 如果有一个像之前章节中演示的设置好的跟踪分支，不管它是显式地设置还是通过  &lt;code&gt;clone&lt;/code&gt;  或  &lt;code&gt;checkout&lt;/code&gt;  命令为你创建的， &lt;code&gt;git pull&lt;/code&gt;  都会查找当前分支所跟踪的服务器与分支， 从服务器上抓取数据然后尝试合并入那个远程分支。 由于  &lt;code&gt;git pull&lt;/code&gt;  的魔法经常令人困惑所以通常单独显式地使用  &lt;code&gt;fetch&lt;/code&gt;  与  &lt;code&gt;merge&lt;/code&gt;  命令会更好一些。&lt;/p&gt;
&lt;h3 id=&#34;删除远程分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除远程分支&#34;&gt;#&lt;/a&gt; 删除远程分支&lt;/h3&gt;
&lt;p&gt;假设你已经通过远程分支做完所有的工作了 —— 也就是说你和你的协作者已经完成了一个特性， 并且将其合并到了远程仓库的  &lt;code&gt;master&lt;/code&gt;  分支（或任何其他稳定代码分支）。 可以运行带有 - &lt;code&gt;-delete&lt;/code&gt;  选项的  &lt;code&gt;git push&lt;/code&gt;  命令 来删除一个远程分支。 如果想要从服务器上删除  &lt;code&gt;serverfix&lt;/code&gt;  分支，运行下面的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git push origin --delete serverfix&lt;/span&gt;&lt;br&gt;To https://github.com/schacon/simplegit&lt;br&gt; - [deleted] serverfix&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;基本上这个命令做的只是从服务器上移除这个指针。  &lt;code&gt;Git&lt;/code&gt;  服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。&lt;/p&gt;
&lt;h2 id=&#34;变基&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变基&#34;&gt;#&lt;/a&gt; 变基&lt;/h2&gt;
&lt;p&gt;在  &lt;code&gt;Git&lt;/code&gt;  中整合来自不同分支的修改主要有两种方法： &lt;code&gt;merge&lt;/code&gt;  以及  &lt;code&gt;rebase&lt;/code&gt; 。 在本节中我们将学习什么是 “变基”，怎样使用 “变基”，并将展示该操作的惊艳之处，以及指出在何种情况下你应避免使用它。&lt;/p&gt;
&lt;h3 id=&#34;变基的基本操作&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变基的基本操作&#34;&gt;#&lt;/a&gt; 变基的基本操作&lt;/h3&gt;
&lt;p&gt;请考虑下面一个例子，你会看到开发任务分叉到两个不同分支，又各自提交了更新。&lt;/p&gt;
&lt;img src=&#34;branch_split.png&#34; alt=&#34;分叉的提交历史&#34;/&gt;
&lt;p&gt;之前介绍过，整合分支最容易的方法是  &lt;code&gt;merge&lt;/code&gt;  命令。 它会把两个分支的最新快照（ &lt;code&gt;C3&lt;/code&gt;  和  &lt;code&gt;C4&lt;/code&gt; ）以及二者最近的共同祖先（ &lt;code&gt;C2&lt;/code&gt; ）进行三方合并，合并的结果是生成一个新的快照（并提交）。&lt;/p&gt;
&lt;img src=&#34;merge.png&#34; alt=&#34;通过合并操作来整合分叉的历史&#34;/&gt;
&lt;p&gt;其实，还有一种方法：你可以提取在  &lt;code&gt;C4&lt;/code&gt;  中引入的补丁和修改，然后在  &lt;code&gt;C3&lt;/code&gt;  的基础上应用一次。 在  &lt;code&gt;Git&lt;/code&gt;  中，这种 操作就叫做&lt;strong&gt;变基（rebase）&lt;/strong&gt;。你可以使用  &lt;code&gt;rebase&lt;/code&gt;  命令将提交到某一分支上的所有修改都移至另一分支上，就好像 “重新播放” 一样。在这个例子中，你可以检出  &lt;code&gt;experiment&lt;/code&gt;  分支，然后将它变基到  &lt;code&gt;master&lt;/code&gt;  分支上：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git checkout experiment&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git rebase master&lt;/span&gt;&lt;br&gt;First, rewinding head to replay your work on top of it...&lt;br&gt;Applying: added staged command&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase.png&#34; alt=&#34;将 C4 中的修改变基到 C3 上&#34;/&gt;
&lt;p&gt;它的原理是首先找到这两个分支（即当前分支  &lt;code&gt;experiment&lt;/code&gt; 、变基操作的目标基底分支  &lt;code&gt;master&lt;/code&gt; ） 的最近共同 祖先  &lt;code&gt;C2&lt;/code&gt; ，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向 目标基底  &lt;code&gt;C3&lt;/code&gt; , 最后以此将之前另存为临时文件的修改依序应用。&lt;/p&gt;
&lt;p&gt;现在回到  &lt;code&gt;master&lt;/code&gt;  分支，进行一次快进合并。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git checkout master&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;git merge experiment&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_merge.png&#34; alt=&#34;master 分支的快进合并&#34;/&gt;
&lt;p&gt;这两种整合方法的最终结果没有任何区别，但是变基使得提交历史更加整洁。你在查看一个经过变基的分支的历史记录时会发现，尽管实际的开发工作是并行的，但它们看上去就像是串行的一样，提交历史是一条直线没有分叉。&lt;/p&gt;
&lt;p&gt;一般我们这样做的目的是为了确保在向远程分支推送时能保持提交历史的整洁 —— 例如向某个其他人维护的项目贡献代码时。 在这种情况下，你首先在自己的分支里进行开发，当开发完成时你需要先将你的代码变基到  &lt;code&gt;origin/master&lt;/code&gt;  上，然后再向主项目提交修改。 这样的话，该项目的维护者就不再需要进行整合工作，只需要快进合并便可。&lt;/p&gt;
&lt;p&gt;请注意，无论是通过变基，还是通过三方合并，整合的最终结果所指向的快照始终是一样的，只不过提交历史不 同罢了。 变基是将一系列提交按照原有次序依次应用到另一分支上，而合并是把最终结果合在一起。&lt;/p&gt;
&lt;h3 id=&#34;更有趣的变基例子&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#更有趣的变基例子&#34;&gt;#&lt;/a&gt; 更有趣的变基例子&lt;/h3&gt;
&lt;p&gt;在对两个分支进行变基时，所生成的 “重放” 并不一定要在目标分支上应用，你也可以指定另外的一个分支进行应用。 考虑下面的例子：&lt;/p&gt;
&lt;img src=&#34;rebase_example.png&#34; alt=&#34;从一个主题分支里再分出一个主题分支的提交历史&#34;/&gt;
&lt;p&gt;假设你希望将  &lt;code&gt;client&lt;/code&gt;  中的修改合并到主分支并发布，但暂时并不想合并  &lt;code&gt;server&lt;/code&gt;  中的修改， 因为它们还需要经过更全面的测试。这时，你就可以使用  &lt;code&gt;git rebase&lt;/code&gt;  命令的  &lt;code&gt;--onto&lt;/code&gt;  选项， 选中在  &lt;code&gt;client&lt;/code&gt;  分支里但不在  &lt;code&gt;server&lt;/code&gt;  分支里的修改（即  &lt;code&gt;C8&lt;/code&gt;  和  &lt;code&gt;C9&lt;/code&gt; ），将它们在  &lt;code&gt;master&lt;/code&gt;  分支上重放：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git rebase &lt;span class=&#34;hljs-literal&#34;&gt;--onto&lt;/span&gt; master server client&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上命令的意思是：取出  &lt;code&gt;client&lt;/code&gt;  分支，找出它从  &lt;code&gt;server&lt;/code&gt;  分支分歧之后的补丁， 然后把这些补丁在  &lt;code&gt;master&lt;/code&gt;  分支上重放一遍，让  &lt;code&gt;client&lt;/code&gt;  看起来像直接基于  &lt;code&gt;master&lt;/code&gt;  修改一样。这理解起来有一点复杂，不过效果非常酷。&lt;/p&gt;
&lt;img src=&#34;rebase_example2.png&#34; alt=&#34;截取主题分支上的另一个主题分支，然后变基到其他分支&#34;/&gt;
&lt;p&gt;现在可以快进合并  &lt;code&gt;master&lt;/code&gt;  分支了。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout master&lt;br&gt;git merge client&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_example3.png&#34; alt=&#34;快进合并 master 分支，使之包含来自 client 分支的修改&#34;/&gt;
&lt;p&gt;接下来你决定将  &lt;code&gt;server&lt;/code&gt;  分支中的修改也整合进来。 使用  &lt;code&gt;git rebase&lt;/code&gt;  命令可以直接将主题分支（即本例中的  &lt;code&gt;server&lt;/code&gt; ）变基到目标分支（即  &lt;code&gt;master&lt;/code&gt; ）上。这样做能省去你先切换到  &lt;code&gt;server&lt;/code&gt;  分支，再对其执行变基命令的多个步骤。&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git rebase master server&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_example4.png&#34; alt=&#34;快进合并 master 分支，使之包含来自 client 分支的修改&#34;/&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git checkout master&lt;br&gt;git merge server&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此， &lt;code&gt;client&lt;/code&gt;  和  &lt;code&gt;server&lt;/code&gt;  分支中的修改都已经整合到主分支里了， 你可以删除这两个分支，最终提交历史会变成如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs powershell&#34;&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; client&lt;br&gt;git branch &lt;span class=&#34;hljs-literal&#34;&gt;-d&lt;/span&gt; server&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&#34;rebase_example5.png&#34; alt=&#34;快进合并 master 分支，使之包含来自 client 分支的修改&#34;/&gt;
&lt;h3 id=&#34;变基的风险&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#变基的风险&#34;&gt;#&lt;/a&gt; 变基的风险&lt;/h3&gt;
&lt;p&gt;奇妙的变基也并非完美无缺，要用它得遵守一条准则： &lt;strong&gt;如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;git工具&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#git工具&#34;&gt;#&lt;/a&gt; Git 工具&lt;/h1&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.riversea.top/2024/01/28/mybatis/</guid>
            <title>MyBatis</title>
            <link>https://blog.riversea.top/2024/01/28/mybatis/</link>
            <category>ORM框架</category>
            <category>MyBatis</category>
            <pubDate>Sun, 28 Jan 2024 15:12:54 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;getting-started&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#getting-started&#34;&gt;#&lt;/a&gt; Getting Started&lt;/h1&gt;
&lt;h2 id=&#34;所需依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#所需依赖&#34;&gt;#&lt;/a&gt; 所需依赖&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MyBatis&lt;/code&gt;  依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;x.x.x&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据库驱动：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mysql&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-j&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;x.x.x&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置文件&#34;&gt;#&lt;/a&gt; 配置文件&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MyBatis&lt;/code&gt;  中有两个 &lt;code&gt;XML&lt;/code&gt;  配置文件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MyBatis&lt;/code&gt;  的核心配置文件用于配置数据源等信息 ———— &lt;code&gt;Mybatis-config.xml&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;hljs-keyword&#34;&gt;configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;environments&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;default&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;environment&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;transactionManager&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;JDBC&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dataSource&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;POOLED&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;      &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dataSource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;environment&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;environments&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mappers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resource&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mappers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;MyBatis&lt;/code&gt;  映射文件用于配置 &lt;code&gt;sql&lt;/code&gt;  语句 ———— &lt;code&gt;xxxMmapper.xml&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;hljs-keyword&#34;&gt;mapper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;  &lt;span class=&#34;hljs-keyword&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;  &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;namespace&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;注意，上述配置文件的名字不是固定的，但一般取为 &lt;code&gt;Mybatis-config.xml&lt;/code&gt;  和 &lt;code&gt;xxxMmapper.xml&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;放置的位置也不是固定的，但一般为 &lt;code&gt;resources&lt;/code&gt;  下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;建表&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#建表&#34;&gt;#&lt;/a&gt; 建表&lt;/h2&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_user(&lt;br&gt;    id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key auto_increment comment &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;主键自增&amp;#x27;&lt;/span&gt;,&lt;br&gt;    car_num &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;) comment &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;汽车编号&amp;#x27;&lt;/span&gt;,&lt;br&gt;    brand &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;) comment &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;品牌&amp;#x27;&lt;/span&gt;,&lt;br&gt;    guide_price &lt;span class=&#34;hljs-type&#34;&gt;decimal&lt;/span&gt; comment &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;厂家指导价&amp;#x27;&lt;/span&gt;,&lt;br&gt;    produce_time &lt;span class=&#34;hljs-type&#34;&gt;date&lt;/span&gt; comment &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;生产时间&amp;#x27;&lt;/span&gt;,&lt;br&gt;    car_type &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;) comment &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;汽车类型&amp;#x27;&lt;/span&gt;&lt;br&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置数据库&#34;&gt;#&lt;/a&gt; 配置数据库&lt;/h2&gt;
&lt;p&gt;在核心配置文件中的 &lt;code&gt;&amp;lt;datasource&amp;gt;&lt;/code&gt;  标签中的 &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt;  标签，填入连接数据库的 &lt;code&gt;driver&lt;/code&gt; 、 &lt;code&gt;url&lt;/code&gt; 、 &lt;code&gt;username&lt;/code&gt; 、 &lt;code&gt;password&lt;/code&gt; 。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;或者在 &lt;code&gt;&amp;lt;configuration&amp;gt;&lt;/code&gt;  中的开头填入以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;properties&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resource&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jdbc.properties&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #此标签的作用是引入资源文件&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后在 &lt;code&gt;jdbc.properties&lt;/code&gt;  中填入：&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs properties&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;driver&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;url&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;username&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;password&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;连接核心配置文件和映射文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接核心配置文件和映射文件&#34;&gt;#&lt;/a&gt; 连接核心配置文件和映射文件&lt;/h2&gt;
&lt;p&gt;当你创建好映射文件后，需要在核心配置文件申明你所创建的映射文件的位置。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;&amp;lt;mappers&amp;gt;&lt;/code&gt;  标签中中填入映射文件：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mappers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;   &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resource&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mappers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resource&lt;/code&gt;  从项目根目录进行查询。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;编写映射文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写映射文件&#34;&gt;#&lt;/a&gt; 编写映射文件&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;hljs-keyword&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-//mybatis.org//DTD Mapper 3.0//EN&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;namespace&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.demo1.mapper.CarMapper&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;insertCar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        insert into t_car values(null,&amp;#x27;1002&amp;#x27;,&amp;#x27;奔驰&amp;#x27;,20.00,current_date(),&amp;#x27;燃油车&amp;#x27;);&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;insert&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;如何连接数据库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何连接数据库&#34;&gt;#&lt;/a&gt; 如何连接数据库？&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  通过 &lt;code&gt;SqlSession&lt;/code&gt;  实例建立连接数据库的一次会话。通过会话，就可以操控数据库&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SqlSession&lt;/code&gt;  实例通过 &lt;code&gt;SqlSessionFactory&lt;/code&gt;  实例创建，而 &lt;code&gt;SqlSessionFactory&lt;/code&gt;  实例通过 &lt;code&gt;SqlSessionBuilder&lt;/code&gt;  实例创建。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;startTest&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Resources.getResourceAsStream(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mybatis-config.xml&amp;quot;&lt;/span&gt;))&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SqlSessionFactoryBuilder&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSessionFactoryBuilder&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SqlSessionFactoryBuilder&lt;/span&gt;();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SqlSessionFactory&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sessionFactory&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sqlSessionFactoryBuilder.build(inputStream);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sessionFactory.openSession();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;CarMapper&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;carMapper&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sqlSession.getMapper(CarMapper.class);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; carMapper.insertCar(); &lt;span class=&#34;hljs-comment&#34;&gt;//insert，update，delete返回值是影响的行数&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;影响行数：&amp;quot;&lt;/span&gt; + res);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Resouces&lt;/code&gt; ： &lt;code&gt;Mybatis&lt;/code&gt;  提供的获取核心配置文件的类
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Resources.getResourceAsStream()&lt;/code&gt; ：将对应的配置文件封装为输入流，同样也是从项目根路径开始查找&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sqlSessionFactoryBuilder.build(inputStream)&lt;/code&gt; ：通过该配置文件创建出 &lt;code&gt;SqlSessionFactory&lt;/code&gt;  实例&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sessionFactory.openSession()&lt;/code&gt; ：生产 &lt;code&gt;SqlSession&lt;/code&gt;  实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;执行sql语句&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行sql语句&#34;&gt;#&lt;/a&gt; 执行 Sql 语句&lt;/h2&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;startTest&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;(&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Resources.getResourceAsStream(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mybatis-config.xml&amp;quot;&lt;/span&gt;))&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SqlSessionFactoryBuilder&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSessionFactoryBuilder&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SqlSessionFactoryBuilder&lt;/span&gt;();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SqlSessionFactory&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sessionFactory&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sqlSessionFactoryBuilder.build(inputStream);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sessionFactory.openSession();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sqlSession.insert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;insertCar&amp;quot;&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;//insertCar为映射文件中insert块的id&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;影响行数：&amp;quot;&lt;/span&gt; + res);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;运行上述代码，如果前面配置没有出错，则你会在控制台看见输出：影响行数：1&lt;/p&gt;
&lt;p&gt;但前往数据库并没有发现有记录的增加。&lt;/p&gt;
&lt;p&gt;因为 &lt;code&gt;Mybatis&lt;/code&gt;  本身的事务是不会自动提交的。需要显式提交&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以使用下面的语句显式提交&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;sqlSession.commit(); &lt;span class=&#34;hljs-comment&#34;&gt;//提交事务&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;获得输入流的几种方法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获得输入流的几种方法&#34;&gt;#&lt;/a&gt; 获得输入流的几种方法&lt;/h1&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Resources.getResourceAsStream(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;path/to/&amp;quot;&lt;/span&gt;)&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;InputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;path/to/&amp;quot;&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;//自己创建输入流，需要写明完整的绝对路径或者相对路径。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ClassLoader.getSystemClassLoader().getResourceAsStream(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;path/to/&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//Resources.getResourceAsStream()的底层实现&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;核心配置文件不一定放在项目根目录下，你可以在根目录下建个目录，也可以放在项目根目录外面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;mybatis的事务管理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis的事务管理&#34;&gt;#&lt;/a&gt; Mybatis 的事务管理&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  通过核心配置文件的 &lt;code&gt;&amp;lt;transactionManager type=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;  管理事务。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;type&lt;/code&gt;  可用的属性为： &lt;code&gt;[JDBC|MANAGED]&lt;/code&gt; 。不区分大小写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;JDBC&lt;/code&gt; ： &lt;code&gt;Mybatis&lt;/code&gt;  自己管理事务，使用 &lt;code&gt;JDBC&lt;/code&gt;  原生的事务管理器进行管理。提交时，相当于 &lt;code&gt;JDBC&lt;/code&gt;  的 &lt;code&gt;connection.commit()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;底层会创建 &lt;code&gt;JDBCTransaction&lt;/code&gt;  实例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MANAGED&lt;/code&gt; ： &lt;code&gt;Mybatis&lt;/code&gt;  不自己管理事务，交给第三方框架，例如： &lt;code&gt;spring&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;如果只有 &lt;code&gt;Mybatis&lt;/code&gt;  本身，那么代表着不开启事务。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;JDBC 底层的事务是默认提交的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;源码分析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#源码分析&#34;&gt;#&lt;/a&gt; 源码分析&lt;/h2&gt;
&lt;p&gt;创建 &lt;code&gt;JDBC&lt;/code&gt;  事务的 &lt;code&gt;SqlSession&lt;/code&gt;  实例时，会创建 &lt;code&gt;JDBC&lt;/code&gt;  原生的 &lt;code&gt;Connection&lt;/code&gt;  实例。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sessionFactory.openSession(); &lt;span class=&#34;hljs-comment&#34;&gt;//从这里打断点，进入openSession方法&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; openSessionFromDataSource(configuration.getDefaultExecutorType(), &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//openSession()的方法体，注意最后一个false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*进入openSessionFromDataSource()方法 一直执行至如下语句*/&lt;/span&gt;&lt;br&gt;tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit); &lt;span class=&#34;hljs-comment&#34;&gt;//创建了一个事务，注意此时autoCommit为false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//进入newTransaction()方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;JdbcTransaction&lt;/span&gt;(ds, level, autoCommit, skipSetAutoCommitOnClose);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*再次进入JdbcTransaction()方法，搜索openConnetion()方法，打上断点，执行至此&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;一直运行至setDesiredAutoCommit()方法并进入*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (connection.getAutoCommit() != desiredAutoCommit) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//connection默认为自动提交，也就是autoCommit为true&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (log.isDebugEnabled()) &amp;#123;&lt;br&gt;        log.debug(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Setting autocommit to &amp;quot;&lt;/span&gt; + desiredAutoCommit + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; on JDBC Connection [&amp;quot;&lt;/span&gt; + connection + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;connection.setAutoCommit(desiredAutoCommit); &lt;span class=&#34;hljs-comment&#34;&gt;//只有当autoCommit为false时才会执行，也就是将connection的自动提交关闭&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//如何开启自动提交？&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//最开始就将autoCommit设为true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sessionFactory.openSession(&lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;) &lt;span class=&#34;hljs-comment&#34;&gt;//表示没有事务，执行一次DML就提交一次，不建议&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;注意， &lt;code&gt;openSession()&lt;/code&gt;  方法有三个重载：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public SqlSession openSession()&lt;/code&gt; ：默认 &lt;code&gt;autoCommit&lt;/code&gt;  就为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public SqlSession openSession(boolean autoCommit)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public SqlSession openSession(ExecutorType execType)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建 &lt;code&gt;MANAGED&lt;/code&gt;  事务的 &lt;code&gt;SqlSession&lt;/code&gt;  实例时&lt;/p&gt;
&lt;h1 id=&#34;日志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日志&#34;&gt;#&lt;/a&gt; 日志&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  可用的日志框架：&lt;/p&gt;
&lt;p&gt;SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING |&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  本身实现了 &lt;code&gt;STDOUT_LOGGING&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;&amp;lt;settings&amp;gt;&lt;/code&gt;  中填入如下内容启用 &lt;code&gt;Mybatis&lt;/code&gt;  自身的日志：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt; &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;logImpl&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;STDOUT_LOGGING&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;settings&amp;gt;&lt;/code&gt;  应该在 &lt;code&gt;&amp;lt;properties&amp;gt;&lt;/code&gt;  标签后&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;增删改查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增删改查&#34;&gt;#&lt;/a&gt; 增删改查&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  来提供传入的参数。 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  中填入传值的参数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仍然使用 [Getting Started](#Getting Started) 中使用的表，代码&lt;/p&gt;
&lt;h2 id=&#34;增&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#增&#34;&gt;#&lt;/a&gt; 增&lt;/h2&gt;
&lt;p&gt;将映射语句改成如下：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;insertCar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    insert into t_car values(null,#&amp;#123;carNum&amp;#125;,#&amp;#123;brand&amp;#125;,#&amp;#123;guidePrice&amp;#125;,#&amp;#123;produceTime&amp;#125;,#&amp;#123;carType&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;insert&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map&#34;&gt;#&lt;/a&gt; Map&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;map&lt;/code&gt;  传参，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;br&gt;    sqlSession = SqlSessionUtil.getSqlSession();&lt;br&gt;    Map&amp;lt;String,Object&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;    map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;    map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;carNum&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1003&amp;quot;&lt;/span&gt;);&lt;br&gt;    map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;brand&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;大众&amp;quot;&lt;/span&gt;);&lt;br&gt;    map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;guidePrice&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;10.00&lt;/span&gt;);&lt;br&gt;    map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;produceTime&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Date&lt;/span&gt;());&lt;br&gt;    map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;carType&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;老爷车&amp;quot;&lt;/span&gt;);&lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;影响: &amp;quot;&lt;/span&gt; + sqlSession.insert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;insertCar&amp;quot;&lt;/span&gt;, map));&lt;br&gt;    sqlSession.commit();&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(sqlSession != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;br&gt;        sqlSession.rollback();&lt;br&gt;        sqlSession.close();&lt;br&gt;    &amp;#125;&lt;br&gt;    e.printStackTrace();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;实体类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实体类&#34;&gt;#&lt;/a&gt; 实体类&lt;/h3&gt;
&lt;p&gt;创建一个 &lt;code&gt;Car&lt;/code&gt;  实体类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Car&lt;/span&gt; &amp;#123;&lt;br&gt;    Integer id;&lt;br&gt;    String carNum;&lt;br&gt;    String brand;&lt;br&gt;    BigDecimal guidPrice;&lt;br&gt;    Date produceTime;&lt;br&gt;    String carType;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;@Data 为 &lt;code&gt;lombok&lt;/code&gt;  依赖的注解，用于简化实体类开发，自动创建 &lt;code&gt;getter&lt;/code&gt; 、 &lt;code&gt;setter&lt;/code&gt;  方法以及重写 &lt;code&gt;toString&lt;/code&gt;  方法&lt;/p&gt;
&lt;p&gt;@AllArgsConstructor 则是创建全参数的构造器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;br&gt;    sqlSession = SqlSessionUtil.getSqlSession();&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;Car&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Car&lt;/span&gt;(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1005&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;红旗&amp;quot;&lt;/span&gt;,BigDecimal.valueOf(&lt;span class=&#34;hljs-number&#34;&gt;20.00&lt;/span&gt;),&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Date&lt;/span&gt;(),&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;燃油车&amp;quot;&lt;/span&gt;);&lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;影响: &amp;quot;&lt;/span&gt; + sqlSession.insert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;insertCar&amp;quot;&lt;/span&gt;, car));&lt;br&gt;    sqlSession.commit();&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(sqlSession != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;br&gt;        sqlSession.rollback();&lt;br&gt;		sqlSession.close();&lt;br&gt;    &amp;#125;&lt;br&gt;    e.printStackTrace();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;当插入的是 &lt;code&gt;map&lt;/code&gt;  时， &lt;code&gt;Mybatis&lt;/code&gt;  底层会使用 &lt;code&gt;map&lt;/code&gt;  的 &lt;code&gt;get&lt;/code&gt;  方法获取参数值，参数的名字为对于的键名&lt;/p&gt;
&lt;p&gt;当插入的是实体类时， &lt;code&gt;Mybatis&lt;/code&gt;  底层会使用 &lt;code&gt;getter&lt;/code&gt;  方法获取参数值，参数的名字是 &lt;code&gt;getter方法&lt;/code&gt; 去掉 &lt;code&gt;get&lt;/code&gt;  后首字母小写的得到的，例如：getUserName ()–&amp;gt; userName。没有 &lt;code&gt;getter&lt;/code&gt;  方法时会报错&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;删&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删&#34;&gt;#&lt;/a&gt; 删&lt;/h2&gt;
&lt;p&gt;根据 &lt;code&gt;Id&lt;/code&gt;  删除：&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;CarMapper.xml&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;delCar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    delete from t_car where id=#&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;delete&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行以下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;br&gt;    sqlSession = SqlSessionUtil.getSqlSession();&lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;影响: &amp;quot;&lt;/span&gt; + sqlSession.getMapper(CarMapper.class).delCar(&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;));&lt;br&gt;    sqlSession.commit();&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(sqlSession != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;br&gt;        sqlSession.rollback();&lt;br&gt;        sqlSession.close();&lt;br&gt;    &amp;#125;&lt;br&gt;    e.printStackTrace();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;改&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#改&#34;&gt;#&lt;/a&gt; 改&lt;/h2&gt;
&lt;p&gt;根据 &lt;code&gt;Id&lt;/code&gt;  改&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;CarMapper.xml&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;update&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;updateCar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    update t_car set car_num=#&amp;#123;carNum&amp;#125;, brand=#&amp;#123;brand&amp;#125;, guide_price=#&amp;#123;guidePrice&amp;#125;,produce_time=#&amp;#123;produceTime&amp;#125;, car_type=#&amp;#123;carType&amp;#125; where id=#&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;update&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行以下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;br&gt;    sqlSession = SqlSessionUtil.getSqlSession();&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;Car&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;car&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Car&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1110&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;丰田&amp;quot;&lt;/span&gt;,BigDecimal.valueOf(&lt;span class=&#34;hljs-number&#34;&gt;30.00&lt;/span&gt;),&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Date&lt;/span&gt;(),&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;新能源车&amp;quot;&lt;/span&gt;);&lt;br&gt;    System.out.println(sqlSession.update(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;updateCar&amp;quot;&lt;/span&gt;, car));&lt;br&gt;    sqlSession.commit();&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(sqlSession != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;br&gt;        sqlSession.rollback();&lt;br&gt;        sqlSession.close();&lt;br&gt;    &amp;#125;&lt;br&gt;    e.printStackTrace();&lt;br&gt;	&amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查&#34;&gt;#&lt;/a&gt; 查&lt;/h2&gt;
&lt;p&gt;首先，请在核心配置文件中添加如下配置：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mapUnderscoreToCamelCase&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;按id查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#按id查&#34;&gt;#&lt;/a&gt; 按 id 查&lt;/h3&gt;
&lt;p&gt;修改 &lt;code&gt;CarMapper.xml&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCarById&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.mybatis.entity.Car&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_car where id=#&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行以下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;br&gt;    sqlSession = SqlSessionUtil.getSqlSession();&lt;br&gt;    System.out.println((Car)sqlSession.selectOne(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCarById&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)); &lt;span class=&#34;hljs-comment&#34;&gt;//查出来是Object，需要强转&lt;/span&gt;&lt;br&gt;    sqlSession.commit();&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(sqlSession != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;br&gt;        sqlSession.rollback();&lt;br&gt;        sqlSession.close();&lt;br&gt;    &amp;#125;&lt;br&gt;    e.printStackTrace();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查全部&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查全部&#34;&gt;#&lt;/a&gt; 查全部&lt;/h3&gt;
&lt;p&gt;修改 &lt;code&gt;CarMapper.xml&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCars&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.mybatis.entity.Car&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	select * from t_car;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行以下代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt; &lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt;&amp;#123;&lt;br&gt;    sqlSession = SqlSessionUtil.getSqlSession();&lt;br&gt;    System.out.println(sqlSession.selectList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.mybatis.mapper.CarMapper.getCars&amp;quot;&lt;/span&gt;, CarMapper.class));&lt;br&gt;    System.out.println(list);&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(sqlSession != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;)&amp;#123;&lt;br&gt;        sqlSession.rollback();&lt;br&gt;        sqlSession.close();&lt;br&gt;    &amp;#125;&lt;br&gt;    e.printStackTrace();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  查出来后是一个数据集，要进行映射，必须告诉 &lt;code&gt;Mybatis&lt;/code&gt;  如何进行映射。即在 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;  中声明 &lt;code&gt;resultType&lt;/code&gt;  或者 &lt;code&gt;resultMap&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resultType&lt;/code&gt; ：将结果集和一个类型映射，一般是某个类的全类名。或者是别名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过核心配置文件中，添加 &lt;code&gt;&amp;lt;typeAliases&amp;gt;&amp;lt;package name=&amp;quot;/path/to/package&amp;quot;/&amp;gt;&amp;lt;/typeAliases&amp;gt;&lt;/code&gt; ，来为改包下的所有类添加别名，默认为类名小写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;或者在想要设置别名的类加上 &lt;code&gt;@Alias(alias)&lt;/code&gt; ，来设置别名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@Alias&lt;/code&gt;  会覆盖核心配置文件设置的别名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resultMap&lt;/code&gt; ：自定义映射。见&lt;a href=&#34;##resultMap&#34;&gt; resultMap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;settings&amp;gt; &amp;lt;setting name=&amp;quot;mapUnderscoreToCamelCase&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt; &amp;lt;/settings&amp;gt;&lt;/code&gt; ：开启下划线命名法和驼峰命名法的映射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;光使用 &lt;code&gt;resultType&lt;/code&gt;  还不行，因为数据库一般是下划线命名法， &lt;code&gt;java&lt;/code&gt;  是驼峰命名法， &lt;code&gt;Mybatis&lt;/code&gt;  不知道将字段映射至哪个属性上。开启这个设置后，将会使驼峰命名的属性和下划线命名的字段映射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若属性和字段相同 &lt;code&gt;Mybatis&lt;/code&gt;  会自动映射，因此不用开启下划线命名法和驼峰命名法的映射&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用字段别名也可以进行映射&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;namespace&lt;/code&gt; ：命名空间。就像 &lt;code&gt;c++&lt;/code&gt;  的命名空间和 &lt;code&gt;java&lt;/code&gt;  的包一样，为了区分出映射语句 &lt;code&gt;id&lt;/code&gt;  的所处的范围。防止重名。&lt;/p&gt;
&lt;p&gt;完整的引用应该是： &lt;code&gt;namepace.id&lt;/code&gt; 。当没有 &lt;code&gt;id&lt;/code&gt;  重名是，仅仅使用 &lt;code&gt;id&lt;/code&gt;  就能区分，有 &lt;code&gt;id&lt;/code&gt;  重名时，必须使用完整的引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;核心配置文件详解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#核心配置文件详解&#34;&gt;#&lt;/a&gt; 核心配置文件详解&lt;/h1&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--properties：用于设置属性，或者引入properties文件--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--通过$&amp;#123;name&amp;#125;即可获取value的值--&amp;gt;&lt;/span&gt;&lt;br&gt;    ...&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--properties resource=&amp;quot;/path/to/properties&amp;quot;/--&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--用于引入properties文件，同样可以用$&amp;#123;name&amp;#125;的方式获取value的值--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--environments包裹enviroment标签， defualt代表默认的环境id，创建SqlSessionFactory实例时，未指明环境使用的默认环境--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;environments&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;default&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--环境，一般对于着一个数据库，一数据库对应着一个SqlSessionFactory，id为该环境的唯一标识--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;environment&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;development&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;			transactionManager：申明使用哪种事务管理。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		--&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;transactionManager&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;JDBC&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;			dataSource：数据源==连接池，通过数据源获取提供connection对象。DataSource是JDK提供的规范，有很多实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;			type：使用声明方式获取Connection实例 [POOLED|UNPOOLED|JNDI]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;			UNPOOLED：不适应数据库连接池技术，每一次连接都会创建新的Connection实例&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;			POOLED：使用Mybatis自己实现的数据库连接池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;			JNDI：使用第三方的数据库连接池&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		--&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dataSource&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;POOLED&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dataSource&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;environment&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    ... &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--可以创建多个环境--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;environments&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;mybatis的核心类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis的核心类&#34;&gt;#&lt;/a&gt; Mybatis 的核心类&lt;/h1&gt;
&lt;h2 id=&#34;sqlsessionfactorybuilder&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sqlsessionfactorybuilder&#34;&gt;#&lt;/a&gt; SqlSessionFactoryBuilder&lt;/h2&gt;
&lt;p&gt;这个类可以被实例化、使用和丢弃，一旦创建了 &lt;code&gt;SqlSessionFactory&lt;/code&gt; ，就不再需要它了。 因此 &lt;code&gt;SqlSessionFactoryBuilder&lt;/code&gt;  实例的最佳作用域是方法作用域（也就是局部方法变量）。 你可以重用 &lt;code&gt;SqlSessionFactoryBuilder&lt;/code&gt;  来创建多个 &lt;code&gt;SqlSessionFactory&lt;/code&gt;  实例，但最好还是不要一直保留着它，以保证所有的 &lt;code&gt;XML&lt;/code&gt;  解析资源可以被释放给更重要的事情。&lt;/p&gt;
&lt;h2 id=&#34;sqlsessionfactory&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sqlsessionfactory&#34;&gt;#&lt;/a&gt; SqlSessionFactory&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;SqlSessionFactory&lt;/code&gt;  一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 &lt;code&gt;SqlSessionFactory&lt;/code&gt;  的最佳实践是在应用运行期间不要重复创建多次，多次重建 &lt;code&gt;SqlSessionFactory&lt;/code&gt;  被视为一种代码&lt;strong&gt;坏习惯&lt;/strong&gt;。因此 &lt;code&gt;SqlSessionFactory&lt;/code&gt;  的最佳作用域是应用作用域。有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。&lt;/p&gt;
&lt;h2 id=&#34;sqlsession&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sqlsession&#34;&gt;#&lt;/a&gt; SqlSession&lt;/h2&gt;
&lt;p&gt;每个线程都应该有它自己的 &lt;code&gt;SqlSession&lt;/code&gt;  实例。 &lt;code&gt;SqlSession&lt;/code&gt;  的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 &lt;code&gt;SqlSession &lt;/code&gt; 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 &lt;code&gt;SqlSession&lt;/code&gt;  实例的引用放在任何类型的托管作用域中，比如 &lt;code&gt;Servlet&lt;/code&gt;  框架中的 &lt;code&gt;HttpSession&lt;/code&gt; 。如果你现在正在使用一种 &lt;code&gt;Web&lt;/code&gt;  框架，考虑将 &lt;code&gt;SqlSession&lt;/code&gt;  放在一个和 HTTP 请求相似的作用域中。换句话说，每次收到 HTTP 请求，就可以打开一个 &lt;code&gt;SqlSession&lt;/code&gt; ，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 &lt;code&gt;finally&lt;/code&gt;  块中。&lt;/p&gt;
&lt;h1 id=&#34;mybatis代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mybatis代理&#34;&gt;#&lt;/a&gt; Mybatis 代理&lt;/h1&gt;
&lt;p&gt;如果，你使用之前所述的方法在 &lt;code&gt;web&lt;/code&gt;  钟进行查询，是否发现了， &lt;code&gt;dao&lt;/code&gt;  层书写的代码大同小异。几乎一模一样。有没有简单的方法执行 &lt;code&gt;sql&lt;/code&gt;  语句？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;答案是有。 &lt;code&gt;Mybatis&lt;/code&gt;  底层封装了 &lt;code&gt;javassist&lt;/code&gt;  进行动态代理，使用者可以只书写一个接口， &lt;code&gt;Mybatis&lt;/code&gt;  可以为这个接口创建一个动态代理类。这样我们并不用自己区写一个访问数据库的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt; t 通过 &lt;code&gt;javassist&lt;/code&gt;  实现接口和其中的方法。那么问题来了， &lt;code&gt;Mybatis&lt;/code&gt;  底层如何获得的 &lt;code&gt;sql&lt;/code&gt;  语句？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  可以通过映射文件的标签中的 &lt;code&gt;id&lt;/code&gt;  获得其中的 &lt;code&gt;sql&lt;/code&gt;  语句&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既然可以通过 &lt;code&gt;id&lt;/code&gt;  获取 &lt;code&gt;sql&lt;/code&gt;  语句，那么 &lt;code&gt;Mybatis&lt;/code&gt;  如何知道使用者书写的 &lt;code&gt;id&lt;/code&gt;  和插入的对应方法？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  规定：如果使用动态代理的方式执行 &lt;code&gt;sql&lt;/code&gt;  语句，那么映射文件中的 &lt;code&gt;namespace&lt;/code&gt;  应该是对应接口的完全限定类名，映射语句的 &lt;code&gt;id&lt;/code&gt; ，应该是对应方法的方法名。&lt;/p&gt;
&lt;p&gt;而如果你不适应动态代理的方式执行 &lt;code&gt;sql&lt;/code&gt;  语句，则没有上述规定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  通过以下方式获得动态代理类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;sqlsession.getMapper(xxx.class) &lt;span class=&#34;hljs-comment&#34;&gt;//这样将获得xxx接口的代理类，这样就可以通过代理类的方法执行sql&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;小技巧&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#小技巧&#34;&gt;#&lt;/a&gt; 小技巧&lt;/h1&gt;
&lt;h2 id=&#34;和的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#和的区别&#34;&gt;#&lt;/a&gt; #{} 和 ${} 的区别&lt;/h2&gt;
&lt;p&gt;实际上， &lt;code&gt;Mybatis&lt;/code&gt;  提供 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  和 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  来进行传参。 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  中填入传值的参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt; ：底层使用 &lt;code&gt;PreparedStatement&lt;/code&gt; ，会先进行 &lt;code&gt;sql&lt;/code&gt;  的编译，相当 &lt;code&gt;?&lt;/code&gt;  占位符，对字符串来说会自动添加引号。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt; ：底层使用 &lt;code&gt;Staement&lt;/code&gt; ，会先进行字符串的拼接，对字符串来说就是没有引号。无法防止 &lt;code&gt;sql&lt;/code&gt;  注入，只有在字符串拼接的情况下才使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;typealiases&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#typealiases&#34;&gt;#&lt;/a&gt; typeAliases&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;typeAliases&lt;/code&gt;  为核心配置文件的标签。为 &lt;code&gt;resultType&lt;/code&gt;  提供别名。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;typeAliases&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;typeAlias&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/reference/to/class&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;alias&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;alias&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #type为起别名类的完全限定名，alias为别名&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;typeAlias&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/reference/to/class&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #省略alias，将会使用类的默认简名————去掉包名，且别名不分大小写&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/path/to/package&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #为该包下的所有类起别名，同样使用类的默认简名&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;typeAliases&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  为常用的类型提供了别名。参考文档：&lt;a href=&#34;https://mybatis.net.cn/configuration.html#typeAliases&#34;&gt;MyBatis 内置别名&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;mappers标签的细节&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mappers标签的细节&#34;&gt;#&lt;/a&gt; mappers 标签的细节&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mappers&lt;/code&gt;  为核心配置文件的标签。包含映射文件的路径&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mappers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resource&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/path/to/xml&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #从项目根路径开始找映射文件&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;url&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;file:///absolute/path/to/xml&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #定位计算机本地的映射文件&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;reference.to.class&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #通过接口名找到的映射文件，Mybatis会从reference/to/class.xml找映射文件&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;reference.to.package&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; #找到该包下的映射文件&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mappers&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;使用第 3 和第 4 种方式，必须保证：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射文件和接口同名&lt;/li&gt;
&lt;li&gt;映射文件和接口处同一目录下&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;插入数据时自动获取生成的主键&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#插入数据时自动获取生成的主键&#34;&gt;#&lt;/a&gt; 插入数据时自动获取生成的主键&lt;/h2&gt;
&lt;p&gt;在 &lt;code&gt;&amp;lt;insert&amp;gt;&lt;/code&gt;  标签中开启 &lt;code&gt;useGeneratedKey&lt;/code&gt; ，表明开启自动获取生成的主键，同时设置 &lt;code&gt;keyProperty&lt;/code&gt; ，实体类的哪个属性作为返回的主键&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;insert&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;useGeneratedKey&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;keyProperty&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当插入完成后， &lt;code&gt;Mybatis&lt;/code&gt;  会自动给实体类的这个参数赋值为生成的主键。&lt;/p&gt;
&lt;h1 id=&#34;参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参数&#34;&gt;#&lt;/a&gt; 参数&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  简单参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;byte short int long float double&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Byte Short Integer Long Float Double&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.util.Date&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;java.sql.Date&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;单个简单参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单个简单参数&#34;&gt;#&lt;/a&gt; 单个简单参数&lt;/h2&gt;
&lt;p&gt;使用单个简单参数时， &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  和 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  中的 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  的参数可以随便写。对于 &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt; ， &lt;code&gt;Mybatis&lt;/code&gt;  底层仍然使用 &lt;code&gt;preparedStatement.setxxx()&lt;/code&gt;  方法向占位符赋值。 &lt;code&gt;Mybatis&lt;/code&gt;  底层会猜出简单参数的类型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;实际上，在每个映射块中可以使用 &lt;code&gt;parameterType&lt;/code&gt;  属性来指明参数的类型，但可以不写， &lt;code&gt;Mybatis&lt;/code&gt;  可以猜出来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;map集合参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#map集合参数&#34;&gt;#&lt;/a&gt; Map 集合参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  底层会使用 &lt;code&gt;map&lt;/code&gt;  的 &lt;code&gt;get&lt;/code&gt;  方法获取参数值，， &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  和 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  中的 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  的参数的名字为对应的键名&lt;/p&gt;
&lt;h2 id=&#34;实体类参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#实体类参数&#34;&gt;#&lt;/a&gt; 实体类参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  底层会使用 &lt;code&gt;getter&lt;/code&gt;  方法获取参数值，， &lt;code&gt;#&amp;#123;&amp;#125;&lt;/code&gt;  和 &lt;code&gt;$&amp;#123;&amp;#125;&lt;/code&gt;  中的 &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  的参数的名字是 &lt;code&gt;getter方法&lt;/code&gt; 去掉 &lt;code&gt;get&lt;/code&gt;  后首字母小写的得到的，例如：getUserName ()–&amp;gt; userName。没有 &lt;code&gt;getter&lt;/code&gt;  方法时会报错&lt;/p&gt;
&lt;h2 id=&#34;多参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多参数&#34;&gt;#&lt;/a&gt; 多参数&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  底层会自动创建一个 &lt;code&gt;map&lt;/code&gt;  集合，以以下方式存放：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;arg0&amp;quot;&lt;/span&gt;,param1)&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;arg1&amp;quot;&lt;/span&gt;,param2)&lt;br&gt;...&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;param1&amp;quot;&lt;/span&gt;,param0)&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;param2&amp;quot;&lt;/span&gt;,param1)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;因此可以使用以下方式引用参数值：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;#&amp;#123;arg0&amp;#125;,#&amp;#123;agr1&amp;#125;...&lt;br&gt;$&amp;#123;arg0&amp;#125;,$&amp;#123;arg1&amp;#125;...&lt;br&gt;#&amp;#123;param1&amp;#125;,#&amp;#123;param2&amp;#125;...&lt;br&gt;$&amp;#123;param1&amp;#125;,$&amp;#123;param2&amp;#125;...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;param注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#param注解&#34;&gt;#&lt;/a&gt; @Param 注解&lt;/h3&gt;
&lt;p&gt;可以自己指定 &lt;code&gt;map&lt;/code&gt;  中的 &lt;code&gt;key&lt;/code&gt;  是什么，如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; xxx &lt;span class=&#34;hljs-title function_&#34;&gt;getXXX&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Param(&amp;quot;yy&amp;quot;)&lt;/span&gt;xx yy)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;此方法会让前缀为 &lt;code&gt;arg&lt;/code&gt;  的键失效，但前缀为 &lt;code&gt;param&lt;/code&gt;  的键依然存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;数组或者list集合参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数组或者list集合参数&#34;&gt;#&lt;/a&gt; 数组或者 List 集合参数&lt;/h2&gt;
&lt;p&gt;此参数要配合 &lt;code&gt;foreach&lt;/code&gt;  标签使用。 &lt;code&gt;foreach&lt;/code&gt;  标签见&lt;a href=&#34;##foreach&#34;&gt; foreach&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;查询返回&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询返回&#34;&gt;#&lt;/a&gt; 查询返回&lt;/h1&gt;
&lt;h2 id=&#34;返回单个&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回单个&#34;&gt;#&lt;/a&gt; 返回单个&lt;/h2&gt;
&lt;h3 id=&#34;返回单个对象实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回单个对象实例&#34;&gt;#&lt;/a&gt; 返回单个对象实例&lt;/h3&gt;
&lt;h4 id=&#34;返回实体类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回实体类&#34;&gt;#&lt;/a&gt; 返回实体类&lt;/h4&gt;
&lt;p&gt;在映射块中表面 &lt;code&gt;resultType&lt;/code&gt;  的类型， &lt;code&gt;Mybatis&lt;/code&gt;  将自动进行结果集映射。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;若返回条数是多个，使用实体类接受会产生 &lt;code&gt;TooManyResultException&lt;/code&gt;  错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;返回没有适合的实体类的结果集&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回没有适合的实体类的结果集&#34;&gt;#&lt;/a&gt; 返回没有适合的实体类的结果集&lt;/h4&gt;
&lt;p&gt;返回的结果集没有适合的实体类接受，则可以使用 &lt;code&gt;map&amp;lt;String, Object&amp;gt;&lt;/code&gt;  进行接受，同时指定 &lt;code&gt;resultType&lt;/code&gt;  为 &lt;code&gt;map&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;返回单个简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回单个简单类型&#34;&gt;#&lt;/a&gt; 返回单个简单类型&lt;/h3&gt;
&lt;p&gt;用对应的简单类型接受即可。&lt;/p&gt;
&lt;h2 id=&#34;返回多个&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回多个&#34;&gt;#&lt;/a&gt; 返回多个&lt;/h2&gt;
&lt;h3 id=&#34;返回多个对象实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回多个对象实例&#34;&gt;#&lt;/a&gt; 返回多个对象实例&lt;/h3&gt;
&lt;h4 id=&#34;返回实体类-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回实体类-2&#34;&gt;#&lt;/a&gt; 返回实体类&lt;/h4&gt;
&lt;p&gt;返回的结果集有多个。用 &lt;code&gt;List&amp;lt;eneity&amp;gt;&lt;/code&gt;  接受。在映射块中表明 &lt;code&gt;resultType&lt;/code&gt;  的类型， &lt;code&gt;Mybatis&lt;/code&gt;  将自动进行结果集映射。同样的，此方法也可以接受返回单个结果集的结果&lt;/p&gt;
&lt;h4 id=&#34;返回没有适合的实体类的结果集-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回没有适合的实体类的结果集-2&#34;&gt;#&lt;/a&gt; 返回没有适合的实体类的结果集&lt;/h4&gt;
&lt;p&gt;返回的结果集没有适合的实体类接受，则可以使用 &lt;code&gt;List&amp;lt;map&amp;lt;String, Object&amp;gt;&amp;gt;&lt;/code&gt;  进行接受，同时指定 &lt;code&gt;resultType&lt;/code&gt;  为 &lt;code&gt;map&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;返回多个简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#返回多个简单类型&#34;&gt;#&lt;/a&gt; 返回多个简单类型&lt;/h3&gt;
&lt;p&gt;用对应的简单类型 &lt;code&gt;List&lt;/code&gt;  集合接受即可。&lt;/p&gt;
&lt;h2 id=&#34;大map&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#大map&#34;&gt;#&lt;/a&gt; 大 map&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;map&amp;lt;key, map&amp;lt;String, Object&amp;gt;&amp;gt;&lt;/code&gt;  的方式进行映射。区别于简单的 &lt;code&gt;map&lt;/code&gt;  集合映射，该方法支持通过主键的方式引用结果集。&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;key&lt;/code&gt;  是主键的类型， &lt;code&gt;map&amp;lt;String, Object&amp;gt;&lt;/code&gt;  是主键对应的 &lt;code&gt;map&lt;/code&gt;  集合。作为 &lt;code&gt;key&lt;/code&gt;  的字段需通过 &lt;code&gt;@MapKey(&amp;quot;&amp;quot;)&lt;/code&gt;  进行声明。同样的指定 &lt;code&gt;resultType&lt;/code&gt;  为 &lt;code&gt;map&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;resultmap&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#resultmap&#34;&gt;#&lt;/a&gt; resultMap&lt;/h2&gt;
&lt;p&gt;自定义结果集映射。&lt;/p&gt;
&lt;p&gt;查询结果集的字段和实体类对不上的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;as&lt;/code&gt;  起别名&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用 &lt;code&gt;resultMap&lt;/code&gt; &lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用下划线驼峰映射&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下形式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--id为resultMap的唯一标识，type为映射的实体类--&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--property为实体类的属性名，column为字段名--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--id标签为主键的映射，不是必须的，但配上会让Mybatis提高效率--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--result标签为主键的映射--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--resultMap为上面定义的resultMap的id--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;动态sql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态sql&#34;&gt;#&lt;/a&gt; 动态 SQL&lt;/h1&gt;
&lt;h2 id=&#34;if标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#if标签&#34;&gt;#&lt;/a&gt; if 标签&lt;/h2&gt;
&lt;p&gt;相当于 if 语句，条件成立则执行，如下形式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;xx != null and xx != &amp;#x27;&amp;#x27;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--test中写判断条件--&amp;gt;&lt;/span&gt;&lt;br&gt;	...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;  标签中 &lt;code&gt;test&lt;/code&gt;  属性是必须的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;  标签中 &lt;code&gt;test&lt;/code&gt;  属性的值是 &lt;code&gt;false&lt;/code&gt;  或者 &lt;code&gt;true&lt;/code&gt; 。 如果 &lt;code&gt;test&lt;/code&gt;  是 &lt;code&gt;true&lt;/code&gt; ，则 &lt;code&gt;if&lt;/code&gt;  标签中的 &lt;code&gt;sql&lt;/code&gt;  语句就会拼接。反之，则不会拼接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;  属性中可以使用的是:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;当使用了 &lt;code&gt;@Param&lt;/code&gt;  主解，那么 &lt;code&gt;test&lt;/code&gt;  中要出现的是 &lt;code&gt;Param&lt;/code&gt;  注解指定的参数名。 &lt;code&gt;@Param(&amp;quot;brand&amp;quot;)&lt;/code&gt; ，那么这里只能使用 &lt;code&gt;brand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;当没有使用 &lt;code&gt;@Param&lt;/code&gt;  注解，那么 &lt;code&gt;test&lt;/code&gt;  中要出现的是:  &lt;code&gt;param1&lt;/code&gt;   &lt;code&gt;param2&lt;/code&gt;   &lt;code&gt;param3&lt;/code&gt; …  &lt;code&gt;arg0&lt;/code&gt;   &lt;code&gt;arg1``arg2&lt;/code&gt; …&lt;/li&gt;
&lt;li&gt;当使用了实体类，那么 test 中出现的是实体类的属性名。&lt;/li&gt;
&lt;li&gt;在 mybatis 的动态 SQL 当中，不能使用 &amp;amp;&amp;amp;，只能使用 and&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当出现多个 &lt;code&gt;if&lt;/code&gt;  时，可能会出现 &lt;code&gt;and&lt;/code&gt;  多了或者少了的语法错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;where标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#where标签&#34;&gt;#&lt;/a&gt; where 标签&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;where&lt;/code&gt;  标签的作用：让 where 子句更加动态智能，且会动态添加 &lt;code&gt;where&lt;/code&gt;  关键字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有条件都为空时， &lt;code&gt;where&lt;/code&gt;  标签保证不会生成 &lt;code&gt;where&lt;/code&gt;  子句&lt;/li&gt;
&lt;li&gt;自动去除某些条件 **&lt;mark&gt; 前面&lt;/mark&gt; ** 多余的 &lt;code&gt;and&lt;/code&gt;  或 &lt;code&gt;or&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;trim标签&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#trim标签&#34;&gt;#&lt;/a&gt; trim 标签&lt;/h2&gt;
&lt;p&gt;比 &lt;code&gt;where&lt;/code&gt;  更加智能，包含 4 个属性，如下形式&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;trim&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;prefix&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;subfix&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;prefixOverrides&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;subfixOverrides&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		prefix：在trim标签前动态添加前缀，所有条件都为空，则不会添加。prefix=&amp;quot;where&amp;quot;，在整个标签前动态添加where&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		subfix：添加后缀&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		prefixOverrides：删除前缀&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		subfixOverrides：删除trim标签的后缀。subfixOverrides=&amp;quot;and|or&amp;quot; |代表或者，在trim标签的末尾删除and或者or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;	...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;trim&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;set&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set&#34;&gt;#&lt;/a&gt; set&lt;/h2&gt;
&lt;p&gt;主要使用在 &lt;code&gt;update&lt;/code&gt;  语句当中，用来同态生成 &lt;code&gt;set&lt;/code&gt;  关键字，同时去掉最后多余的逗号。比如我们只更新提交的不为空的字段，如果提交的数据是空或者 &lt;code&gt;””&lt;/code&gt; ，那么这个字段我们将不更新。&lt;/p&gt;
&lt;p&gt;如下形式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;update xxx &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;if&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    ...&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;choose-when-otherwise&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#choose-when-otherwise&#34;&gt;#&lt;/a&gt; choose、when、otherwise&lt;/h2&gt;
&lt;p&gt;相当于 &lt;code&gt;switch-case-default&lt;/code&gt;  的选择流程控制。形式如下&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;choose&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;when&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;when&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;test&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;when&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    ...&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;otherwise&lt;/span&gt;&amp;gt;&lt;/span&gt;...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;otherwise&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;choose&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;foreach&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#foreach&#34;&gt;#&lt;/a&gt; foreach&lt;/h2&gt;
&lt;p&gt;相当于 &lt;code&gt;java&lt;/code&gt;  的 &lt;code&gt;foreach&lt;/code&gt;  循环，形式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;collection&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;item&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;separator&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;open&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;close&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		collection: 指定数组或者集合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		item：代表数组或集合中的元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		separator：分割符。每次循环之间的分隔符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		open：foreach拼接的sql语句以什么开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		close：foreach拼接的sql语句以什么结束&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;	...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;foreach&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;sql-include&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql-include&#34;&gt;#&lt;/a&gt; sql、include&lt;/h2&gt;
&lt;p&gt;形式如下：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--声明sql片段--&amp;gt;&lt;/span&gt;&lt;br&gt;	...&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--写sql分句--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;sql&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;refid&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;include&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入sql片段--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;高级映射&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#高级映射&#34;&gt;#&lt;/a&gt; 高级映射&lt;/h1&gt;
&lt;p&gt;通过 &lt;code&gt;resultMap&lt;/code&gt;  能支持多表之间的联表查询，下面介绍一对一、一对多、多对多的关系&lt;/p&gt;
&lt;h2 id=&#34;一对一&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一对一&#34;&gt;#&lt;/a&gt; 一对一&lt;/h2&gt;
&lt;p&gt;以国家表和首都表为例：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_country(&lt;br&gt;    id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key auto_increment,&lt;br&gt;    country_name &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;),&lt;br&gt;    capital_id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt;&lt;br&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_capital(&lt;br&gt;    id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key auto_increment,&lt;br&gt;    capital_name &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;),&lt;br&gt;    population &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;)&lt;br&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;一个国家对应一个首都&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实体类如下设计：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ToString&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Country&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//国家&lt;/span&gt;&lt;br&gt;    Long id;&lt;br&gt;    String countryName;&lt;br&gt;    Capital capital;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ToString&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Capital&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//首都&lt;/span&gt;&lt;br&gt;    Long id;&lt;br&gt;    String capitalName;&lt;br&gt;    String population;&lt;br&gt;    Country country;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查询一个国家及其首都&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询一个国家及其首都&#34;&gt;#&lt;/a&gt; 查询一个国家及其首都&lt;/h3&gt;
&lt;p&gt;以国家表为主表，首都标为副表。&lt;/p&gt;
&lt;h4 id=&#34;级联查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#级联查询&#34;&gt;#&lt;/a&gt; 级联查询&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryCascade&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital.id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;country_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital.capitalName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital.population&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;population&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCountryCascade&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryCascade&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from  t_country join t_capital on t_country.capital_id = t_capital.id where t_country.id = #&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;association&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#association&#34;&gt;#&lt;/a&gt; association&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryAssociation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;country_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;association&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;javaType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capitalName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;population&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;population&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;association&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCountryAssociation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryAssociation&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from  t_country join t_capital on t_country.capital_id = t_capital.id where t_country.id = #&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;分步查询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分步查询&#34;&gt;#&lt;/a&gt; 分步查询&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryStep&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;country&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;country_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;association&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;select&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.advanced.mapper.CapitalMapper.getCapital&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;javaType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCountryStep&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;countryStep&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_country where id=#&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--CapitalMapper.xml--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;namespace&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.advanced.mapper.CapitalMapper&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCapitalStep&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;capital&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        select * from t_capital where id=#&amp;#123;id&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;优点：降低联表时的性能损耗；支持懒加载&lt;/p&gt;
&lt;h3 id=&#34;查询一个首都及其所属国家&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询一个首都及其所属国家&#34;&gt;#&lt;/a&gt; 查询一个首都及其所属国家&lt;/h3&gt;
&lt;p&gt;以首都表为主表，国家表为从表。其余与&lt;strong&gt;查询一个国家及其首都&lt;/strong&gt;一样。&lt;/p&gt;
&lt;h2 id=&#34;一对多&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一对多&#34;&gt;#&lt;/a&gt; 一对多&lt;/h2&gt;
&lt;p&gt;以学生表和班级表为例：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_clazz&lt;br&gt;(&lt;br&gt;    c_id   &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; auto_increment &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key,&lt;br&gt;    c_name &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;) &lt;span class=&#34;hljs-keyword&#34;&gt;null&lt;/span&gt;&lt;br&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_student&lt;br&gt;(&lt;br&gt;    s_id     &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; auto_increment &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key,&lt;br&gt;    s_name   text,&lt;br&gt;    c_id   &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt;,&lt;br&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;一个班级包含多个学生。一个学生属于一个班级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;则实体类应该设计如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ToString&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Clazz&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//班级&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; cId;&lt;br&gt;    String cName;&lt;br&gt;    List&amp;lt;Student&amp;gt; students; &lt;span class=&#34;hljs-comment&#34;&gt;//多个学生&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ToString&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Student&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//学生&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; sId;&lt;br&gt;    String sName;&lt;br&gt;    Clazz clazz; &lt;span class=&#34;hljs-comment&#34;&gt;//从属一个班级&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查询一个班级及其包含的学生&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询一个班级及其包含的学生&#34;&gt;#&lt;/a&gt; 查询一个班级及其包含的学生&lt;/h3&gt;
&lt;h4 id=&#34;collection&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#collection&#34;&gt;#&lt;/a&gt; collection&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazzCollection&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Clazz&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;collection&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;students&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ofType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;collection&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getClazzCollection&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazzCollection&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_clazz natural join t_student where t_clazz.c_id = #&amp;#123;id&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;分步查询-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分步查询-2&#34;&gt;#&lt;/a&gt; 分步查询&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazzStep&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Clazz&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;collection&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;students&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ofType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;select&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.advanced.mapper.StudentMapper.getClazzStepTwo&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getClazzStepOne&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazzStep&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_clazz where t_clazz.c_id = #&amp;#123;id&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--StudentMapper.xml--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;namespace&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.advanced.mapper.StudentMapper&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getClazzStepTwo&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        select * from t_student where c_id=#&amp;#123;id&amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查询一个学生及其所属的班级&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询一个学生及其所属的班级&#34;&gt;#&lt;/a&gt; 查询一个学生及其所属的班级&lt;/h3&gt;
&lt;h4 id=&#34;级联查询-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#级联查询-2&#34;&gt;#&lt;/a&gt; 级联查询&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;studentCacade&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz.cName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz.cId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_id&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getStudentCascade&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;studentCacade&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_student natural join t_clazz where s_id=#&amp;#123;id&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;association-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#association-2&#34;&gt;#&lt;/a&gt; association&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;studentAssociation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;association&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;javaType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_name&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_id&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;association&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getStudentAssociation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;studentAssociation&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_student natural join t_clazz where s_id=#&amp;#123;id&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;分步查询-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分步查询-3&#34;&gt;#&lt;/a&gt; 分步查询&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;studentStep&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;s_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;association&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;select&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.advanced.mapper.ClazzMapper.getStudentStepTwo&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getStudentStepOne&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;studentStep&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_student where s_id=#&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--ClazzMapper.xml--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;namespace&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.advanced.mapper.ClazzMapper&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getClazzStepOne&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazzStep&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        select * from t_clazz where t_clazz.c_id = #&amp;#123;id&amp;#125;;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;mapper&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;多对多&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#多对多&#34;&gt;#&lt;/a&gt; 多对多&lt;/h2&gt;
&lt;p&gt;以用户表、文章表，评论表为例：&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_user( &lt;br&gt;    u_id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key auto_increment,&lt;br&gt;    user_name &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;)&lt;br&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_paper(&lt;br&gt;    p_id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key auto_increment,&lt;br&gt;    paper_name &lt;span class=&#34;hljs-type&#34;&gt;varchar&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;255&lt;/span&gt;)&lt;br&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;table&lt;/span&gt; if &lt;span class=&#34;hljs-keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;exists&lt;/span&gt; t_review( &lt;span class=&#34;hljs-comment&#34;&gt;-- 多对多关系的中间表&lt;/span&gt;&lt;br&gt;    id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;primary&lt;/span&gt; key auto_increment,&lt;br&gt;    rev_content text,&lt;br&gt;    user_id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt;,&lt;br&gt;    paper_id &lt;span class=&#34;hljs-type&#34;&gt;bigint&lt;/span&gt;&lt;br&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;一个用户能评论多个文章，一个文章能被多个用户评论。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实体类如下设计：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Paper&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//文章&lt;/span&gt;&lt;br&gt;    Long id;&lt;br&gt;    String paperName;&lt;br&gt;    List&amp;lt;Review&amp;gt; reviews;&lt;br&gt;    List&amp;lt;User&amp;gt; users;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//用户&lt;/span&gt;&lt;br&gt;    Long id;&lt;br&gt;    String userName;&lt;br&gt;    List&amp;lt;Review&amp;gt; reviews;&lt;br&gt;    List&amp;lt;Paper&amp;gt; papers;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Review&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//评论&lt;/span&gt;&lt;br&gt;    Long id;&lt;br&gt;    Long userId;&lt;br&gt;    Long paperId;&lt;br&gt;    String revContent;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查询用户及其所评论的文章和评论内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询用户及其所评论的文章和评论内容&#34;&gt;#&lt;/a&gt; 查询用户及其所评论的文章和评论内容&lt;/h3&gt;
&lt;h4 id=&#34;collection-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#collection-2&#34;&gt;#&lt;/a&gt; collection&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userCollection&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;u_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;collection&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;papers&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ofType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;paper&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;paperName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;paper_name&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;collection&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;reviews&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ofType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;review&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;paperId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;paper_id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;revContent&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;rev_content&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;property&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userId&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;column&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;collection&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;collection&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;resultMap&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getUserReview&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultMap&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userCollection&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_user join t_review join t_paper on u_id=t_review.user_id and t_review.paper_id = p_id where user_id = #&amp;#123;id&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;查询文章及其评论的用户的和评论内容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查询文章及其评论的用户的和评论内容&#34;&gt;#&lt;/a&gt; 查询文章及其评论的用户的和评论内容&lt;/h3&gt;
&lt;p&gt;以文章表为主表，用户表为从表。其余与&lt;strong&gt;查询用户及其所评论的文章和评论内容&lt;/strong&gt;一样。&lt;/p&gt;
&lt;h1 id=&#34;缓存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缓存&#34;&gt;#&lt;/a&gt; 缓存&lt;/h1&gt;
&lt;h2 id=&#34;一级缓存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一级缓存&#34;&gt;#&lt;/a&gt; 一级缓存&lt;/h2&gt;
&lt;p&gt;由 &lt;code&gt;SqlSession&lt;/code&gt;  提供，默认设置，不用自主开启。同一个 &lt;code&gt;SqlSession&lt;/code&gt;  实例和同一个 &lt;code&gt;sql&lt;/code&gt;  语句。就会使用缓存。&lt;/p&gt;
&lt;p&gt;第一次 &lt;code&gt;DQL&lt;/code&gt;  和第二次 &lt;code&gt;DQL&lt;/code&gt;  之间你做了以下两件事中的任意一件，都会让一级缓存清空:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行了 &lt;code&gt;sqlSession的clearCache()&lt;/code&gt;  方法，这是手动清空缓存。&lt;/li&gt;
&lt;li&gt;执行了 &lt;code&gt;INSERT&lt;/code&gt;  或 &lt;code&gt;DELETE&lt;/code&gt;  或 &lt;code&gt;UPDATE&lt;/code&gt;  语句。不管你是操作哪张表的，都会清空一级缓存。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;二级缓存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#二级缓存&#34;&gt;#&lt;/a&gt; 二级缓存&lt;/h2&gt;
&lt;p&gt;由 &lt;code&gt;SqlsessionFactory&lt;/code&gt;  提供。&lt;/p&gt;
&lt;p&gt;使用二级缓存需要具备以下几个条件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;setting name=&amp;quot;cacheEnabled&amp;quot;value=&amp;quot;true&amp;quot;&amp;gt;&lt;/code&gt;  全局性地开启或关闭所有映射器配置文件中已配置的任缓存。默认就是 true, 无需设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在需要使用二级缓存的 &lt;code&gt;SglMapperxml&lt;/code&gt;  文件中添加配置:  &lt;code&gt;&amp;lt;cache /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用二级缓存的卖体类对象必须是可序列化的，也就是必须实现 &lt;code&gt;java.io.Serializable&lt;/code&gt;  接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SqlSession&lt;/code&gt;  对象关闭或提交之后，一级缓存中的数据才会被写入到二级缓存当中。此时二级缓存才可用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;逆向工程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#逆向工程&#34;&gt;#&lt;/a&gt; 逆向工程&lt;/h1&gt;
&lt;h1 id=&#34;pagehelper&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pagehelper&#34;&gt;#&lt;/a&gt; PageHelper&lt;/h1&gt;
&lt;p&gt;第三方提供的分页插件，依赖如下：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.github.pagehelper&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;pagehelper&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;x.x.x&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用如下，首先前往 &lt;code&gt;Mybatis&lt;/code&gt;  的核心配置文件，配置如下内容，注册拦截器：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;plugin&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;interceptor&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.github.pagehelper.PageInterceptor&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;plugins&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其次编写抽象方法和查询的 &lt;code&gt;sql&lt;/code&gt;  语句：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getCars&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;resultType&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;car&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    select * from t_car &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--注意此处不要用limit，也不要用分号结尾--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后编写代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;PageHelper.startPage(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//开启PageHelper的功能，1为开始的页数，5为本页的数据个数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;SqlSession&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sqlSession&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; SqlSessionUtil.getSqlSession();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CarMapper&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;carMapper&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; sqlSession.getMapper(CarMapper.class);&lt;br&gt;List&amp;lt;Car&amp;gt; cars = Car.getCars();&lt;br&gt;PageInfo&amp;lt;Car&amp;gt; pageInfo = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PageInfo&lt;/span&gt;&amp;lt;&amp;gt;(cars); &lt;span class=&#34;hljs-comment&#34;&gt;//分页数据就保存在PageInfo对象中，其中PgeInfo的泛型用于声明保存的是何种对象&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;注解式开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解式开发&#34;&gt;#&lt;/a&gt; 注解式开发&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Mybatis&lt;/code&gt;  提供了通过注解的方式开发，但对于复杂的 &lt;code&gt;sql&lt;/code&gt;  语句， &lt;code&gt;Mybatis&lt;/code&gt;  建议任然用 &lt;code&gt;xml&lt;/code&gt;  进行开发，下面介绍简单的用法。&lt;/p&gt;
&lt;h2 id=&#34;insert&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#insert&#34;&gt;#&lt;/a&gt; @Insert&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;insert&lt;/code&gt;  语句的注解表示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Insert(&amp;quot;insert into t_car values(null,#&amp;#123;carNum&amp;#125;,#&amp;#123;brand&amp;#125;,#&amp;#123;guidePrice&amp;#125;,#&amp;#123;produceTime&amp;#125;,#&amp;#123;carType&amp;#125;)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;IndsertCar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Car car)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;delete&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#delete&#34;&gt;#&lt;/a&gt; @Delete&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;delete&lt;/code&gt;  语句的注解表示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Delete(&amp;quot;delete from t_car where id=#&amp;#123;id&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;delCar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Param(&amp;quot;id&amp;quot;)&lt;/span&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;udate&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#udate&#34;&gt;#&lt;/a&gt; @Udate&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;update&lt;/code&gt;  语句的注解表示&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Update(&amp;quot;update t_car set car_num=#&amp;#123;carNum&amp;#125;,brand=#&amp;#123;brand&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;updateCar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Car car)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;select&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#select&#34;&gt;#&lt;/a&gt; @Select&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;select&lt;/code&gt;  语句的注解表示&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Select(&amp;quot;select * from t_car where id=#&amp;#123;id&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;Car &lt;span class=&#34;hljs-title function_&#34;&gt;getCar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Param(&amp;quot;id&amp;quot;)&lt;/span&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;results&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#results&#34;&gt;#&lt;/a&gt; @Results&lt;/h3&gt;
&lt;p&gt;自定义映射。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Select(&amp;quot;select * from t_car where id=#&amp;#123;id&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Results(value =&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    		@Result(property = &amp;quot;carNum&amp;quot;, column = &amp;quot;car_num&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        	@Result(property = &amp;quot;guidePrice&amp;quot;, column = &amp;quot;guide_price&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;)&lt;/span&gt;&lt;br&gt;Car &lt;span class=&#34;hljs-title function_&#34;&gt;getCar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Param(&amp;quot;id&amp;quot;)&lt;/span&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; id)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://blog.riversea.top/2024/01/23/nginx/</guid>
            <title>Nginx</title>
            <link>https://blog.riversea.top/2024/01/23/nginx/</link>
            <category>Nginx</category>
            <pubDate>Tue, 23 Jan 2024 22:08:01 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;blockquote&gt;
&lt;p&gt;使用平台: CentOS7&lt;/p&gt;
&lt;p&gt;使用工具: VmWare17、xftp7、OpenSSH_for_Windows_8.1&lt;/p&gt;
&lt;/blockquote&gt;
 &lt;img src=&#34;nginx.png&#34;/&gt;
&lt;h1 id=&#34;centos配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#centos配置&#34;&gt;#&lt;/a&gt; CentOS 配置&lt;/h1&gt;
&lt;h2 id=&#34;静态ip&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态ip&#34;&gt;#&lt;/a&gt; 静态 IP&lt;/h2&gt;
&lt;h3 id=&#34;vware配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#vware配置&#34;&gt;#&lt;/a&gt; VWare 配置&lt;/h3&gt;
&lt;p&gt;进入 Vmware，在最上方标签栏中找到 &lt;strong&gt;编辑 -&amp;gt; 虚拟网络编辑器&lt;/strong&gt;，进入网卡配置界面，如下图：&lt;/p&gt;
&lt;img src=&#34;IP1.png&#34; /&gt;
&lt;p&gt;点击更改设置标签，如下图：&lt;/p&gt;
&lt;img src=&#34;IP2.png&#34; style=&#34;zoom: 67%;&#34; /&gt;
&lt;p&gt;首先选择 VMnet8 网卡，再点击&lt;strong&gt;下方 NAT 设置&lt;/strong&gt;，如下图：&lt;/p&gt;
&lt;img src=&#34;IP3.png&#34; style=&#34;zoom:67%;&#34; /&gt;
&lt;p&gt;记住弹出对话框中的子网 IP、子网掩码、网关。随后启动虚拟机&lt;/p&gt;
&lt;h3 id=&#34;虚拟机设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚拟机设置&#34;&gt;#&lt;/a&gt; 虚拟机设置&lt;/h3&gt;
&lt;p&gt;使用命令  &lt;code&gt;vi /etc/sysconfig/network-scripts/ifcfg-ens33&lt;/code&gt;  编辑 &lt;code&gt;ens33&lt;/code&gt;  网卡设置文件：&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs properties&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;TYPE&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;Ethernet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;PROXY_METHOD&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;none&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;BROWSER_ONLY&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;no&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;BOOTPROTO&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;static #设置为静态IP，而不是dhcp动态分配&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;DEFROUTE&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;IPV4_FAILURE_FATAL&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;no&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;IPV6INIT&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;IPV6_AUTOCONF&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;IPV6_DEFROUTE&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;IPV6_FAILURE_FATAL&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;no&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;IPV6_ADDR_GEN_MODE&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;stable-privacy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;NAME&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;ens33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;UUID&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;4565018e-6a54-4ffa-8ce2-802e725e46be&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;DEVICE&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;ens33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;ONBOOT&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;yes #系统启动时，是否启动该网卡&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;IPADDR&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;192.168.9.3 #IP地址，注意该地址必须为子网IP范围中的地址，即0~255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;GATEWAY&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;192.168.9.2 #网关，VmWare中设置的网关&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;NETMASK&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;255.255.255.0 #子网掩码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;DNS1&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;8.8.8.8 #公网DNS服务器，可以配置多个，以DNS1，DNS2....排列&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编辑完成后，使用 &lt;code&gt;:&lt;/code&gt;  +  &lt;code&gt;wq&lt;/code&gt;  +  &lt;code&gt;回车&lt;/code&gt; 保存并退出。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;systemctl restart network&lt;/code&gt;  重启网络。&lt;/p&gt;
&lt;p&gt;尝试使用 &lt;code&gt;ping&lt;/code&gt;  或者  &lt;code&gt;curl&lt;/code&gt;  命令来判断配置是否成功，例如：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;ping www.baidu.com&lt;br&gt;curl www.baidu.com&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;若使用 &lt;code&gt;ping&lt;/code&gt;  命令，出现下图，则代表网络畅通，配置成功：&lt;/p&gt;
&lt;img src=&#34;IP4.png&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;注意：linux 的 ping 命令没有次数限制，需要使用 ctrl+c 来进行强制停止&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;若使用 &lt;code&gt;curl&lt;/code&gt;  命令，出现下图，则代表网络畅通，配置成功：&lt;/p&gt;
&lt;img src=&#34;IP4_1.png&#34; /&gt;
&lt;h3 id=&#34;配置yum镜像源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置yum镜像源&#34;&gt;#&lt;/a&gt; 配置 yum 镜像源&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;本文使用的是阿里云 yum 镜像源&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先使用 &lt;code&gt;yum&lt;/code&gt;  命令下载 &lt;code&gt;wget&lt;/code&gt;  工具：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;yum install wget -y #y参数代表，询问用户是否同意时，一律选择同意&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接着前往 &lt;code&gt;/etc/yum.repos.d&lt;/code&gt; ，备份所有仓库文件：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;cd /etc/yum.repos.d&lt;br&gt;mkdir backup #备份文件夹&lt;br&gt;mv *.repo backup&lt;br&gt;mv epel*.repo backup #若有epel仓库文件&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后拉取阿里云 yum 源镜像仓库：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;wget http://mirrors.aliyun.com/repo/Centos-7.repo&lt;br&gt;wget /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo #epel为为“红帽系”的操作系统提供额外的软件包&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;更新yum源&lt;/span&gt;&lt;br&gt;yum clean all&lt;br&gt;yum makecache&lt;br&gt;yum update&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;nginx学习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginx学习&#34;&gt;#&lt;/a&gt; Nginx 学习&lt;/h1&gt;
&lt;h2 id=&#34;编译安装nginx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编译安装nginx&#34;&gt;#&lt;/a&gt; 编译安装 Nginx&lt;/h2&gt;
&lt;p&gt;前往官网下载 Nginx，&lt;a href=&#34;https://nginx.org/en/download.html&#34; title=&#34;下载Nginx&#34;&gt;Nginx 官网 ---- 下载&lt;/a&gt;，选择适合 Linux 操作系统平台的版本，点击下载，如下图：&lt;/p&gt;
&lt;img src=&#34;download.png&#34; /&gt;
&lt;p&gt;通过 &lt;code&gt;ftp&lt;/code&gt;  工具，将该文件上传至虚拟机中。&lt;/p&gt;
&lt;p&gt;首先将压缩包放在一边。编译安装 nginx 需要一些前置的环境：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;yum install gcc-c++ -y #g++编译器，编译c++&lt;br&gt;yum install pcre pcre-devel -y #Nginx的Rewrite模块和HTTP核心模块会使用到的PCRE正则表达式语法库&lt;br&gt;yum install zlib zlib-devel -y #zlib库提供了开发人员的压缩算法，在Nginx的各种模块中需要使用gzip压缩&lt;br&gt;yum install openssl openssl-devel -y #若要使用https，则需要安装 OpenSSL 库&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前置环境配置完成后，解压 Nginx 压缩包&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;tar -xzvf nginx-1.24.0.tar.gz&lt;br&gt;cd nginx-1.24.0&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解压缩后的文件目录如下图：&lt;/p&gt;
&lt;img src=&#34;nginx_compile_dir.png&#34; /&gt;
&lt;p&gt;其中 configure 即为我们需要的编译文件，执行以下命令进行编译：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;./configure --prefix=/usr/local/nginx  --with-http_ssl_module #运行configure脚本&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;prefix即为安装后的路径，源文件一般放在usr/local路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;--with-http_ssl_module，集成https模块&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解压成功后，会自动在当前目录生成 Makefile 文件：&lt;/p&gt;
&lt;img src=&#34;nginx_configure_down.png&#34; /&gt;
&lt;p&gt;随后执行如下命令进行编译安装：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;make &amp;amp;&amp;amp; make install&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;出现下图即代表安装完成：&lt;/p&gt;
&lt;img src=&#34;nginx_compile_install.png&#34; /&gt;
&lt;p&gt;随后即可以前往之前设定的目录 &lt;code&gt;/usr/local/nginx&lt;/code&gt;  查看安装完成的 Nginx。&lt;/p&gt;
&lt;h2 id=&#34;nginx目录&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginx目录&#34;&gt;#&lt;/a&gt; Nginx 目录&lt;/h2&gt;
&lt;p&gt;Nginx 的目录如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;nginx&lt;br&gt;├── client_body_temp&lt;br&gt;├── conf #配置文件目录&lt;br&gt;│   ├── fastcgi.conf&lt;br&gt;│   ├── fastcgi.conf.default&lt;br&gt;│   ├── fastcgi_params&lt;br&gt;│   ├── fastcgi_params.default&lt;br&gt;│   ├── koi-utf&lt;br&gt;│   ├── koi-win&lt;br&gt;│   ├── mime.types&lt;br&gt;│   ├── mime.types.default&lt;br&gt;│   ├── nginx.conf #nginx的主配置文件，可在nginx.conf通过include包含其他配置文件&lt;br&gt;│   ├── nginx.conf.default&lt;br&gt;│   ├── scgi_params&lt;br&gt;│   ├── scgi_params.default&lt;br&gt;│   ├── uwsgi_params&lt;br&gt;│   ├── uwsgi_params.default&lt;br&gt;│   └── win-utf&lt;br&gt;├── fastcgi_temp&lt;br&gt;├── html #静态页面目录&lt;br&gt;│   ├── 50x.html&lt;br&gt;│   └── index.html&lt;br&gt;├── logs #日志文件目录&lt;br&gt;│   ├── access.log #成功日志文件&lt;br&gt;│   ├── error.log #错误日志文件&lt;br&gt;│   └── nginx.pid #nginx启动后会生成的文件，记录了nginx的PID号&lt;br&gt;├── proxy_temp&lt;br&gt;├── sbin #二进制文件目录&lt;br&gt;│   ├── nginx #控制nginx的二进制文件&lt;br&gt;│   └── nginx.old&lt;br&gt;├── scgi_temp&lt;br&gt;└── uwsgi_temp&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;nginx的常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginx的常用命令&#34;&gt;#&lt;/a&gt; Nginx 的常用命令&lt;/h2&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;./nginx start #启动Nginx&lt;br&gt;./nginx -s stop #暴力停止Nginx，不管是否还有任务&lt;br&gt;./nginx -s reload #重新加载配置文件，此时Nginx不在接受任何请求，直到配置文件重新加载完毕。&lt;br&gt;./nginx -s quit #优雅退出Nginx，此时Nginx不在接受任何请求，将未完成的任务完成后即退出&lt;br&gt;./nginx -s reopen #重新打开的日志文件和监听套接字&lt;br&gt;./nginx -t #测试配置文件是否配置正确&lt;br&gt;./nginx -h|? #查看帮助文档&lt;br&gt;./nginx -v #查看当前Nginx版本&lt;br&gt;./nginx -V #查看当前Nginx版本，执行configure时的配置&lt;br&gt;  -t            : test configuration and exit&lt;br&gt;  -T            : test configuration， dump it and exit&lt;br&gt;  -q            : suppress non-error messages during configuration testing&lt;br&gt;  -s signal     : send signal to a master process: stop， quit， reopen， reload&lt;br&gt;  -p prefix     : set prefix path (default: /usr/local/)&lt;br&gt;  -e filename   : set error log file (default: logs/error.log)&lt;br&gt;  -c filename   : set configuration file (default: conf/nginx.conf)&lt;br&gt;  -g directives : set global directives out of configuration file&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;-s参数为向Master进程发送signal。 什么是master进程，后面再详解&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;尝试启动nginx服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#尝试启动nginx服务&#34;&gt;#&lt;/a&gt; 尝试启动 Nginx 服务&lt;/h2&gt;
&lt;p&gt;执行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;./nginx start&lt;br&gt;firewall-cmd --zone=public --add-port=80/tcp --permanent #开启80端口，Nginx默认监听80端口&lt;br&gt;systemctl restart firewalld #重启防火墙&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后前往浏览器访问 &lt;code&gt;&amp;lt;你的虚拟机IP&amp;gt;:80&lt;/code&gt;  或者在虚拟机中输入 &lt;code&gt;curl localhost:80&lt;/code&gt; ，出现如下所示图片，即代表启动成功：&lt;/p&gt;
&lt;img src=&#34;nginx_start_url.png&#34; /&gt;
&lt;img src=&#34;nginx_start_curl.png&#34; /&gt;
&lt;h2 id=&#34;配置nginx为系统服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置nginx为系统服务&#34;&gt;#&lt;/a&gt; 配置 Nginx 为系统服务&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;vi&lt;/code&gt;  命令编辑，位于 &lt;code&gt;/lib/systemd/system&lt;/code&gt;  的  &lt;code&gt;nginx.service&lt;/code&gt;  文件：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;vi /lib/systemd/system/nginx.service&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入以下内容：&lt;/p&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs properties&#34;&gt;&lt;span class=&#34;hljs-attr&#34;&gt;[Unit]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;Description&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;nginx - high performance web server #该服务的描述&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;After&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;network.target remote-fs.target nss-lookup.target #在什么服务之后执行&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;[Service]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;Type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;simple #启动方式，告诉Systemd什么时候服务启动完成&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;PIDFile&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;/usr/local/logs/nginx.pid #PID文件路径&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;ExecStartPre&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;/usr/local/sbin/nginx -t -c /usr/local/conf/nginx.conf #start前执行什么&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;ExecStart&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;/usr/local/sbin/nginx -c /usr/local/conf/nginx.conf #start执行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;ExecReload&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;/usr/local/sbin/nginx -s reload  #reload执行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;ExecQuit&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;/usr/local/sbin/nginx -s quit #quit执行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;ExecStop&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;/usr/local/sbin/nginx -s stop #stop执行命令&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;PrivateTmp&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;true&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;[Install]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attr&#34;&gt;WantedBy&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;multi-user.target&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编辑完成后，保存退出，重启 Systemd。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;systemctl daemon-reload&lt;br&gt;systemctl enable nginx #设置ngixn为开机自启服务&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;通过sytemctl控制nginx&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过sytemctl控制nginx&#34;&gt;#&lt;/a&gt; 通过 sytemctl 控制 Nginx&lt;/h3&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;systemctl start|reload|stop|quit nginx #同nginx的内部命令&lt;br&gt;systemctl status nginx #查看nginx现在的状态&lt;br&gt;journalctl -xe #查看systemd的日志&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过 systemctl 启动 nginx，注意：启动前请停止之前启动过的 nginx。随后查看 nginx 的状态，如下图所示则启动成功。&lt;/p&gt;
&lt;img src=&#34;nginx_avtive.png&#34; /&gt;
&lt;p&gt;现在也可以在外部访问 nginx 服务器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Tip]&lt;/p&gt;
&lt;p&gt;若启动失败，尝试关闭 selinux。尝试运行命令： &lt;code&gt;setenforce 0&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;nginx的工作模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginx的工作模型&#34;&gt;#&lt;/a&gt; Nginx 的工作模型&lt;/h2&gt;
&lt;p&gt;如下图为 Nginx 的工作模型。启动 Nginx 后会启动两个进程：Master 和 Worker。Master 为主进程，用来管理 worker，Worker 是子进程，接受网络请求和响应。&lt;/p&gt;
&lt;p&gt;Master 启动时会读取配置文件并校验有无语法错误，随后开启子进程。&lt;/p&gt;
&lt;p&gt;当 Worker 收到请求后，会解析请求，读取配置文件进行路径映射，加载请求的资源。&lt;/p&gt;
&lt;img src=&#34;nginx_model.png&#34; /&gt;
&lt;h2 id=&#34;nginx配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginx配置&#34;&gt;#&lt;/a&gt; Nginx 配置&lt;/h2&gt;
&lt;h3 id=&#34;nginx的最小配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginx的最小配置文件&#34;&gt;#&lt;/a&gt; Nginx 的最小配置文件&lt;/h3&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;worker_processes&lt;/span&gt;  &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;#工作进程数，一般设置为核数或CPU数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;events&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;#事件驱动模块&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;worker_connections&lt;/span&gt;  &lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;#每个工作进程的连接数&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;http&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;include&lt;/span&gt;       mime.types; &lt;span class=&#34;hljs-comment&#34;&gt;#include将其他的配置文件引入，mine.types保存着请求头Accept和请求的资源后缀的映射&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;default_type&lt;/span&gt;  application/octet-stream; &lt;span class=&#34;hljs-comment&#34;&gt;#默认的请求头Accept&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;sendfile&lt;/span&gt;        &lt;span class=&#34;hljs-literal&#34;&gt;on&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;#数据零拷贝，见下图。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;keepalive_timeout&lt;/span&gt;  &lt;span class=&#34;hljs-number&#34;&gt;65&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;#长链接超时时间&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;#以下为虚拟主机vhost&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;server&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt;       &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;#监听端口&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt;  localhost; &lt;span class=&#34;hljs-comment&#34;&gt;#域名、主机名&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt;   html; &lt;span class=&#34;hljs-comment&#34;&gt;#设置主机站点的根目录地址&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt;  index.html index.htm;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;error_page&lt;/span&gt;   &lt;span class=&#34;hljs-number&#34;&gt;500&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;502&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;503&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;504&lt;/span&gt;  /50x.html; &lt;span class=&#34;hljs-comment&#34;&gt;# 服务器错误码为500 502 503 504，转到&amp;quot;域名/50x.html&amp;quot;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; = /50x.html &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;#指定到html文件夹下找/50x.htm&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt;   html;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;sendfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sendfile&#34;&gt;#&lt;/a&gt; sendfile&lt;/h4&gt;
&lt;p&gt;开启 sendfile。nginx 将会向网络接口发送信号，让其读取文件，直接发送。&lt;/p&gt;
&lt;img src=&#34;nginx_sendfile.png&#34;/&gt;
&lt;hr&gt;
&lt;p&gt;关闭 sendfile。nginx 将会自己&lt;strong&gt;读取&lt;/strong&gt;磁盘文件，加载到应用程序的内存中，然后将文件&lt;strong&gt;发送&lt;/strong&gt;给网络接口，网络接口将文件返回。此过程将会有内核态和用户态之间的转换，降低性能。&lt;/p&gt;
&lt;img src=&#34;nginx_unsendfile.png&#34;/&gt;
&lt;h3 id=&#34;权限控制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#权限控制&#34;&gt;#&lt;/a&gt; 权限控制&lt;/h3&gt;
&lt;p&gt;访问控制是网络安全防范和保护的主要策略，其任务是保证网络资源不被非法访问。 &lt;code&gt;Nginx&lt;/code&gt;  作为 &lt;code&gt;Web&lt;/code&gt;  服务器的后起之秀，也提供了访问控制的功能。它可以根据实际需求，对用户可以访问和禁止的目录进行限制。下面将对 &lt;code&gt;Nginx&lt;/code&gt;  提供的权限控制指令以及典型的应用进行详细讲解。&lt;/p&gt;
&lt;p&gt;Nginx 中提供了两个用于配置访问权限控制的指令，分别为 &lt;code&gt;allow&lt;/code&gt;  和 &lt;code&gt;deny&lt;/code&gt; 。从其名称就可以看出， &lt;code&gt;allow&lt;/code&gt;  用于设置允许访问的权限、 &lt;code&gt;deny&lt;/code&gt;  用于设置禁止访问的权限。在使用时，权限指令后只需跟上允许或禁止的 &lt;code&gt;IP&lt;/code&gt;  段或 &lt;code&gt;all&lt;/code&gt;  即可。其中， &lt;code&gt;all&lt;/code&gt;  表示所有的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;权限控制指令的使用虽然简单，但是在设置的过程中，还需要特别注意以下几个点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个 &lt;code&gt;IP&lt;/code&gt;  指定作用范围最小， &lt;code&gt;all &lt;/code&gt; 指定作用范围最大。&lt;/li&gt;
&lt;li&gt;同一块下，若同时存在多个权限指令 ( &lt;code&gt;deny&lt;/code&gt; 、 &lt;code&gt;allow&lt;/code&gt; )，则先出现的访问权限设置生效，并且会对后出现的设置进行覆盖，未覆盖的范围依然生效，否则以先出现的设置为准。&lt;/li&gt;
&lt;li&gt;当多个块 (如 &lt;code&gt;http&lt;/code&gt; 、 &lt;code&gt;server&lt;/code&gt; 、 &lt;code&gt;location&lt;/code&gt; ) 中都出现了权限设置指令，则内层块中的权限级别要比外层块中设置的权限级别高。&lt;/li&gt;
&lt;li&gt;默认访问权限为： &lt;code&gt;allow all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;拒绝或允许所有人&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拒绝或允许所有人&#34;&gt;#&lt;/a&gt; 拒绝或允许所有人&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;allow&lt;/span&gt; all &lt;span class=&#34;hljs-comment&#34;&gt;#所有人都可以访问，没有意义&lt;/span&gt;&lt;br&gt;deny all &lt;span class=&#34;hljs-comment&#34;&gt;#任何人都不能访问&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;注意， &lt;code&gt;deny all&lt;/code&gt;  将会把包括自己在内的访问者全部拒绝。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;允许指定用户访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#允许指定用户访问&#34;&gt;#&lt;/a&gt; 允许指定用户访问&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;allow&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.3&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;#允许192.168.78.128的IP访问&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; all;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;上述指令表示只允许 &lt;code&gt;192.168.9.3&lt;/code&gt;  客户端访问，其他所有客户端都不能访问。需要注意的是，若省略此处的 &lt;code&gt;deny all&lt;/code&gt; ，则会允许所有客户端访问；若将 &lt;code&gt;deny all&lt;/code&gt;  移动到 &lt;code&gt;allow 192.168.9.3&lt;/code&gt;  之后，则会阻止所有客户端访问。&lt;/p&gt;
&lt;p&gt;同一个块下的两个权限指令，先出现的设置会覆盖后出现的设置，使得 &lt;code&gt;allow 192.168.78.128&lt;/code&gt;  的配置优先生效；同时 &lt;code&gt;deny&lt;/code&gt;  指令设置的访问范围 &lt;code&gt;all&lt;/code&gt;  较大未被 &lt;code&gt;allow&lt;/code&gt;  覆盖的范围配置依然生效，达到除了 &lt;code&gt;IP&lt;/code&gt;  为 &lt;code&gt;192.168.78.128&lt;/code&gt;  的用户外，禁止其他用户对服务器访问的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;允许指定网段的用户访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#允许指定网段的用户访问&#34;&gt;#&lt;/a&gt; 允许指定网段的用户访问&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;allow&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.0&lt;/span&gt;/&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;#允许192.168.9.1到192.168.9.255的IP访问&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; all;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;拒绝指定用户访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拒绝指定用户访问&#34;&gt;#&lt;/a&gt; 拒绝指定用户访问&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.4&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#拒绝192.168.9.4的IP访问&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;拒绝指定网段用户访问&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#拒绝指定网段用户访问&#34;&gt;#&lt;/a&gt; 拒绝指定网段用户访问&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.0&lt;/span&gt;/&lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;#拒绝192.168.9.1到192.168.9.255的IP访问&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;location模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#location模块&#34;&gt;#&lt;/a&gt; location 模块&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;location&lt;/code&gt;  块用于匹配 &lt;code&gt;URI&lt;/code&gt; ，同时进行一些访问控制、权限控制、负载均衡、反向代理等功能。&lt;/p&gt;
&lt;h4 id=&#34;location的匹配语法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#location的匹配语法&#34;&gt;#&lt;/a&gt; location 的匹配语法&lt;/h4&gt;
&lt;p&gt;在此之前，首先要简单了解一下 location 的相关语法及规定，具体如下：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; [=|~|~*|^~] URI &amp;#123;...&amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;#语法类型1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;@name&lt;/span&gt; &amp;#123;...&amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;#语法类型2&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;在上述语法中 =、~、~*、^~ 和 @都是 &lt;code&gt;location&lt;/code&gt;  用于实现访问控制的前缀，且在使用时只能选择一种，当然也可以不设置前缀。其中，关于 location 前缀的含义如下表所示。&lt;br&gt;
URI 表示 URL 地址中从域名到参数之间的部分， &lt;code&gt;&amp;#123;...&amp;#125;&lt;/code&gt;  表示指令块，用于满足 &lt;code&gt;location&lt;/code&gt;  匹配条件后需要执行的指令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;前缀&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;根据其后的指定模式进行精准匹配。例如，在访问时要与 &lt;code&gt;/html/aaa/index.html&lt;/code&gt;  完全一致才会执行其后的指令块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;使用正则表达式完成 &lt;code&gt;location&lt;/code&gt;  的匹配，区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~**&lt;/td&gt;
&lt;td&gt;使用正则表达式完成 &lt;code&gt;location&lt;/code&gt;  的匹配，不区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^~&lt;/td&gt;
&lt;td&gt;不使用正则表达式，完成以指定模式开头的 &lt;code&gt;location&lt;/code&gt;  匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@&lt;/td&gt;
&lt;td&gt;用于定义一个 &lt;code&gt;location&lt;/code&gt;  块，且该块不能被外部客户端所访问，只能被 Nginx 内部配置指令所访问&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;根据上表的描述可将 &lt;code&gt;location&lt;/code&gt;  根据不同前缀的使用方式，大致分为普通 &lt;code&gt;location&lt;/code&gt;  和正则 &lt;code&gt;location&lt;/code&gt; 。其中， &lt;code&gt;~&lt;/code&gt;  和 &lt;code&gt;~*&lt;/code&gt;  属于正则 &lt;code&gt;location&lt;/code&gt; ，其余的前缀和没有前缀的情况都属于普通 &lt;code&gt;location&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;精确匹配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#精确匹配&#34;&gt;#&lt;/a&gt; 精确匹配&lt;/h4&gt;
&lt;p&gt;所谓精准匹配指的就是用户访问的  &lt;code&gt;URI&lt;/code&gt;  与指定的 &lt;code&gt;URI&lt;/code&gt;  完全一致的情况，才会执行其后的指令块&lt;/p&gt;
&lt;p&gt;服务器位于 &lt;code&gt;192.168.9.5&lt;/code&gt; ，有 &lt;code&gt;192.168.9.3&lt;/code&gt;  和 &lt;code&gt;192.168.9.4&lt;/code&gt;  两个用户进行访问，示例配置如下：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;server&amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; localhost;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html index.htm;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; =/js &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-attribute&#34;&gt;allow&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.3&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; all;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; =/admin/auth&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;allow&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.4&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; all;&lt;br&gt;	&amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; all;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;响应结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;192.168.9.3&lt;/th&gt;
&lt;th&gt;192.168.9.4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5&#34;&gt;http://192.168.9.5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;403 Forbidden&lt;/td&gt;
&lt;td&gt;403 Forbidden&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/js&#34;&gt;http://192.168.9.5/js&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;404 Not Found&lt;/td&gt;
&lt;td&gt;403 Forbidden&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/admin/auth&#34;&gt;http://192.168.9.5/admin/auth&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;403 Forbidden&lt;/td&gt;
&lt;td&gt;404 Not Found&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/admin&#34;&gt;http://192.168.9.5/admin&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;403 Forbidden&lt;/td&gt;
&lt;td&gt;403 Forbidden&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;正则匹配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则匹配&#34;&gt;#&lt;/a&gt; 正则匹配&lt;/h4&gt;
&lt;p&gt;Nginx 配置文件中，多个正则 &lt;code&gt;location&lt;/code&gt;  之间按照正则 &lt;code&gt;location&lt;/code&gt;  在配置文件中的书写顺序进行匹配，且只要匹配成功就不会继续匹配后面定义的正则 &lt;code&gt;location&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; ~\.html$ &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-attribute&#34;&gt;allow&lt;/span&gt; all;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; ~^/aaa/.*\.html$&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;deny&lt;/span&gt; all;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;响应结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;响应结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/test.html&#34;&gt;http://192.168.9.5/test.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;404 Not Found (匹配了第 1 行 location)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/aaa/test.html&#34;&gt;http://192.168.9.5/aaa/test.html&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;404 Not Found (匹配了第 1 行 location)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Tip]&lt;/p&gt;
&lt;p&gt;精确匹配和 &lt;code&gt;^~&lt;/code&gt;  匹配会禁用正则匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;最大前缀匹配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#最大前缀匹配&#34;&gt;#&lt;/a&gt; 最大前缀匹配&lt;/h4&gt;
&lt;p&gt;由于 &lt;code&gt;location&lt;/code&gt;  可以同时定义多个，当一个配置文件中同时出现多个 &lt;code&gt;location&lt;/code&gt;  时，普通 &lt;code&gt;location&lt;/code&gt;  之间遵循&lt;strong&gt;最大前缀匹配&lt;/strong&gt;原则。通俗地讲就是，匹配度最高的 &lt;code&gt;location&lt;/code&gt;  将会执行。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; /ng.test [&lt;br&gt;	allow all;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; /ng.test/log [&lt;br&gt;	deny all;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;响应结果如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;响应结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/ng.test/data&#34;&gt;http://192.168.9.5/ng.test/data&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;404 Not Found (匹配了第 1 行 location)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/ng.test/log&#34;&gt;http://192.168.9.5/ng.test/log&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;403 Forbidden (匹配了第 4 行 location)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;http://192.168.9.5/ng.test/log/data&#34;&gt;http://192.168.9.5/ng.test/log/data&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;403 Forbidden (匹配了第 4 行 location)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Tip]&lt;/p&gt;
&lt;p&gt;&lt;code&gt;location \ &amp;#123;...&amp;#125;&lt;/code&gt; ：遵守普通 location 的最大前缀匹配，由于任何 URI 都必然以 **/** 根开头，所以对于一个 URI, 若配置文件中有更合适的匹配则会将其替代，否则返回 &lt;code&gt;location \ &amp;#123;...&amp;#125;&lt;/code&gt;  匹配到的结果，它相当于站点默认配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;location =\ &amp;#123;...&amp;#125;&lt;/code&gt; ：遵守的是精准匹配，也就是只能匹配该站点根目录，同时会禁止继续搜索正则 &lt;code&gt;location&lt;/code&gt; , 效率比 &lt;code&gt;location \ &amp;#123;...&amp;#125;&lt;/code&gt;  要高。&lt;/p&gt;
&lt;p&gt;因此，若在开发中能确定精准匹配的情况，可以采用 &lt;code&gt;location =\ &amp;#123;...&amp;#125;&lt;/code&gt;  的方式，提升匹配效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;当多种类型的 location 匹配同时出现时；最终执行结果为： &lt;code&gt;=&lt;/code&gt;  匹配 &amp;gt;  &lt;code&gt;^~&lt;/code&gt;  匹配 &amp;gt; 正则匹配 &amp;gt; 普通的最大前缀匹配&lt;/p&gt;
&lt;p&gt;只要优先的 &lt;code&gt;location&lt;/code&gt;  匹配成功，就不会执行其他的 &lt;code&gt;location&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;虚拟主机配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#虚拟主机配置&#34;&gt;#&lt;/a&gt; 虚拟主机配置&lt;/h2&gt;
&lt;p&gt;虚拟主机为配置文件中的 &lt;code&gt;server&lt;/code&gt;  块。匹配到第一个&lt;strong&gt;虚拟主机&lt;/strong&gt;，则停止匹配。&lt;/p&gt;
&lt;h3 id=&#34;基于端口的虚拟主机配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于端口的虚拟主机配置&#34;&gt;#&lt;/a&gt; 基于端口的虚拟主机配置&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;nginx.conf&lt;/code&gt;  添加如下配置：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;server&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;81&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; localhost;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html/www;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;server&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;82&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; localhost;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html/vod;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新加载 nginx 主配置文件。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;systemctl reload nginx&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;端口没有打开的情况&lt;/span&gt;&lt;br&gt;firewall-cmd --zone=public --add-port=81/tcp --permanent&lt;br&gt;firewall-cmd --zone=public --add-port=82/tcp --permanent&lt;br&gt;systemctl restart firewalld&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新访问即可进入不同的页面。&lt;/p&gt;
&lt;h3 id=&#34;基于server_name的虚拟主机配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于server_name的虚拟主机配置&#34;&gt;#&lt;/a&gt; 基于 server_name 的虚拟主机配置&lt;/h3&gt;
&lt;p&gt;server_name 的匹配顺序为：&lt;strong&gt;准确&lt;/strong&gt; &amp;gt; &lt;strong&gt;开头通配符&lt;/strong&gt; &amp;gt; &lt;strong&gt;结尾通配符&lt;/strong&gt; &amp;gt; &lt;strong&gt;正则表达式&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&#34;准确&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#准确&#34;&gt;#&lt;/a&gt; 准确&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;server&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; www.&lt;span class=&#34;hljs-number&#34;&gt;123&lt;/span&gt;.com;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html/www;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;server&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; www.&lt;span class=&#34;hljs-number&#34;&gt;1234&lt;/span&gt;.com;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html/vod;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;开头通配符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开头通配符&#34;&gt;#&lt;/a&gt; 开头通配符&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;server&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; *.&lt;span class=&#34;hljs-number&#34;&gt;123&lt;/span&gt;.com;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html/www;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;结尾通配符&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#结尾通配符&#34;&gt;#&lt;/a&gt; 结尾通配符&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;server&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; www.&lt;span class=&#34;hljs-number&#34;&gt;123&lt;/span&gt;.*;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html/www;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;正则表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正则表达式&#34;&gt;#&lt;/a&gt; 正则表达式&lt;/h4&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;server&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt; ~^w&amp;#123;3&amp;#125;\.123.com;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;root&lt;/span&gt; html/www;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;index&lt;/span&gt; index.html;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# ~代表开启正则表达式匹配，不属于正则表达式的内容&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代理&#34;&gt;#&lt;/a&gt; 代理&lt;/h2&gt;
&lt;p&gt;如果两方无法正常通信。那么可以使用 &lt;strong&gt;代理&lt;/strong&gt;，通过访问代理服务器，让代理服务器去访问之前无法访问的主机。&lt;/p&gt;
&lt;h3 id=&#34;正向代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#正向代理&#34;&gt;#&lt;/a&gt; 正向代理&lt;/h3&gt;
&lt;p&gt;正向代理可以理解为「客户端」的代理，即客户端主动提供代理服务，客户端知道代理服务器的存在。&lt;/p&gt;
&lt;img src=&#34;proxy_positive.png&#34;/&gt;
&lt;h3 id=&#34;反向代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#反向代理&#34;&gt;#&lt;/a&gt; 反向代理&lt;/h3&gt;
&lt;p&gt;反向代理可以理解为「服务器」的代理，即服务器端主动提供代理服务，客户端不知道代理服务器的存在。&lt;/p&gt;
&lt;img src=&#34;proxy_negative.png&#34;/&gt;
&lt;h4 id=&#34;nginx反向代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nginx反向代理&#34;&gt;#&lt;/a&gt; Nginx 反向代理&lt;/h4&gt;
&lt;p&gt;如下图所示， &lt;code&gt;Nginx&lt;/code&gt;  服务器接入公网，可以被外界访问，真正的业务服务器，外界无法访问。业务服务器的进出都要通过 &lt;code&gt;Nginx&lt;/code&gt;  服务器，如果 &lt;code&gt;Nginx&lt;/code&gt;  服务器的带宽不够高，将导致性能瓶颈。此谓， &lt;code&gt;Nginx&lt;/code&gt;  代理的隧道模型&lt;/p&gt;
&lt;img src=&#34;nginx_proxy_tunnel.png&#34;/&gt;
&lt;blockquote&gt;
&lt;p&gt;另一种模型为 &lt;code&gt;DR&lt;/code&gt;  模型，进则经过代理服务器，出则直接通向网关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Nignx 的反向代理通过关键字「 &lt;code&gt;proxy_pass&lt;/code&gt; 」实现。「 &lt;code&gt;proxy_pass&lt;/code&gt; 」要在 &lt;code&gt;location&lt;/code&gt;  块中使用。如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;server&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt;       &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt;  localhost;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_pass&lt;/span&gt; http://www.bilibili.com &lt;span class=&#34;hljs-comment&#34;&gt;#注意，必须带有协议。&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#root   html;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#index  index.html index.htm;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;可能出现： &lt;code&gt;proxy_pass&lt;/code&gt;  中的域名，如果去掉二级域名，可能会导致重定向。此时并不是反向代理未成功。而是因为网站设计人员可能会让无 &lt;code&gt;www&lt;/code&gt;  二级域名的请求重定向至含有 &lt;code&gt;www&lt;/code&gt;  二级域名的网址。&lt;/p&gt;
&lt;p&gt;同时，若访问的请求是 http 协议，那么也可能发生重定向。重定向至 https 协议。原因也是网站设计带来的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;额外的参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;proxy_set_header&lt;/td&gt;
&lt;td&gt;在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proxy_connect_timeout&lt;/td&gt;
&lt;td&gt;配置 Nginx 与后端代理服务器尝试建立连接的超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proxy_read_timeout&lt;/td&gt;
&lt;td&gt;配置 Nginx 向后端服务器组发出 read 请求后，等待响应的超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proxy_send_timeout&lt;/td&gt;
&lt;td&gt;配置 Nginx 向后端服务器组发出 write 请求后，等待响应的超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;proxy_redirect&lt;/td&gt;
&lt;td&gt;用于修改后端服务器返回的响应头中的 Location 和 Refresh&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;负载均衡&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#负载均衡&#34;&gt;#&lt;/a&gt; 负载均衡&lt;/h2&gt;
&lt;p&gt;把请求，按照一定算法规则，分配给多台业务服务器（即使其中一个坏了 / 维护升级，还有其他服务器可以继续提供服务）。&lt;/p&gt;
&lt;img src=&#34;load_balance.png&#34; /&gt;
&lt;p&gt;Nginx 的负载均衡通过， &lt;code&gt;upstream&lt;/code&gt;  和 &lt;code&gt;proxy_pass&lt;/code&gt;  配合使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;注意， &lt;code&gt;upstream&lt;/code&gt;  和 &lt;code&gt;server&lt;/code&gt;  一个级别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;轮询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#轮询&#34;&gt;#&lt;/a&gt; 轮询&lt;/h3&gt;
&lt;p&gt;雨露均沾，所有配置的服务器轮换着被访问。&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;upstream&lt;/span&gt; httpd&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.4:80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.5:80&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;server&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt;       &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt;  localhost;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_pass&lt;/span&gt; http://httpd;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#root   html;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#index  index.html index.htm;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;轮询为 &lt;code&gt;Nginx&lt;/code&gt;  的默认负载均衡策略&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;upstream&lt;/code&gt;  有如下常用状态参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;指令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fail_timeout&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;与 max_fails 结合使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;max_fails&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;设置在 fail_timeout 参数设置的时间内最大失败次数，如果在这个时间内，所有针对该服务器的请求都失败了，那么认为该服务器会被认为是停机了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fail_time&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;服务器会被认为停机的时间长度，默认为 10s。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;backup&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标记该服务器为备用服务器。当主服务器停止时，请求会被发送到它这里。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;down&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标记服务器永久停机了。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在轮询中，如果服务器 down 掉了，会自动剔除该服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺省配置就是轮询策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;此策略适合服务器配置相当，&lt;strong&gt;无状态&lt;/strong&gt;且短平快的服务使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;加权轮询&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#加权轮询&#34;&gt;#&lt;/a&gt; 加权轮询&lt;/h4&gt;
&lt;p&gt;通过 &lt;code&gt;weight&lt;/code&gt;  实现，权重大的访问会更多。&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;upstream&lt;/span&gt; httpd&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;#httpd为别名&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.4:80&lt;/span&gt; weight=&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.5:80&lt;/span&gt; weight=&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;server&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt;       &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt;  localhost;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_pass&lt;/span&gt; http://httpd;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#root   html;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#index  index.html index.htm;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Tip]&lt;/p&gt;
&lt;p&gt;轮询是一种无状态的轮询策略，无法保证 &lt;code&gt;session&lt;/code&gt;  一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ip_hash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ip_hash&#34;&gt;#&lt;/a&gt; ip_hash&lt;/h3&gt;
&lt;p&gt;同一个来源的 &lt;code&gt;IP&lt;/code&gt;  指向一个服务器。&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-section&#34;&gt;upstream&lt;/span&gt; httpd&amp;#123;&lt;br&gt;    ip_hash; &lt;span class=&#34;hljs-comment&#34;&gt;#指明使用ip_hash方式&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.4:80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;192.168.9.5:80&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-section&#34;&gt;server&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;listen&lt;/span&gt;       &lt;span class=&#34;hljs-number&#34;&gt;80&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;server_name&lt;/span&gt;  localhost;&lt;br&gt;    &lt;span class=&#34;hljs-section&#34;&gt;location&lt;/span&gt; / &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-attribute&#34;&gt;proxy_pass&lt;/span&gt; http://httpd;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#root   html;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;#index  index.html index.htm;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;需要注意的是，在使用 &lt;code&gt;ip_hash&lt;/code&gt;  方式处理负载均衡时，Web 服务器在负载均衡列表中的状态不能使用 &lt;code&gt;weight&lt;/code&gt;  和 &lt;code&gt;backup&lt;/code&gt;  设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Tip]&lt;/p&gt;
&lt;p&gt;值得一提的是，由于 &lt;code&gt;ip_hash&lt;/code&gt;  方式为每一个用户 &lt;code&gt;IP&lt;/code&gt;  绑定了一个 &lt;code&gt;Web&lt;/code&gt;  服务器处理，将会导致某些 &lt;code&gt;Web&lt;/code&gt;  服务器接收的请求多，某些 &lt;code&gt;Web&lt;/code&gt;  服务器接到的请求少，无法保证 &lt;code&gt;Web&lt;/code&gt;  服务器的负载均衡。因此，建议只在必要的情况下使用这种方式。同时， &lt;code&gt;ip_hash&lt;/code&gt;  可以用来处理有状态的请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;url_hash&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#url_hash&#34;&gt;#&lt;/a&gt; url_hash&lt;/h3&gt;
&lt;p&gt;同一个来源的 &lt;code&gt;URL&lt;/code&gt;  指向一个服务器。&lt;/p&gt;
&lt;h3 id=&#34;leat_connection&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#leat_connection&#34;&gt;#&lt;/a&gt; leat_connection&lt;/h3&gt;
&lt;p&gt;把请求转发给连接数较少的后端服务器。需要第三方的组件&lt;/p&gt;
&lt;h3 id=&#34;fair&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fair&#34;&gt;#&lt;/a&gt; fair&lt;/h3&gt;
&lt;p&gt;根据后端服务器相应时间进行分配。需要第三方的组件。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
