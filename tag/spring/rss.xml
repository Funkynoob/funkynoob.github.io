<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Funkynoob的个人博客 • Posts by &#34;spring&#34; tag</title>
        <link>https://blog.riversea.top</link>
        <description>亿点点心得</description>
        <language>zh-CN</language>
        <pubDate>Wed, 21 Feb 2024 13:47:16 +0800</pubDate>
        <lastBuildDate>Wed, 21 Feb 2024 13:47:16 +0800</lastBuildDate>
        <category>docker</category>
        <category>Git</category>
        <category>Nginx</category>
        <category>ORM框架</category>
        <category>MyBatis</category>
        <category>redis</category>
        <category>spring</category>
        <item>
            <guid isPermalink="true">https://blog.riversea.top/2024/02/21/spring/</guid>
            <title>Spring</title>
            <link>https://blog.riversea.top/2024/02/21/spring/</link>
            <category>spring</category>
            <pubDate>Wed, 21 Feb 2024 13:47:16 +0800</pubDate>
            <description><![CDATA[ &lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;引入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入&#34;&gt;#&lt;/a&gt; 引入&lt;/h1&gt;
&lt;p&gt;考虑下面一个模拟保存用户的 &lt;code&gt;MVC&lt;/code&gt;  程序：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//dao层&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserDao&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDaoForMysqlImpl&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserDao&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;正在保存user for mysql&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//service层&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserService&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserServiceImpl&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;IUserService&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;IUserDao&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userDao&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserDaoForMysqlImpl&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        userDao.saveUser();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//controller层&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Controller&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;IUserService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userService&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserServiceImpl&lt;/span&gt;();&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;        userService.saveUser();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight crmsh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs crmsh&#34;&gt;正在保存&lt;span class=&#34;hljs-keyword&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-title&#34;&gt;for&lt;/span&gt; mysql&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果看起来完美无缺，能够正常保存，于是你正常上线。但某一天客户突然要求你更换数据库为  &lt;code&gt;Oracle&lt;/code&gt;  而不是  &lt;code&gt;Mysql&lt;/code&gt; ，你可能会想那好办，我再写一个  &lt;code&gt;UserDaoForOracleImpl&lt;/code&gt;  就好了呗。于是你马不停蹄地写出了这个给类，然后一一更改每一层的依赖…&lt;/p&gt;
&lt;p&gt;这样的操作以及源代码有什么问题？&lt;/p&gt;
&lt;p&gt;由&lt;strong&gt; OCP 原则&lt;/strong&gt;可知：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，我们应当采用扩展。对源代码的修改显然已经破坏了这个原则。&lt;/p&gt;
&lt;p&gt;由&lt;strong&gt; DIP 原则&lt;/strong&gt;可知：高层模块不应该依赖于下层模块的细节，也就是不应该在程序中出现下层模块的实例，换句话说也就是面向接口开发。源代码中高层对底层的依赖显然也违背了这个原则。&lt;/p&gt;
&lt;p&gt;由于高层实例和下层实例的强耦合，导致每做出一次更新，就要修改源代码，也就导致每次更新都要重新对以往的代码进行测试。&lt;/p&gt;
&lt;p&gt;争对以上所述情况，出现了一个新型的解决方案： &lt;code&gt;IOC&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Important]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开闭原则 (&lt;font color=&#34;red&#34;&gt;O&lt;/font&gt;pen &lt;font color=&#34;red&#34;&gt;C&lt;/font&gt;lose &lt;font color=&#34;red&#34;&gt;P&lt;/font&gt;rinciple OCP)&lt;/strong&gt; ：软件实体应当对扩展开放，对修改关闭。&lt;/p&gt;
&lt;p&gt;Software entities should be open for extension，but closed for modification.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;依赖倒置原则 (&lt;font color=&#34;red&#34;&gt;D&lt;/font&gt;ependency &lt;font color=&#34;red&#34;&gt;I&lt;/font&gt;version &lt;font color=&#34;red&#34;&gt;P&lt;/font&gt;rinciple DIP)&lt;/strong&gt; ：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。&lt;/p&gt;
&lt;p&gt;High level modules shouldn’t depend upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;ioc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ioc&#34;&gt;#&lt;/a&gt; IoC&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;控制反转 (nversion &lt;font color=&#34;red&#34;&gt;o&lt;/font&gt;f &lt;font color=&#34;red&#34;&gt;C&lt;/font&gt;ontrol IoC)&lt;/strong&gt; ：通过使用直接构建类或诸如服务定位模式的机制来控制其依赖关系的实例化或位置的逆过程。以上为&lt;a href=&#34;https://docs.Spring.io/Spring-framework/reference/core/beans/introduction.html&#34;&gt; Spring 官方&lt;/a&gt;的解释。&lt;/p&gt;
&lt;p&gt;可能不太好懂，可以换作通俗的话来解释。也就是解释反转是什么：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不在程序中采用硬编码的方式来  &lt;code&gt;new&lt;/code&gt;  对象，也就是说&lt;strong&gt;创造对象的权力&lt;/strong&gt;被我反转出去了。&lt;/li&gt;
&lt;li&gt;不在程序中自己解决对象之间的依赖问题，也就是说&lt;strong&gt;依赖关系的维护权&lt;/strong&gt;被我反转出去了。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;Ioc&lt;/code&gt;  是种思想，不是某种具体的解决措施。  &lt;code&gt;Ioc&lt;/code&gt;  有很多种实现方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架 (容器) 为我们提供了  &lt;code&gt;Ioc&lt;/code&gt;  的一种具体的解决办法也就是&lt;strong&gt;依赖注入 (&lt;font color=&#34;red&#34;&gt;D&lt;/font&gt;ependency &lt;font color=&#34;red&#34;&gt;I&lt;/font&gt;njection DI)&lt;/strong&gt; 。也就是说我们能通过&lt;strong&gt;依赖注入&lt;/strong&gt;来实现&lt;strong&gt;控制反转&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;依赖注入  &lt;code&gt;DI&lt;/code&gt;  的两种注入方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造器注入：通过构造器注入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;  注入：通过  &lt;code&gt;set&lt;/code&gt;  方法注入&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[!Note]&lt;/p&gt;
&lt;p&gt;依赖：A 和 B 之间的关系&lt;/p&gt;
&lt;p&gt;注入：创造 A 和 B 之间的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;第一个spring程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#第一个spring程序&#34;&gt;#&lt;/a&gt; 第一个 Spring 程序&lt;/h2&gt;
&lt;h3 id=&#34;获取配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取配置文件&#34;&gt;#&lt;/a&gt; 获取配置文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架称呼被  &lt;code&gt;Ioc&lt;/code&gt;  管理的对象为  &lt;code&gt;bean&lt;/code&gt; 。 &lt;code&gt;Spring&lt;/code&gt;  通过  &lt;code&gt;xml&lt;/code&gt;  配置文件来进行相关配置，同时&lt;strong&gt;对配置文件的命名不做要求&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;   bean标签为bean对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;   id：代表bean对象的唯一标识，不能重复。否则会抛出BeanDefinitionParsingException bean定义解析错误&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;   class：实例对象的全类名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.demo.bens.UserBean&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;获取ioc容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取ioc容器&#34;&gt;#&lt;/a&gt; 获取 IoC 容器&lt;/h3&gt;
&lt;p&gt;配置完成配置文件后，紧接着就要通过解析配置文件获取  &lt;code&gt;IOC&lt;/code&gt;  容器，在  &lt;code&gt;Spring&lt;/code&gt;  中  &lt;code&gt;ApplicationContext&lt;/code&gt;  接口即为  &lt;code&gt;IoC&lt;/code&gt;  容器&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//在类路径中查找配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ioc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Spring.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//在本地查找配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ioc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileSystemXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;path/to/xml&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//初始化Ioc容器时支持多个配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//ApplicationContext ioc = new ClassPathXmlApplicationContext(&amp;quot;asd.xml&amp;quot;,&amp;quot;asad.xml&amp;quot;,&amp;quot;asdaa.xml&amp;quot;....);&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;在获取  &lt;code&gt;IoC&lt;/code&gt;  容器时，就会实例化那些单例的  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ApplicationContext&lt;/code&gt;  继承自  &lt;code&gt;BeanFactory&lt;/code&gt; ，实际上也就是  &lt;code&gt;bean&lt;/code&gt;  工厂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;获取bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#获取bean&#34;&gt;#&lt;/a&gt; 获取 bean&lt;/h3&gt;
&lt;p&gt;获得  &lt;code&gt;Ioc&lt;/code&gt;  容器后，我们就可以获取容器里面锁创造的  &lt;code&gt;bean&lt;/code&gt;  了， &lt;code&gt;Spring&lt;/code&gt;  提供了三种获取  &lt;code&gt;bean&lt;/code&gt;  的重载方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userBean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userBean&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;UserBean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userBean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userBean&amp;quot;&lt;/span&gt;,UserBean.class);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;UserBean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;userBean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(UserBean.Class);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架通过反射机制和工厂模式来创造  &lt;code&gt;bean&lt;/code&gt;  。也就是：首先解析  &lt;code&gt;XML&lt;/code&gt;  文件，获取类路径，其次通过工厂模式利用反射通过类路径创建对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  默认使用空构造方法创建对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  底层使用一个  &lt;code&gt;map&lt;/code&gt;  集合来管理对象和  &lt;code&gt;id&lt;/code&gt;  之间的关系， &lt;code&gt;getBean&lt;/code&gt;  方法实际上是就是通过键获取值。&lt;/p&gt;
&lt;p&gt;当获取  &lt;code&gt;bean&lt;/code&gt;  时，如果指定的 &lt;code&gt;id&lt;/code&gt;  或者类型不存在，那么将会抛出  &lt;code&gt;NoSuchBeanDefinitionException&lt;/code&gt;  没有该  &lt;code&gt;bean&lt;/code&gt;  定义异常&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;spring对ioc的实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对ioc的实现&#34;&gt;#&lt;/a&gt; Spring 对 IOC 的实现&lt;/h2&gt;
&lt;h3 id=&#34;依赖注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依赖注入&#34;&gt;#&lt;/a&gt; 依赖注入&lt;/h3&gt;
&lt;p&gt;解决对象之间的依赖问题。&lt;/p&gt;
&lt;h4 id=&#34;set注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set注入&#34;&gt;#&lt;/a&gt; set 注入&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;  注入，基于  &lt;code&gt;set&lt;/code&gt;  方法实现的，底层会通过反射机制调用属性对应的  &lt;code&gt;set&lt;/code&gt;  方法然后给属性赋值。这种方式要求属性必须对外提供  &lt;code&gt;set&lt;/code&gt;  方法：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.UserService&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		property标签：代表通过set的方式注入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		name：代表对应属性。注意，该属性不是指的属性名，而是setter方法，去掉set以及首字母小写之后的属性。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		ref：引用类型。ref填入的时其他bean的id&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		value：普通的字面量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;		--&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;set 注入底层通过反射获取的 setter 方法，所以 name 属性必须是 setter 方法去掉 set 以及首字母小写之后的名字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;构造器注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造器注入&#34;&gt;#&lt;/a&gt; 构造器注入&lt;/h4&gt;
&lt;p&gt;核心原理：通过调用构造方法来给属性赋值。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;customService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.CustomService&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	constructor-arg：代表通过构造器注入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	index：构造器中的参数位置，默认以0开始&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	name：参数名字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	type：参数类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	value和ref与set注入同&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;constructor-arg&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;index&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;constructor-arg&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;constructor-arg&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.String&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;不指定  &lt;code&gt;index&lt;/code&gt;  、 &lt;code&gt;name&lt;/code&gt;  和  &lt;code&gt;type&lt;/code&gt;  的话， &lt;code&gt;Spring&lt;/code&gt;  也能猜出来该赋值给谁。注意此方法也是使用的  &lt;code&gt;type&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;两种注入方式的实际不同：一个是实例化后注入，一个是实例的时候就注入。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;set注入专题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set注入专题&#34;&gt;#&lt;/a&gt; set 注入专题&lt;/h3&gt;
&lt;h4 id=&#34;注入外部bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入外部bean&#34;&gt;#&lt;/a&gt; 注入外部 Bean&lt;/h4&gt;
&lt;p&gt;引用的是在  &lt;code&gt;bean&lt;/code&gt;  外面定义的  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDaoBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.OrderDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDaoBean&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入内部bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入内部bean&#34;&gt;#&lt;/a&gt; 注入内部 bean&lt;/h4&gt;
&lt;p&gt;在  &lt;code&gt;bean&lt;/code&gt;  标签中嵌套  &lt;code&gt;bean&lt;/code&gt;  标签。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderServiceInner&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.OrderDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入简单类型&#34;&gt;#&lt;/a&gt; 注入简单类型&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  认为的简单类型：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;isSimpleValueType&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Class&amp;lt;?&amp;gt; type)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (!isVoidType(type) &amp;amp;&amp;amp;&lt;br&gt;            (isPrimitiveOrWrapper(type) || &lt;span class=&#34;hljs-comment&#34;&gt;//基本类型和包装类型&lt;/span&gt;&lt;br&gt;             Enum.class.isAssignableFrom(type) || &lt;span class=&#34;hljs-comment&#34;&gt;//枚举类型&lt;/span&gt;&lt;br&gt;             CharSequence.class.isAssignableFrom(type) || &lt;br&gt;             Number.class.isAssignableFrom(type) ||&lt;br&gt;             Date.class.isAssignableFrom(type) || &lt;span class=&#34;hljs-comment&#34;&gt;//日期&lt;/span&gt;&lt;br&gt;             Temporal.class.isAssignableFrom(type) || &lt;br&gt;             ZoneId.class.isAssignableFrom(type) ||&lt;br&gt;             TimeZone.class.isAssignableFrom(type) ||&lt;br&gt;             File.class.isAssignableFrom(type) ||&lt;br&gt;             Path.class.isAssignableFrom(type) ||&lt;br&gt;             Charset.class.isAssignableFrom(type) ||&lt;br&gt;             Currency.class.isAssignableFrom(type) ||&lt;br&gt;             InetAddress.class.isAssignableFrom(type) ||&lt;br&gt;             URI.class == type ||&lt;br&gt;             URL.class == type ||&lt;br&gt;             UUID.class == type ||&lt;br&gt;             Locale.class == type ||&lt;br&gt;             Pattern.class == type ||&lt;br&gt;             Class.class == type));&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注入简单类型形如如下形式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderServiceInner&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;当把日期当作简单类型注入时必须考虑注入的格式，要必须完全符合日期格式才能成功注入，如下所示&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Thu Feb 22 10:53:41 CST 2024&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;date1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2024/2/22 20:20:20&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;级联属性赋值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#级联属性赋值&#34;&gt;#&lt;/a&gt; 级联属性赋值&lt;/h4&gt;
&lt;p&gt;引用外部  &lt;code&gt;bean&lt;/code&gt;  后，对外部  &lt;code&gt;bean&lt;/code&gt;  的属性赋值&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Clazz&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjj&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;class&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz.name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;软件1班&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入数组&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入数组&#34;&gt;#&lt;/a&gt; 注入数组&lt;/h4&gt;
&lt;p&gt;在注入时使用标签： &lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单类型&#34;&gt;#&lt;/a&gt; 简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjj&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;array&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;employee&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Employee&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;array&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入list集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入list集合&#34;&gt;#&lt;/a&gt; 注入 list 集合&lt;/h4&gt;
&lt;p&gt;在注入时使用标签： &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;是简单类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#是简单类型&#34;&gt;#&lt;/a&gt; 是简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjj&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型-2&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;list&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Dept&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;employee&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Employee&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;depts&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入map集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入map集合&#34;&gt;#&lt;/a&gt; 注入 map 集合&lt;/h4&gt;
&lt;p&gt;在注入时使用标签： &lt;code&gt;&amp;lt;map&amp;gt;&lt;/code&gt;  以及其中的  &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h5 id=&#34;简单类型-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单类型-2&#34;&gt;#&lt;/a&gt; 简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  或者  &lt;code&gt;&amp;lt;key&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;peopleBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.People&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;addrs&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果key不是简单类型，使用 key-ref 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果value不是简单类型，使用 value-ref 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;北京大兴区&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;上海浦东区&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;深圳宝安区&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型-3&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value-ref&amp;gt;&lt;/code&gt;  或者  &lt;code&gt;&amp;lt;key-ref&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;emploee1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Employee&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;deptMap&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果key不是简单类型，使用 key-ref 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果value是简单类型，使用 value 属性--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dept3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入set集合&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入set集合&#34;&gt;#&lt;/a&gt; 注入 set 集合&lt;/h4&gt;
&lt;p&gt;在注入时使用  &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;h5 id=&#34;简单类型-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简单类型-3&#34;&gt;#&lt;/a&gt; 简单类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;value&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;peopleBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.People&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phones&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--简单类型使用value，非简单类型可以使用ref--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;110&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;110&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;120&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;120&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;119&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;119&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;引用类型-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引用类型-4&#34;&gt;#&lt;/a&gt; 引用类型&lt;/h5&gt;
&lt;p&gt;在  &lt;code&gt;&amp;lt;set&amp;gt;&lt;/code&gt;  中使用  &lt;code&gt;&amp;lt;ref&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;peopleBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.People&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phones&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--非简单类型可以使用ref，简单类型使用value--&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone1&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone2&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone3&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone4&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;ref&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;phone5&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入properties&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入properties&#34;&gt;#&lt;/a&gt; 注入 Properties&lt;/h4&gt;
&lt;p&gt;在注入时使用  &lt;code&gt;&amp;lt;props&amp;gt;&lt;/code&gt;  标签和  &lt;code&gt;&amp;lt;prop&amp;gt;&lt;/code&gt;  标签&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.DataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;props&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;com.cj.jc.sql.Driver&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/tes&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;root&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;123456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;props&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;注入空字符串和null值&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入空字符串和null值&#34;&gt;#&lt;/a&gt; 注入空字符串和 null 值&lt;/h4&gt;
&lt;p&gt;空字符串可以是以下的方式：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注入  &lt;code&gt;null&lt;/code&gt;  可以不注入对应属性，也可以使用  &lt;code&gt;&amp;lt;null&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDaoBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.OrderDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.OrderSerivce&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;orderDao&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;null&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;p命名空间注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#p命名空间注入&#34;&gt;#&lt;/a&gt; p 命名空间注入&lt;/h3&gt;
&lt;p&gt;使用前确保使用约束： &lt;code&gt;xmlns:p=http://www.Springframework.org/schema/p&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相当于  &lt;code&gt;set&lt;/code&gt;  注入和在注入时使用  &lt;code&gt;&amp;lt;property&amp;gt;&lt;/code&gt;  标签：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;stu&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.Student&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;p:name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;llll&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;p:clazz-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;clazz&amp;quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;该命名空间的形式为： &lt;code&gt;p:xxx[-ref]&lt;/code&gt;   &lt;code&gt;xxx&lt;/code&gt;  为属性名，是否带  &lt;code&gt;ref&lt;/code&gt;  取决于该属性是否为引用属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;c命名空间注入&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#c命名空间注入&#34;&gt;#&lt;/a&gt; c 命名空间注入&lt;/h3&gt;
&lt;p&gt;使用前确保使用约束： &lt;code&gt;xmlns:p=http://www.Springframework.org/schema/c&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相当于构造器注入和在注入时使用  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;use&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.entity.User&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;c:_0&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;111&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;c:name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jjjj&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;c_1-ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;该命名空间的形式为： &lt;code&gt;p:_num|xxx[-ref]&lt;/code&gt;   &lt;code&gt;_num&lt;/code&gt;  相当于  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  中的序号  &lt;code&gt;xxx&lt;/code&gt;  相当于属性名，是否带  &lt;code&gt;ref&lt;/code&gt;  取决于该属性是否为引用属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;util命名空间&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#util命名空间&#34;&gt;#&lt;/a&gt; util 命名空间&lt;/h3&gt;
&lt;p&gt;使用  &lt;code&gt;util &lt;/code&gt; 命名空间可以让&lt;strong&gt;配置复用&lt;/strong&gt;。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:util&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/util&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/util http://www.Springframework.org/schema/util/Spring-util.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	保证有下面连个约束：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xmlns:util=&amp;quot;http://www.Springframework.org/schema/util&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 xsi:schemaLocation=&amp;quot;http://www.Springframework.org/schema/util http://www.Springframework.org/schema/util/Spring-util.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:properties&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;prop&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mysql.cj.jdbc.Driver&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://localhost:3306/Spring&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;root&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;123456&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;prop&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource1&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.powernode.Spring6.beans.MyDataSource1&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;prop&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource2&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.powernode.Spring6.beans.MyDataSource2&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;prop&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	引用某个类里面的公共，静态的变量作为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:constant&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;static-field&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Integer.MAX_VALUE&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	相当于可复用的&amp;lt;list&amp;gt;标签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:list&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;321&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1234567&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:list&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	相当于可复用的&amp;lt;map&amp;gt;标签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;key&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:map&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	相当于可复用的&amp;lt;set&amp;gt;标签&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;util:set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;123&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;321&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1234567&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;util:set&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;基于xml的自动装配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于xml的自动装配&#34;&gt;#&lt;/a&gt; 基于 xml 的自动装配&lt;/h3&gt;
&lt;p&gt;自动装配：不用显示地对类地引用对象进行赋值。使用  &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;  标签的  &lt;code&gt;autowire&lt;/code&gt;  属性。&lt;/p&gt;
&lt;h4 id=&#34;根据名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据名称&#34;&gt;#&lt;/a&gt; 根据名称&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.UserService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;autowire&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;byName&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意根据名称自动注入装配，会根据  &lt;code&gt;id&lt;/code&gt;  或  &lt;code&gt;name&lt;/code&gt;  与  &lt;code&gt;setter&lt;/code&gt;  方法匹配。所以  &lt;code&gt;id&lt;/code&gt;  或  &lt;code&gt;name&lt;/code&gt;  不能随便写。&lt;/p&gt;
&lt;p&gt;没有  &lt;code&gt;name&lt;/code&gt;  属性时会根据  &lt;code&gt;id&lt;/code&gt;  进行匹配。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此类型也是  &lt;code&gt;set&lt;/code&gt;  注入，必须保证  &lt;code&gt;setter&lt;/code&gt;  方法的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;根据类型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#根据类型&#34;&gt;#&lt;/a&gt; 根据类型&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;userDao&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.dao.UserDao&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;customService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.di.service.CustomService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;autowire&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;byType&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意根据名称自动注入装配时，如果有多个相同类型的  &lt;code&gt;bean&lt;/code&gt;  存在，那么无法进行自动装配，会抛出  &lt;code&gt;UnsatisfiedDependencyException&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此类型也是  &lt;code&gt;set&lt;/code&gt;  注入，必须保证  &lt;code&gt;setter&lt;/code&gt;  方法的存在&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;引入外部属性配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#引入外部属性配置文件&#34;&gt;#&lt;/a&gt; 引入外部属性配置文件&lt;/h3&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans http://www.Springframework.org/schema/beans/Spring-beans.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	确保以下两个约束存在：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  	xmlns:context=&amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xsi:schemaLocation=&amp;quot;http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入外部配置文件--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:property-placeholder&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;location&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jdbc.properties&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	使用$&amp;#123;&amp;#125;引用属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.powernode.Spring6.beans.MyDataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driver&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;bean的作用域&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的作用域&#34;&gt;#&lt;/a&gt; bean 的作用域&lt;/h2&gt;
&lt;p&gt;默认情况下  &lt;code&gt;bean&lt;/code&gt;  是单例的。在  &lt;code&gt;Spring&lt;/code&gt;  上下文初始化的时候实例化。通过  &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;  标签的  &lt;code&gt;scope&lt;/code&gt;  属性进行配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scope&lt;/code&gt;  一个有  &lt;code&gt;8&lt;/code&gt;  个取值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;singleton&lt;/code&gt; ：默认的，单例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt; ：原型。每调用一次  &lt;code&gt;getBean()&lt;/code&gt;  方法则获取一个新的  &lt;code&gt;Bean&lt;/code&gt;  对象。或每次注入的时候都是新对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;request&lt;/code&gt; ：一个请求对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;session&lt;/code&gt; ：一个会话对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;global session&lt;/code&gt; ：&lt;strong&gt;portlet 应用中专用的&lt;/strong&gt;。如果在  &lt;code&gt;Servlet&lt;/code&gt;  的  &lt;code&gt;WEB&lt;/code&gt;  应用中使用  &lt;code&gt;global session&lt;/code&gt;  的话，和  &lt;code&gt;session&lt;/code&gt;  一个效果。（  &lt;code&gt;portlet&lt;/code&gt;  和  &lt;code&gt;servlet&lt;/code&gt;  都是规范。servlet 运行在 servlet 容器中，例如  &lt;code&gt;Tomcat&lt;/code&gt;  。 &lt;code&gt;portlet&lt;/code&gt;  运行在  &lt;code&gt;portlet&lt;/code&gt;  容器中。）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application&lt;/code&gt; ：一个应用对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;websocket&lt;/code&gt; ：一个  &lt;code&gt;websocket&lt;/code&gt;  生命周期对应一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;strong&gt;仅限于在 WEB 应用中使用。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;自定义  &lt;code&gt;scope&lt;/code&gt; ：很少使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bean的创造&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的创造&#34;&gt;#&lt;/a&gt; bean 的创造&lt;/h2&gt;
&lt;h3 id=&#34;通过构造方法实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过构造方法实例化&#34;&gt;#&lt;/a&gt; 通过构造方法实例化&lt;/h3&gt;
&lt;p&gt;默认情况下， &lt;code&gt;Spring&lt;/code&gt;  会调用构造方法进行实例化&lt;/p&gt;
&lt;h3 id=&#34;通过简单工厂模式实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过简单工厂模式实例化&#34;&gt;#&lt;/a&gt; 通过简单工厂模式实例化&lt;/h3&gt;
&lt;p&gt;如下所示，需要申明一个带有&lt;strong&gt;静态方法的工厂类&lt;/strong&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StarFactory&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Star &lt;span class=&#34;hljs-title function_&#34;&gt;getStar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Star&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后申明  &lt;code&gt;bean&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;注意申明的bean的class属性为该工厂类而不是产品类，且通过factory-method属性申明哪个方法作为产品类的生产方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.SimpleStarFactory&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;factory-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;get&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后就可以通过  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  获得  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要为  &lt;code&gt;factory-method&lt;/code&gt;  转递参数，再  &lt;code&gt;bean&lt;/code&gt;  中通过  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  进行传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通过factory-bean实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过factory-bean实例化&#34;&gt;#&lt;/a&gt; 通过 factory-bean 实例化&lt;/h3&gt;
&lt;p&gt;如下所示，需要申明一个带有&lt;strong&gt;实例方法的工厂类&lt;/strong&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StarFactory&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Star &lt;span class=&#34;hljs-title function_&#34;&gt;getStar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Star&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后申明  &lt;code&gt;bean&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;首先要把该工厂类进行实例化，应为生产方法是实例方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;在产品类的bean中，在factory-bean属性中填入工厂类bean的id，表明对应的工厂类，其次使用factory-method属性申明生产产品类的生产方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;factory&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.StarFactory&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;star&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.Star&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;factory-bean&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;factory&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;factory-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;getStar&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后就可以通过  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  获得  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果要为  &lt;code&gt;factory-method&lt;/code&gt;  转递参数，再  &lt;code&gt;bean&lt;/code&gt;  中通过  &lt;code&gt;&amp;lt;constructor-arg&amp;gt;&lt;/code&gt;  进行传递&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通过factorybean接口实例化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过factorybean接口实例化&#34;&gt;#&lt;/a&gt; 通过 FactoryBean 接口实例化&lt;/h3&gt;
&lt;p&gt;如下所示，需要声明一个实现了  &lt;code&gt;FactoryBean&lt;/code&gt;  接口的工厂类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ProductFactory&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FactoryBean&lt;/span&gt;&amp;lt;Product&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//生产方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Product &lt;span class=&#34;hljs-title function_&#34;&gt;getObject&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Product&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//返回对应的类型&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Class&amp;lt;?&amp;gt; getObjectType() &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Product.class;&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//判断是否单例。注意该方法时默认方法，返回true，也就是单例，如果不想为单例，则返回false&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;isSingleton&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; FactoryBean.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.isSingleton();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后申明  &lt;code&gt;bean&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;直接申明该工厂类，即可创造出对应产品类&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;如果，需要引用产品类直接引用该bean即可&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean.ProductFactory&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后就可以通过  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;class&lt;/code&gt;  获得  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实例化  &lt;code&gt;FactoryBean&lt;/code&gt;  接口的被成为 工厂  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;beanfactory和factorybean的区别&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beanfactory和factorybean的区别&#34;&gt;#&lt;/a&gt; BeanFactory 和 FactoryBean 的区别&lt;/h4&gt;
&lt;h5 id=&#34;beanfactory&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#beanfactory&#34;&gt;#&lt;/a&gt; BeanFactory&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Spring IoC&lt;/code&gt;  容器的顶级对象， &lt;code&gt;BeanFactory&lt;/code&gt;  被翻译为 “Bean 工厂”，在  &lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;IoC&lt;/code&gt;  容器中，“Bean 工厂” 负责创建  &lt;code&gt;Bean&lt;/code&gt;  对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BeanFactory&lt;/code&gt;  是工厂。&lt;/p&gt;
&lt;h5 id=&#34;factorybean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#factorybean&#34;&gt;#&lt;/a&gt; FactoryBean&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;FactoryBean&lt;/code&gt; ：它是一个  &lt;code&gt;Bean&lt;/code&gt;  ，是一个能够&lt;strong&gt;辅助 Spring&lt;/strong&gt; 实例化其它  &lt;code&gt;Bean&lt;/code&gt;  对象的一个  &lt;code&gt;Bean&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;Spring&lt;/code&gt;  中， &lt;code&gt;Bean&lt;/code&gt;  可以分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一类：普通 &lt;code&gt;Bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二类：工厂  &lt;code&gt;Bean&lt;/code&gt; （记住：工厂  &lt;code&gt;Bean&lt;/code&gt;  也是一种  &lt;code&gt;Bean&lt;/code&gt;  ，只不过这种  &lt;code&gt;Bean&lt;/code&gt;  比较特殊，它可以辅助  &lt;code&gt;Spring&lt;/code&gt;  实例化其它  &lt;code&gt;Bean&lt;/code&gt;  对象。）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bean的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期&#34;&gt;#&lt;/a&gt; bean 的生命周期&lt;/h3&gt;
&lt;h4 id=&#34;什么是bean的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是bean的生命周期&#34;&gt;#&lt;/a&gt; 什么是 Bean 的生命周期&lt;/h4&gt;
&lt;p&gt;Spring 其实就是一个管理 Bean 对象的工厂。它负责对象的创建，对象的销毁等。&lt;/p&gt;
&lt;p&gt;所谓的生命周期就是：对象从创建开始到最终销毁的整个过程。&lt;/p&gt;
&lt;p&gt;什么时候创建 Bean 对象？创建 Bean 对象的前后会调用什么方法？Bean 对象什么时候销毁？Bean 对象的销毁前后调用什么方法？&lt;/p&gt;
&lt;h4 id=&#34;为什么要知道bean的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么要知道bean的生命周期&#34;&gt;#&lt;/a&gt; 为什么要知道 Bean 的生命周期&lt;/h4&gt;
&lt;p&gt;其实生命周期的本质是：&lt;strong&gt;在哪个时间节点上调用了哪个类的哪个方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们需要充分的了解在这个生命线上，都有哪些特殊的时间节点。只有我们知道了特殊的时间节点都在哪，到时我们才可以确定代码写到哪。我们可能需要在某个特殊的时间点上执行一段特定的代码，这段代码就可以放到这个节点上。当生命线走到这里的时候，自然会被调用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bean 生命周期的管理，可以参考  &lt;code&gt;Spring&lt;/code&gt;  的源码： &lt;strong&gt; &lt;code&gt;AbstractAutowireCapableBeanFactory&lt;/code&gt;  类的  &lt;code&gt;doCreateBean()&lt;/code&gt;  方法 。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;bean的生命周期之5步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期之5步&#34;&gt;#&lt;/a&gt; Bean 的生命周期之 5 步&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Bean&lt;/code&gt;  生命周期可以粗略的划分为五大步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步：实例化  &lt;code&gt;Bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二步： &lt;code&gt;Bean&lt;/code&gt;  属性赋值&lt;/li&gt;
&lt;li&gt;第三步：初始化  &lt;code&gt;Bean&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通过自定义一个方法进行初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;第四步：使用  &lt;code&gt;Bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第五步：销毁  &lt;code&gt;Bean&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;通过自定义一个方法进行销毁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;lifecycle5.png&#34; alt=&#34;bean生命周期之5步&#34;/&gt;
&lt;p&gt;我们来看下面这个类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//我们定义了一个类，该类含有两个特殊的方法，initBean用来初始化bean，destroyBean用来销毁bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第一步实例化bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第二步属性赋值&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s: &amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第四步使用bean&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;User&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;initBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步初始化bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;destroyBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第五步销毁bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义好这个类后，我们尝试将他注册为  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;光自定义初始化和摧毁方法不行，我们要让Spring知道这是哪些方法，这样Spring才能准确的回调他们&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.User&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;init-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;initBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;destroy-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;destroyBean&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们从  &lt;code&gt;ioc&lt;/code&gt;  容器中取出这个  &lt;code&gt;bean&lt;/code&gt;  然后打印这个  &lt;code&gt;bean&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    ConfigurableApplicationContext ioc= &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lifecycle.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(User.class);&lt;br&gt;    System.out.println(user);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调&lt;/span&gt;&lt;br&gt;    ioc.registerShutdownHook();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外，你将会看到以下五个生命周期步骤：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: 初始化&lt;br&gt;第四步: 使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;第五步: 销毁bean&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;bean的生命周期之7步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期之7步&#34;&gt;#&lt;/a&gt; Bean 的生命周期之 7 步&lt;/h4&gt;
&lt;p&gt;在以上的五步中，第三步是初始化 Bean，如果你还想在&lt;strong&gt;初始化前&lt;/strong&gt;和&lt;strong&gt;初始化后&lt;/strong&gt;添加代码，可以加入 **“Bean 后处理器”**。就形成了七个生命周期步骤。&lt;/p&gt;
&lt;img src=&#34;lifecycle7.png&#34; alt=&#34;bean生命周期之7步&#34;/&gt;
&lt;p&gt;我们重新创建一个  &lt;code&gt;LogBeanPostProcessor&lt;/code&gt;  类并实现  &lt;code&gt;BeanPostProcessor&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;LogBeanPostProcessor&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanPostProcessor&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第五步: BeanPostProcessor的after方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessAfterInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanPostProcessor的before方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessBeforeInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义好这个类后，我们尝试将他注册为  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;这将为这个xml文件代表的ioc容器创建一个全局的Bean后处理器，任何bean都会触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.LogBeanPostProcessor&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们从  &lt;code&gt;ioc&lt;/code&gt;  容器中取出  &lt;code&gt;user&lt;/code&gt;  然后打印这个  &lt;code&gt;bean&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    ConfigurableApplicationContext ioc= &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lifecycle.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(User.class);&lt;br&gt;    System.out.println(user);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调&lt;/span&gt;&lt;br&gt;    ioc.registerShutdownHook();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外，你将会看到以下七个生命周期步骤：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: BeanPostProcessor的before方法执行&lt;br&gt;第四步: 初始化&lt;br&gt;第五步: BeanPostProcessor的after方法执行&lt;br&gt;第六步使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;第七步: 销毁bean&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;bean的生命周期之10步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的生命周期之10步&#34;&gt;#&lt;/a&gt; Bean 的生命周期之 10 步&lt;/h4&gt;
&lt;p&gt;如果根据源码跟踪，可以划分更细粒度的步骤，我们通过  &lt;code&gt;*Aware&lt;/code&gt;  接口、 &lt;code&gt;InitializingBean&lt;/code&gt;  接口和  &lt;code&gt;DisposableBean&lt;/code&gt;  来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;*Aware&lt;/code&gt;  接口会在  &lt;code&gt;InitializingBean&lt;/code&gt;  接口之前执行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InitializingBean&lt;/code&gt;  接口会在初始方法调用前和  &lt;code&gt;BeanPostProcessor&lt;/code&gt;  的  &lt;code&gt;before&lt;/code&gt;  方法调用前执行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DisposableBean&lt;/code&gt;  接口会在销毁方法调用前和使用  &lt;code&gt;bean&lt;/code&gt;  执行。&lt;/p&gt;
&lt;img src=&#34;lifecycle10.png&#34; alt=&#34;bean生命周期之10步&#34;/&gt;
&lt;p&gt;仍然使用  &lt;code&gt;User&lt;/code&gt;  类：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanNameAware&lt;/span&gt;, BeanClassLoaderAware, BeanFactoryAware, InitializingBean, DisposableBean &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第一步: 实例化bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第二步: 属性赋值&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.printf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;%s: &amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第八步使用bean&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;User&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;initBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第六步: 初始化&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;destroyBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第十步: 销毁bean&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为BeanClassLoaderAware的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setBeanClassLoader&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ClassLoader classLoader)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanClassLoaderAware&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为BeanFactoryAware的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setBeanFactory&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(BeanFactory beanFactory)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanFactoryAware&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为BeanNameAware的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setBeanName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanNameAware&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为DisposableBean的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;destroy&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第九步: destroy执行&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//该方法为InitializingBean的方法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第五步: afterPropertiesSet执行&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;LogBeanPostProcessor&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanPostProcessor&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessAfterInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第七步: BeanPostProcessor的after方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessAfterInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;postProcessBeforeInitialization&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, String beanName)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeansException &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;第三步: BeanPostProcessor的before方法执行&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; BeanPostProcessor.&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.postProcessBeforeInitialization(bean, beanName);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;定义好这两个类后，我们尝试将他注册为  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;这将为这个xml文件代表的ioc容器创建一个全局的Bean后处理器，任何bean都会触发&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.LogBeanPostProcessor&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;光自定义初始化和摧毁方法不行，我们要让Spring知道这是哪些方法，这样Spring才能准确的回调他们&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.lifecycle.User&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;init-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;initBean&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;destroy-method&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;destroyBean&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们从  &lt;code&gt;ioc&lt;/code&gt;  容器中取出这个  &lt;code&gt;bean&lt;/code&gt;  然后打印这个  &lt;code&gt;bean&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    ConfigurableApplicationContext ioc= &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassPathXmlApplicationContext&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lifecycle.xml&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ioc.getBean(User.class);&lt;br&gt;    System.out.println(user);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//此方法用于关闭ioc容器，销毁方法只有在ioc容器关闭后才会回调&lt;/span&gt;&lt;br&gt;    ioc.registerShutdownHook();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外，你将会看到以下十个生命周期步骤：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: BeanNameAware&lt;br&gt;第三步: BeanClassLoaderAware&lt;br&gt;第三步: BeanFactoryAware&lt;br&gt;第四步: BeanPostProcessor的before方法执行&lt;br&gt;第五步: afterPropertiesSet执行&lt;br&gt;第六步: 初始化&lt;br&gt;第七步: BeanPostProcessor的after方法执行&lt;br&gt;第八步使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;第九步: destroy执行&lt;br&gt;第十步: 销毁bean&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了一系列的  &lt;code&gt;Aware&lt;/code&gt;  回调接口，让  &lt;code&gt;Bean&lt;/code&gt;  向容器表明它们需要某种基础设施的依赖性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;接口名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;注入的依赖性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ApplicationContextAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;声明  &lt;code&gt;ApplicationContext&lt;/code&gt; 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-factory-aware&#34;&gt;ApplicationContextAware 和 BeanNameAware&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ApplicationEventPublisherAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;封装了  &lt;code&gt;ApplicationContext&lt;/code&gt;  的 Event publisher 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#context-introduction&#34;&gt;ApplicationContex 的附加功能&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;BeanClassLoaderAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用来加载 Bean 类的类加载器（Class loader）。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-factory-class&#34;&gt;实例化 Bean&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;BeanFactoryAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;声明  &lt;code&gt;BeanFactory&lt;/code&gt; 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-beanfactory&#34;&gt;BeanFactory API&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;BeanNameAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;声明  &lt;code&gt;Bean&lt;/code&gt;  的名称。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#beans-factory-aware&#34;&gt;ApplicationContextAware 和 BeanNameAware&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;LoadTimeWeaverAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;定义了用于在加载时处理类定义的织入点。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#aop-aj-ltw&#34;&gt;在 Spring 框架中用 AspectJ 进行加载时织入（Load-time Weaving）&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;MessageSourceAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;配置解析消息的策略（支持参数化和国际化）。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#context-introduction&#34;&gt;ApplicationContext 的附加功能&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;NotificationPublisherAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Spring JMX notification publisher&lt;/code&gt; 。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/integration.html#jmx-notifications&#34;&gt;Notifications&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ResourceLoaderAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;配置的加载器用于低级别的资源访问。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/core.html#resources&#34;&gt;资源（Resources）&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ServletConfigAware&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;容器所运行的当前  &lt;code&gt;ServletConfig&lt;/code&gt; 。仅在 Web 感知的 Spring  &lt;code&gt;ApplicationContext&lt;/code&gt;  中有效。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;a href=&#34;https://Springdoc.cn/Spring/web.html#mvc&#34;&gt;Spring MVC&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;不同作用域的生命周期&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不同作用域的生命周期&#34;&gt;#&lt;/a&gt; 不同作用域的生命周期&lt;/h4&gt;
&lt;p&gt;对于  &lt;code&gt;singleton&lt;/code&gt;  作用域的  &lt;code&gt;Bean&lt;/code&gt; ， &lt;code&gt;Spring&lt;/code&gt;  能够精确地知道该  &lt;code&gt;Bean&lt;/code&gt;  何时被创建，何时初始化完成，以及何时被销毁；&lt;/p&gt;
&lt;p&gt;而对于  &lt;code&gt;prototype&lt;/code&gt;  作用域的  &lt;code&gt;Bean&lt;/code&gt;  ， &lt;code&gt;Spring&lt;/code&gt;  只负责创建，当容器创建了  &lt;code&gt;Bean&lt;/code&gt;  的实例并初始化后， &lt;code&gt;Bean&lt;/code&gt;  的实例就交给客户端代码管理， &lt;code&gt;Spring&lt;/code&gt;  容器将不再跟踪其生命周期。&lt;/p&gt;
&lt;p&gt;依然是上面的  &lt;code&gt;user&lt;/code&gt;  类，我们将这个类的作用域转换为  &lt;code&gt;prototype&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;第一步: 实例化bean&lt;br&gt;第二步: 属性赋值&lt;br&gt;第三步: BeanNameAware&lt;br&gt;第三步: BeanClassLoaderAware&lt;br&gt;第三步: BeanFactoryAware&lt;br&gt;第三步: ApplicationContextAware&lt;br&gt;第四步: BeanPostProcessor的before方法执行&lt;br&gt;第五步: afterPropertiesSet执行&lt;br&gt;第六步: 初始化&lt;br&gt;第七步: BeanPostProcessor的after方法执行&lt;br&gt;第八步: 使用bean: User&amp;#123;name=&amp;#x27;123&amp;#x27;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们看到只执行到了第八步，也就是说  &lt;code&gt;Spring&lt;/code&gt;  不再管理其的销毁程序。&lt;/p&gt;
&lt;h4 id=&#34;将自己实例化的对象加入到ioc容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#将自己实例化的对象加入到ioc容器&#34;&gt;#&lt;/a&gt; 将自己实例化的对象加入到 IoC 容器&lt;/h4&gt;
&lt;p&gt;可以通过  &lt;code&gt;getBeanFactory()&lt;/code&gt;  方法访问  &lt;code&gt;ApplicationContext&lt;/code&gt;  的  &lt;code&gt;BeanFactory&lt;/code&gt;  来实现，该方法返回  &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;  实现。 &lt;code&gt;DefaultListableBeanFactory&lt;/code&gt;  通过  &lt;code&gt;registerSingleton(..)&lt;/code&gt;  和  &lt;code&gt;registerBeanDefinition(..)&lt;/code&gt;  方法支持这种注册。&lt;/p&gt;
&lt;h3 id=&#34;bean的循环依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean的循环依赖&#34;&gt;#&lt;/a&gt; bean 的循环依赖&lt;/h3&gt;
&lt;p&gt;当我们创建  &lt;code&gt;bean&lt;/code&gt;  的时候可能会遇到这个问题：两个对象互相依赖了对方，即  &lt;code&gt;A&lt;/code&gt;  的属性包括  &lt;code&gt;B&lt;/code&gt;  ,  &lt;code&gt;B&lt;/code&gt;  的属性包括了  &lt;code&gt;A&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;我们创建下面两个类  &lt;code&gt;Wife&lt;/code&gt;  和  &lt;code&gt;Husband&lt;/code&gt;  类：&lt;/p&gt;
&lt;img src=&#34;huswife.png&#34; alt=&#34;Husband类和Wife类的关系&#34;&gt;
&lt;p&gt;由该图可知  &lt;code&gt;Husband&lt;/code&gt;  和  &lt;code&gt;Wife&lt;/code&gt;  构成了循环依赖&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Husband&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Wife wife;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// toString()方法重写时需要注意：不能直接输出wife，输出wife.getName()。要不然会出现递归导致的栈内存溢出错误。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Husband&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;, wife=&amp;quot;&lt;/span&gt; + wife.getName() +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Wife&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Husband husband;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// toString()方法重写时需要注意：不能直接输出husband，输出husband.getName()。要不然会出现递归导致的栈内存溢出错误。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Wife&amp;#123;&amp;quot;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name=&amp;#x27;&amp;quot;&lt;/span&gt; + name + &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;\&amp;#x27;&amp;#x27;&lt;/span&gt; +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;, husband=&amp;quot;&lt;/span&gt; + husband.getName() +&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;&amp;#125;&amp;#x27;&lt;/span&gt;;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们将其配置成  &lt;code&gt;bean&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;husband&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.cycle.bean.Husband&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;scope&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;singleton&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;wife&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;wife&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.cycle.bean.Wife&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;wife&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;scope&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;singleton&amp;quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;husband&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;husband&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过  &lt;code&gt;ioc&lt;/code&gt;  容器获取这两个  &lt;code&gt;bean&lt;/code&gt;  后，我们打印这两个类，结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Husband&amp;#123;name=&amp;#x27;hello&amp;#x27;, wife=world&amp;#125;&lt;br&gt;Wife&amp;#123;name=&amp;#x27;world&amp;#x27;, husband=hello&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可见这两个对象的属性都分配成功， &lt;code&gt;Spring&lt;/code&gt;  成功解决了循环依赖问题，为什么会这样呢？&lt;/p&gt;
&lt;p&gt;在上述情况下我们使用的是  &lt;code&gt;singleton&lt;/code&gt;  和  &lt;code&gt;set&lt;/code&gt;  注入的情况，下节将会回答这个问题。&lt;/p&gt;
&lt;h4 id=&#34;set注入的情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#set注入的情况&#34;&gt;#&lt;/a&gt; set 注入的情况&lt;/h4&gt;
&lt;h5 id=&#34;全部为singleton&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全部为singleton&#34;&gt;#&lt;/a&gt; 全部为 singleton&lt;/h5&gt;
&lt;p&gt;在此情况下  &lt;code&gt;Spring&lt;/code&gt;  将  &lt;code&gt;bean&lt;/code&gt;  的创建分成两个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Spring&lt;/code&gt;  会先将  &lt;code&gt;bean&lt;/code&gt;  实例化了出来，此时  &lt;code&gt;bean&lt;/code&gt;  的各个属性都没有赋值，处于 “曝光” 状态，意味着此时  &lt;code&gt;bean&lt;/code&gt;  已经可以被其他  &lt;code&gt;bean&lt;/code&gt;  知晓并使用。&lt;/li&gt;
&lt;li&gt;被创建出来的  &lt;code&gt;bean&lt;/code&gt;  通过  &lt;code&gt;setter&lt;/code&gt;  方法进行赋值。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，两个单例的  &lt;code&gt;bean&lt;/code&gt;  再进行属性赋值的时候全部都已经存在，所以才不会存在循环依赖的问题。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  官方文档如下解释说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当容器被创建时， &lt;code&gt;Spring&lt;/code&gt;  容器会验证每个  &lt;code&gt;Bean&lt;/code&gt;  的配置。然而，在实际创建  &lt;code&gt;Bean&lt;/code&gt;  之前， &lt;code&gt;Bean&lt;/code&gt;  的属性本身不会被设置。当容器被创建时，那些具有单例作用域并被设置为预实例化的  &lt;code&gt;Bean&lt;/code&gt; （默认）被创建。创建  &lt;code&gt;bean&lt;/code&gt;  有可能导致创建  &lt;code&gt;bean&lt;/code&gt;  图（graph），因为  &lt;code&gt;bean&lt;/code&gt;  的依赖关系和它的依赖关系（等等）被创建和分配。请注意，这些依赖关系之间的解析不匹配可能会出现得很晚 — 也就是说，在第一次创建受影响的  &lt;code&gt;Bean&lt;/code&gt;  时。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;单个为singleton&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#单个为singleton&#34;&gt;#&lt;/a&gt; 单个为 singleton&lt;/h5&gt;
&lt;p&gt;下面我们将  &lt;code&gt;wife bean&lt;/code&gt;  改为  &lt;code&gt;prototype&lt;/code&gt;  ，再次运行观察结果：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Husband&amp;#123;name=&amp;#x27;hello&amp;#x27;, wife=world&amp;#125;&lt;br&gt;Wife&amp;#123;name=&amp;#x27;world&amp;#x27;, husband=hello&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;仍然运行成功。可见，只要两个  &lt;code&gt;bean&lt;/code&gt;  的作用域有一个为单例即可解决循环依赖问题。&lt;/p&gt;
&lt;p&gt;我们知道作用域处于  &lt;code&gt;prototype&lt;/code&gt;  的  &lt;code&gt;bean&lt;/code&gt;  只有在被需要的时候才会被创建，所以当单例的  &lt;code&gt;bean&lt;/code&gt;  需要一个原型的  &lt;code&gt;bean&lt;/code&gt;  时，该原型的  &lt;code&gt;bean&lt;/code&gt;  才会被创建，而该原型  &lt;code&gt;bean&lt;/code&gt;  需要单例的  &lt;code&gt;bean&lt;/code&gt;  的时候，该单例  &lt;code&gt;bean&lt;/code&gt;  早已存在，所以循环依赖问题不会发生。&lt;/p&gt;
&lt;h5 id=&#34;全部为prototype&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全部为prototype&#34;&gt;#&lt;/a&gt; 全部为 prototype&lt;/h5&gt;
&lt;p&gt;作用域处于  &lt;code&gt;prototype&lt;/code&gt;  的  &lt;code&gt;bean&lt;/code&gt;  只有在被需要的时候才会被创建，且会返回不同的实例。我们以上面的  &lt;code&gt;Wife&lt;/code&gt;  和  &lt;code&gt;Husband&lt;/code&gt;  举例。&lt;/p&gt;
&lt;p&gt;所以当  &lt;code&gt;Wife&lt;/code&gt;  创建的时候，会去创建另一个  &lt;code&gt;Husband&lt;/code&gt;  ；而当  &lt;code&gt;Husband&lt;/code&gt;  创建时，会创建另一个  &lt;code&gt;Wife&lt;/code&gt;  。由于原型每次创建新的  &lt;code&gt;bean&lt;/code&gt;  的特性，每次创建的  &lt;code&gt;Husband&lt;/code&gt;  和  &lt;code&gt;Wife&lt;/code&gt;  都不相同，所以会一直创建下去。循环依赖问题并不会解决&lt;/p&gt;
&lt;p&gt;当我们将  &lt;code&gt;bean&lt;/code&gt;  的作用域全部改为  &lt;code&gt;prototype&lt;/code&gt;  ，再次运行时会发现，程序抛出了下面的异常：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;org.springframework.beans.factory.BeanCurrentlyInCreationException: &lt;br&gt;Error creating bean with name &amp;#x27;husband&amp;#x27;: &lt;br&gt;Requested bean is currently in creation: Is there an unresolvable circular reference?&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;代表着循环依赖问题并没有解决&lt;/p&gt;
&lt;h4 id=&#34;构造器注入的情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#构造器注入的情况&#34;&gt;#&lt;/a&gt; 构造器注入的情况&lt;/h4&gt;
&lt;p&gt;上面说过，只有实例化和注入的步骤分开的时候，循环依赖的情况才会解决，所以当使用构造器注入的时候，是实例化和注入同时进行，此时依赖的  &lt;code&gt;bean&lt;/code&gt;  并没有创建，所以也不存在能解决循环问题的办法。因此，构造器注入无法解决循环依赖问题。&lt;/p&gt;
&lt;p&gt;我们将注入改为构造器注入，运行后仍然会发现，程序抛出了  &lt;code&gt;BeanCreationException&lt;/code&gt;  异常：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;org.Springframework.beans.factory.BeanCreationException: &lt;br&gt;Error creating bean with name &amp;#x27;husband&amp;#x27; defined in class path resource [Spring.xml]: &lt;br&gt;Cannot resolve reference to bean &amp;#x27;wife&amp;#x27; while setting constructor argument&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;三级依赖解决循环依赖源码&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#三级依赖解决循环依赖源码&#34;&gt;#&lt;/a&gt; 三级依赖解决循环依赖 (源码)&lt;/h4&gt;
&lt;p&gt;注意解决循环依赖问题建立在：单例和  &lt;code&gt;set&lt;/code&gt;  注入的情况下。&lt;/p&gt;
&lt;p&gt;让我们进入： &lt;strong&gt; &lt;code&gt;AbstractAutowireCapableBeanFactory&lt;/code&gt;  类的  &lt;code&gt;doCreateBean()&lt;/code&gt;  方法&lt;/strong&gt; ，所有的单例  &lt;code&gt;bean&lt;/code&gt;  都在这里创建：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;doCreateBean&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String beanName, RootBeanDefinition mbd, &lt;span class=&#34;hljs-meta&#34;&gt;@Nullable&lt;/span&gt; Object[] args)&lt;/span&gt;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; BeanCreationException &amp;#123;&lt;br&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Instantiate the bean.下面就是在实例化bean&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;BeanWrapper&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;instanceWrapper&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (mbd.isSingleton()) &amp;#123;&lt;br&gt;			instanceWrapper = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.factoryBeanInstanceCache.remove(beanName);&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (instanceWrapper == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;			instanceWrapper = createBeanInstance(beanName, mbd, args);&lt;br&gt;		&amp;#125;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; instanceWrapper.getWrappedInstance(); &lt;span class=&#34;hljs-comment&#34;&gt;//该方法就是已经获得了实例化的bean，此时该bean的所有属性均没有被赋值&lt;/span&gt;&lt;br&gt;		Class&amp;lt;?&amp;gt; beanType = instanceWrapper.getWrappedClass(); &lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (beanType != NullBean.class) &amp;#123;&lt;br&gt;			mbd.resolvedTargetType = beanType;&lt;br&gt;		&amp;#125;&lt;br&gt;		......&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//注意下面的代码块&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// Eagerly cache singletons to be able to resolve circular references&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-comment&#34;&gt;// 急切地缓存单例以便能够解决循环依赖&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// even when triggered by lifecycle interfaces like BeanFactoryAware.&lt;/span&gt;&lt;br&gt;    	&lt;span class=&#34;hljs-comment&#34;&gt;// 甚至当被如BeanFactoryAware生命周期接口触发地时候&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;earlySingletonExposure&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (mbd.isSingleton() &amp;amp;&amp;amp; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.allowCircularReferences &amp;amp;&amp;amp;&lt;br&gt;				isSingletonCurrentlyInCreation(beanName)); &lt;span class=&#34;hljs-comment&#34;&gt;//判断是否要解决循环依赖问题&lt;/span&gt;&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (earlySingletonExposure) &amp;#123;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (logger.isTraceEnabled()) &amp;#123;&lt;br&gt;				logger.trace(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Eagerly caching bean &amp;#x27;&amp;quot;&lt;/span&gt; + beanName +&lt;br&gt;						&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;#x27; to allow for resolving potential circular references&amp;quot;&lt;/span&gt;);&lt;br&gt;			&amp;#125;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//解决循环依赖地问题地办法就在这里，该方法位于DefaultSingletonBeanRegistry，让我们进入这个方法.....&lt;/span&gt;&lt;br&gt;			addSingletonFactory(beanName, () -&amp;gt; getEarlyBeanReference(beanName, mbd, bean));&lt;br&gt;		&amp;#125;&lt;br&gt;		......&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;addSingletonFactory&lt;/code&gt;  方法如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;addSingletonFactory&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String beanName, ObjectFactory&amp;lt;?&amp;gt; singletonFactory)&lt;/span&gt; &amp;#123;&lt;br&gt;		Assert.notNull(singletonFactory, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Singleton factory must not be null&amp;quot;&lt;/span&gt;);&lt;br&gt;		&lt;span class=&#34;hljs-keyword&#34;&gt;synchronized&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects) &amp;#123;&lt;br&gt;			&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects.containsKey(beanName)) &amp;#123; &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;/** 我们重点看这个表达式，它将bean的名字和创建这个bean的工厂放进了一个map集合里，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;                也就是将这个对象提前曝光。这个map集合就是我们待会儿要说的三级缓存之一*/&lt;/span&gt;&lt;br&gt;				&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonFactories.put(beanName, singletonFactory);&lt;br&gt;				&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.remove(beanName);&lt;br&gt;				&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.registeredSingletons.add(beanName);&lt;br&gt;			&amp;#125;&lt;br&gt;		&amp;#125;&lt;br&gt;	&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面就是  &lt;code&gt;DefaultSingletonBeanRegistry&lt;/code&gt;  类的三个 map 集合属性，也就是–三级缓存&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** Cache of singleton factories: bean name to ObjectFactory. */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//三级缓存，单例工厂缓存。是bean名字和bean工厂的map集合。缓存创造对应bean的单例工厂，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, ObjectFactory&amp;lt;?&amp;gt;&amp;gt; singletonFactories = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** Cache of early singleton objects: bean name to bean instance. */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//二级缓存，预实例化对象的缓存。是bean名字和预实例化的bean的map集合。缓存对应的属性未赋值的bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; earlySingletonObjects = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;16&lt;/span&gt;);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** Cache of singleton objects: bean name to bean instance. */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//一级缓存，单例对象的缓存。是bean名字和实例化后的bean的map集合。缓存对应的属性已经赋值的bean，也就是对象本身了。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;String, Object&amp;gt; singletonObjects = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ConcurrentHashMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;256&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;了解了三级缓存后，我们来到该类的另外一个方法  &lt;code&gt;getSingleton&lt;/code&gt;  :&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;protected&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;getSingleton&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String beanName, &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; allowEarlyReference)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 下面就是解决循环依赖的办法&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Quick check for existing instance without full singleton lock&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//首先会从一级缓存中取该单例对象，看是否能取到&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;singletonObject&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects.get(beanName);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; isSingletonCurrentlyInCreation(beanName)) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//没有取到则去二级缓存取预实例化的单例对象&lt;/span&gt;&lt;br&gt;        singletonObject = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.get(beanName);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; allowEarlyReference) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;synchronized&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// Consistent creation of early reference within full singleton lock&lt;/span&gt;&lt;br&gt;                singletonObject = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonObjects.get(beanName);&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;              &lt;br&gt;                    singletonObject = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.get(beanName);&lt;br&gt;                    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonObject == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//最终都没有的话去三级缓存中去该对象的bean工厂&lt;/span&gt;&lt;br&gt;                        ObjectFactory&amp;lt;?&amp;gt; singletonFactory = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonFactories.get(beanName);&lt;br&gt;                        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (singletonFactory != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//然后通过该bean工厂回去对应的bean&lt;/span&gt;&lt;br&gt;                            singletonObject = singletonFactory.getObject();&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//加入二级缓存&lt;/span&gt;&lt;br&gt;                            &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.earlySingletonObjects.put(beanName, singletonObject);&lt;br&gt;                        &lt;span class=&#34;hljs-comment&#34;&gt;//随后将该工厂移除&lt;/span&gt;&lt;br&gt;                            &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.singletonFactories.remove(beanName);&lt;br&gt;                        &amp;#125;&lt;br&gt;                    &amp;#125;&lt;br&gt;                &amp;#125;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; singletonObject;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;基于注解的ioc开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于注解的ioc开发&#34;&gt;#&lt;/a&gt; 基于注解的 Ioc 开发&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了注解 + 扫描的方式来替代  &lt;code&gt;xml&lt;/code&gt;  配置&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;现在让我们创建一个注解  &lt;code&gt;@Component&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.TYPE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Component &amp;#123;&lt;br&gt;    String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//将这个注解加到一个类上去&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component(&amp;quot;user&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果当我获得了这个类的包名并且想让标注了这个注解的类能被实例化，并添加至一个 map 集合里，那我们应该怎么做？答案是使用反射：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testComponentScan&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;packageName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.bean&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//包名&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;packagePath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; packageName.replaceAll(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\\.&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//将包名改成路径&lt;/span&gt;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ClassLoader.getSystemClassLoader().getResource(packagePath);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; resource.getPath();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(path); &lt;span class=&#34;hljs-comment&#34;&gt;//获得磁盘路径的File对象&lt;/span&gt;&lt;br&gt;        File[] files = file.listFiles(); &lt;span class=&#34;hljs-comment&#34;&gt;//查找该路径下的所有文件&lt;/span&gt;&lt;br&gt;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//循环遍历&lt;/span&gt;&lt;br&gt;        Arrays.stream(files).forEach(f -&amp;gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;className&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; packageName + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; + f.getName().split(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\\.&amp;quot;&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]; &lt;span class=&#34;hljs-comment&#34;&gt;//获得类的全限定名&lt;/span&gt;&lt;br&gt;            Class&amp;lt;?&amp;gt; aClass = &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;                aClass = Class.forName(className); &lt;span class=&#34;hljs-comment&#34;&gt;//获得该类的字节码对象&lt;/span&gt;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (aClass.isAnnotationPresent(Component.class)) &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//判断是否标注了注解，标注了注解就通过反射实例化&lt;/span&gt;&lt;br&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;annotation&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; aClass.getAnnotation(Component.class);&lt;br&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; annotation.value(); &lt;span class=&#34;hljs-comment&#34;&gt;//获得注解的值&lt;/span&gt;&lt;br&gt;                    Constructor&amp;lt;?&amp;gt; constructor = aClass.getConstructor();&lt;br&gt;                    &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;target&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; constructor.newInstance(); &lt;span class=&#34;hljs-comment&#34;&gt;//实例化&lt;/span&gt;&lt;br&gt;                    map.put(value,target); &lt;span class=&#34;hljs-comment&#34;&gt;//添加到一个map集合里&lt;/span&gt;&lt;br&gt;                &amp;#125;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e)&amp;#123;&lt;br&gt;                e.printStackTrace();&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;);&lt;br&gt;        System.out.println(map); &lt;span class=&#34;hljs-comment&#34;&gt;//打印集合&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&amp;#123;user=com.jhy.bean.User@e580929&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你将这个注解添加至包下的更多类上，那么 map 结合中将会包含所有被标注了这个注解的实例。&lt;/p&gt;
&lt;p&gt;如上就是  &lt;code&gt;IoC&lt;/code&gt;  的注解开发的原理：扫描包下的所有类，将所有标注了指定注解的类通过反射调用进行实例化。&lt;/p&gt;
&lt;h3 id=&#34;注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解&#34;&gt;#&lt;/a&gt; 注解&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了四个注解来进行注解开发：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;/code&gt; ：注解普通的类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Controller&lt;/code&gt; ：注解表示层的类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Service&lt;/code&gt; ：注解业务层的类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Repository&lt;/code&gt; ：注解数据访问层的类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Indexed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Component &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * The value may indicate a suggestion for a logical component name,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * to be turned into a Spring bean name in case of an autodetected component.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt; the suggested component name, if any (or empty String otherwise)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Controller &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Alias for &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Component#value&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Service &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Alias for &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Component#value&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Repository &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Alias for &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@link&lt;/span&gt; Component#value&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;除  &lt;code&gt;@Conponent&lt;/code&gt;  的三个注解都被  &lt;code&gt;@Componet&lt;/code&gt;  注解了，因此其余三个注解都是  &lt;code&gt;@Component&lt;/code&gt;  的衍生注解，功能一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上述注解的  &lt;code&gt;value()&lt;/code&gt;  属性代表该类实例化后的  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;name&lt;/code&gt;  ，如果省略，则以该类的首字母小写的类名作为实例化后的  &lt;code&gt;id&lt;/code&gt;  或者  &lt;code&gt;name&lt;/code&gt;  。&lt;/p&gt;
&lt;h4 id=&#34;使用注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用注解&#34;&gt;#&lt;/a&gt; 使用注解&lt;/h4&gt;
&lt;p&gt;前面提到基于注解的  &lt;code&gt;IoC&lt;/code&gt;  开发时采用的扫描 + 反射的原理进行的。所以，注解存在，下面我们来进行扫描：&lt;/p&gt;
&lt;p&gt;如果使用  &lt;code&gt;xml&lt;/code&gt;  进行扫描，就要使用  &lt;code&gt;context&lt;/code&gt;  命名空间下的标签了&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt; &lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:context&lt;/span&gt; = &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.Springframework.org/schema/beans &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/beans/Spring-beans.xsd &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.Springframework.org/schema/context http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	使用context确保下面的约束存在&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xmlns:context = &amp;quot;http://www.Springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 xsi:schemaLocation =  &amp;quot;http://www.Springframework.org/schema/context &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;							http://www.Springframework.org/schema/context/Spring-context.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	component-scan专门用来进行扫描&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	base-package则为扫描的包的范围，如果要扫描多个包，可以用逗号，分号，空格等进行分割&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package则为扫描的包&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.anno.beans&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如果你想选择性实例化一些Bean，可以禁用默认的包扫描过滤器：use-default-filters=&amp;quot;false“，use-default-filters默认是true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	然后自己去设计自定义的包含过滤器：&amp;lt;context:include-filter&amp;gt;用来指定包含的过滤器，type指定包含策略，expression指定策略的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如下的内容表示将会让被@Repository注解的类注册为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	请注意：&amp;lt;context:include-filter&amp;gt;必须和use-default-filters=&amp;quot;false&amp;quot;使用才会生效&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package则为扫描的包&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.anno.beans&amp;quot;&lt;/span&gt;  &lt;span class=&#34;hljs-attr&#34;&gt;use-default-filters&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	 &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:include-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;annotation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.Springframework.stereotype.Repository&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如果你想选择性实例化一些Bean，也可以选择自定义排除过滤器，排除过滤器和use-default-filters=&amp;quot;true&amp;quot;一起工作&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	当然，use-default-filters默认为true，所以可以不写&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	&amp;lt;context:exclude-filter&amp;gt;排除过滤器 type指定排除策略，expression指定策略的详细信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	如下的内容表示不会将被@Service标注的类注解为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package则为扫描的包&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.anno.beans&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    	 &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:exclude-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;annotation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.Springframework.stereotype.Service&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如下为排除过滤器和包含过滤器的一些详细信息：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Filter Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;示例表达式&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;注解 (annotation) (默认)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example.SomeAnnotation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个注解在目标组件中的类型级别是 &lt;em&gt;present&lt;/em&gt; 或 &lt;em&gt;meta-present&lt;/em&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可指定 (assignable)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example.SomeClass&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;目标组件可分配给（继承或实现）的一个类（或接口）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;aspectj&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example..*Service+&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;要被目标组件匹配的 AspectJ type 表达式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;regex&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org\.example\.Default.*&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;一个与目标组件的类名相匹配的 regex expression。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;自定义 (custom)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.example.MyTypeFilter&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;org.Springframework.core.type.TypeFilter&lt;/code&gt;  接口的自定义实现。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;自动装配&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自动装配&#34;&gt;#&lt;/a&gt; 自动装配&lt;/h4&gt;
&lt;p&gt;与  &lt;code&gt;xml&lt;/code&gt;  的自动装配一样，注解式开发也提供了用于自动装配的注解&lt;/p&gt;
&lt;h5 id=&#34;value&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#value&#34;&gt;#&lt;/a&gt; @Value&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt;  用于简单类型的自动装配：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.ANNOTATION_TYPE&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//可以注解：属性、方法、参数、注解&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Value &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * The actual value expression such as &amp;lt;code&amp;gt;#&amp;#123;systemProperties.myProp&amp;#125;&amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * or property placeholder such as &amp;lt;code&amp;gt;$&amp;#123;my.app.myProp&amp;#125;&amp;lt;/code&amp;gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//代表传入的简单类型字面值&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;123&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;789&amp;quot;)&lt;/span&gt; String name)&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//通过构造器初始化&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;456&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@Value&lt;/code&gt; ：可以出现在：属性、构造器参数和  &lt;code&gt;setter&lt;/code&gt;  方法上。注意当  &lt;code&gt;@Value&lt;/code&gt;  出现在属性上时，不需要  &lt;code&gt;setter&lt;/code&gt;  方法，因为反射的机理，导致能通过反射拿到值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;autowired和qualifier&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#autowired和qualifier&#34;&gt;#&lt;/a&gt; @Autowired 和 @Qualifier&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;  用来注解 “非简单类型”--  &lt;code&gt;Spring&lt;/code&gt;  所认为的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//能注解：构造器、方法、参数、属性、注解&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Autowired &amp;#123;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * Declares whether the annotated dependency is required.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 * &amp;lt;p&amp;gt;Defaults to &amp;#123;&lt;span class=&#34;hljs-doctag&#34;&gt;@code&lt;/span&gt; true&amp;#125;.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	 */&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;required&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//该属性代表该属性是否需要，默认为true则代表需要，也就是没找到能够注入的bean则会报错，如果为false则不会&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; UserDao userDao;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt; UserDao userDao)&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//通过构造器实例化&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.userDao = userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; UserDao &lt;span class=&#34;hljs-title function_&#34;&gt;getUserDao&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setUserDao&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt; UserDao userDao)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.userDao = userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;saveUser&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        userDao.saveUser();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;特别的，当属性的名字和构造方法的参数名相同，且只有一个构造方法，那么不使用  &lt;code&gt;@Autowired&lt;/code&gt;  也能完成自动装配：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; UserDao userDao;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;UserService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(UserDao userDao)&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;//通过构造器实例化&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.userDao = userDao;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@Autowired&lt;/code&gt;  能够注解在：属性、构造方法、参数、 &lt;code&gt;setter&lt;/code&gt;  方法。且当  &lt;code&gt;@Autowired&lt;/code&gt;  出现在属性上时，同样也不需要  &lt;code&gt;setter&lt;/code&gt;  方法。&lt;/p&gt;
&lt;p&gt;且注意  &lt;code&gt;@Autowired&lt;/code&gt;  默认只能使用  &lt;code&gt;byType&lt;/code&gt;  查找  &lt;code&gt;bean&lt;/code&gt;  ，所以当容器中有多个相同类型的  &lt;code&gt;bean&lt;/code&gt;  出现时，单使用  &lt;code&gt;@Autowired&lt;/code&gt;  会报错。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;于是如果你想让  &lt;code&gt;@Autowired&lt;/code&gt;  根据  &lt;code&gt;byName&lt;/code&gt;  的方式查找  &lt;code&gt;bean&lt;/code&gt;  的话，那么要和  &lt;code&gt;@Qualifier&lt;/code&gt;  进行搭配使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Qualifier&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//能够注解属性、方法、参数、类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Inherited&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Qualifier &amp;#123;&lt;br&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//代表某个bean的id&lt;/span&gt;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Qualifier(&amp;quot;userDaoMysql&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; IUerDao userDao;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这样就会根据名字去查找  &lt;code&gt;id&lt;/code&gt;  为  &lt;code&gt;userDaoMysql&lt;/code&gt;  的  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;或者如果你仍然想使用  &lt;code&gt;byType&lt;/code&gt;  的方式查找那么可以使用  &lt;code&gt;@Primary&lt;/code&gt;  注解&lt;/p&gt;
&lt;h5 id=&#34;primary&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#primary&#34;&gt;#&lt;/a&gt; @Primary&lt;/h5&gt;
&lt;p&gt;因为按类型自动注入可能会导致多个候选者，所以经常需要对选择过程进行更多的控制。实现这一目标的方法之一是使用  &lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;@Primary&lt;/code&gt;  注解。 &lt;code&gt;@Primary&lt;/code&gt;  表示，当多个 &lt;code&gt;bean&lt;/code&gt;  是自动注入到一个单值（ &lt;code&gt;single value&lt;/code&gt; ）依赖的候选者时，应该优先考虑一个特定的  &lt;code&gt;bean&lt;/code&gt; 。如果在候选者中正好有一个主要（ &lt;code&gt;primary&lt;/code&gt; ） &lt;code&gt;bean&lt;/code&gt;  存在，它就会成为自动注入的值。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;ElementType.TYPE, ElementType.METHOD&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//可以标注类型、方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Primary &amp;#123;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;resource&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#resource&#34;&gt;#&lt;/a&gt; @Resource&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Resource&lt;/code&gt;  注解也可以完成非简单类型注入。他有以下的特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Resource&lt;/code&gt;  注解是  &lt;code&gt;JDK&lt;/code&gt;  扩展包中的，也就是说属于  &lt;code&gt;JDK&lt;/code&gt;  的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250 标准中制定的注解类型。JSR 是 Java 规范提案。)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;@Resource&lt;/code&gt;  注解默认根据名称装配  &lt;code&gt;byName&lt;/code&gt;  ，未指定  &lt;code&gt;name&lt;/code&gt;  时，使用属性名作为  &lt;code&gt;name&lt;/code&gt;  。通过  &lt;code&gt;name&lt;/code&gt;  找不到的话会自动启动通过类型  &lt;code&gt;byType&lt;/code&gt;  装配。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Resource&lt;/code&gt;  注解用在属性上、 &lt;code&gt;setter&lt;/code&gt;  方法上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于  &lt;code&gt;oracle&lt;/code&gt;  在  &lt;code&gt;jdk9&lt;/code&gt;  的时候将  &lt;code&gt;java ee&lt;/code&gt;  捐献给了  &lt;code&gt;Apache&lt;/code&gt;  基金会，并且改名  &lt;code&gt;jartarka ee&lt;/code&gt;  ，所以引入如下依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation-api&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.1&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;@Resource&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(&amp;#123;TYPE, FIELD, METHOD&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//能注解类型、属性、方法&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Repeatable(Resources.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Resource &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * The JNDI name of the resource.  For field annotations,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * the default is the field name.  For method annotations,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * the default is the JavaBeans property name corresponding&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * to the method.  For class annotations, there is no default&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * and this must be specified.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    String &lt;span class=&#34;hljs-title function_&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//name属性用来接受bean的名称&lt;/span&gt;&lt;br&gt;    ......&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;全注解式开发&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#全注解式开发&#34;&gt;#&lt;/a&gt; 全注解式开发&lt;/h3&gt;
&lt;p&gt;通过配置类取代  &lt;code&gt;xml&lt;/code&gt;  文件&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.Springframework.context.annotation.ComponentScan;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.Springframework.context.annotation.ComponentScans;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.Springframework.context.annotation.Configuration;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//代表此类为一个配置类。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ComponentScan(&amp;#123;&amp;quot;com.jhy.Spring6.dao&amp;quot;, &amp;quot;com.jhy.Spring6.service&amp;quot;&amp;#125;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//扫描包结构&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Spring6Configuration&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;  的源码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.TYPE)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Documented&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Component&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//@Configuration 被 @Component注解，代表该注解表示的类也会被注册为bean&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Configuration &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-meta&#34;&gt;@AliasFor(annotation = Component.class)&lt;/span&gt;&lt;br&gt;	String &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;//bean的名称&lt;/span&gt;&lt;br&gt;    ......&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之前的  &lt;code&gt;ClassPathXmlApplicationContext&lt;/code&gt;  也被  &lt;code&gt;AnnotationConfigApplicationContext&lt;/code&gt;  取代：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;ApplicationContext&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ioc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AnnotationConfigApplicationContext&lt;/span&gt;(MyConfiguration.class); &lt;span class=&#34;hljs-comment&#34;&gt;//MyConfiguration.class为配置类的字节码对象&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;基于java的容器配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于java的容器配置&#34;&gt;#&lt;/a&gt; 基于 Java 的容器配置&lt;/h3&gt;
&lt;p&gt;上面我们介绍了如何通过配置类的方式取代  &lt;code&gt;xml&lt;/code&gt;  文件，那么下面我们介绍如何通过配置类配置  &lt;code&gt;bean&lt;/code&gt;  以及一些额外信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;Java&lt;/code&gt;  配置支持的核心工件是  &lt;code&gt;@Configuration&lt;/code&gt;  注解的类和  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt;  注解用来表示一个方法实例化、配置和初始化了一个新的对象，由  &lt;code&gt;Spring IoC&lt;/code&gt;  容器管理。 &lt;code&gt;@Bean&lt;/code&gt;  注解的作用与  &lt;code&gt;&amp;lt;bean&amp;gt;&lt;/code&gt;  元素的作用相同。你可以在任何  &lt;code&gt;Spring&lt;/code&gt;   &lt;code&gt;@Component&lt;/code&gt;  中使用  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法。然而，它们最常被用于  &lt;code&gt;@Configuration&lt;/code&gt;   &lt;code&gt;bean&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;用  &lt;code&gt;@Configuration&lt;/code&gt;  来注解一个类，表明它的主要目的是作为  &lt;code&gt;bean&lt;/code&gt;  定义的来源。此外，  &lt;code&gt;@Configuration&lt;/code&gt;  类允许通过调用同一个类中的其他  &lt;code&gt;@Bean&lt;/code&gt;  方法来定义  &lt;code&gt;bean&lt;/code&gt;  间的依赖关系。最简单的  &lt;code&gt;@Configuration&lt;/code&gt;  类如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; MyServiceImpl &lt;span class=&#34;hljs-title function_&#34;&gt;myService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面的  &lt;code&gt;AppConfig&lt;/code&gt;  类等同于下面的 Spring  &lt;code&gt;&amp;lt;beans/&amp;gt;&lt;/code&gt;  XML。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;myService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.acme.services.MyServiceImpl&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;使用bean注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用bean注解&#34;&gt;#&lt;/a&gt; 使用 @Bean 注解&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt;  是一个方法级注解，是 XML  &lt;code&gt;&amp;lt;bean/&amp;gt;&lt;/code&gt;  元素的直接类似物。该注解支持  &lt;code&gt;&amp;lt;bean/&amp;gt;&lt;/code&gt;  所提供的一些属性，例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8E%A5%E6%94%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E5%9B%9E%E8%B0%83&#34;&gt;init-method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8E%A5%E6%94%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E5%9B%9E%E8%B0%83&#34;&gt;destroy-method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[autowiring](#Bean 依赖)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在  &lt;code&gt;@Configuration&lt;/code&gt;  或  &lt;code&gt;@Component&lt;/code&gt;  注解的类中使用  &lt;code&gt;@Bean&lt;/code&gt;  注解。&lt;/p&gt;
&lt;h5 id=&#34;声明一个-bean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明一个-bean&#34;&gt;#&lt;/a&gt; 声明一个 Bean&lt;/h5&gt;
&lt;p&gt;为了声明一个 Bean，你可以用  &lt;code&gt;@Bean&lt;/code&gt;  注解来注解一个方法。你可以用这个方法在  &lt;code&gt;ApplicationContext&lt;/code&gt;  中注册一个 Bean 定义，该类型被指定为该方法的返回值。默认情况下，Bean 的名字和方法的名字是一样的。下面的例子显示了一个  &lt;code&gt;@Bean&lt;/code&gt;  方法声明。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; TransferServiceImpl &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;前面的配置完全等同于下面的 Spring XML。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transferService&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.acme.TransferServiceImpl&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这两个声明使  &lt;code&gt;ApplicationContext&lt;/code&gt;  中一个名为  &lt;code&gt;transferService&lt;/code&gt;  的 Bean 可用，并与  &lt;code&gt;TransferServiceImpl&lt;/code&gt;  类型的对象实例绑定，正如下面的文字图片所示：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;transferService -&amp;gt; com.acme.TransferServiceImpl&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以使用  &lt;code&gt;default&lt;/code&gt;  方法来定义  &lt;code&gt;bean&lt;/code&gt; 。这允许通过在默认方法上实现带有  &lt;code&gt;bean&lt;/code&gt;  定义的接口来组成  &lt;code&gt;bean&lt;/code&gt;  配置。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BaseConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; TransferServiceImpl &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BaseConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以用一个接口（或基类）的返回类型来声明你的  &lt;code&gt;@Bean&lt;/code&gt;  方法，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; TransferService &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;bean-依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean-依赖&#34;&gt;#&lt;/a&gt; Bean 依赖&lt;/h5&gt;
&lt;p&gt;一个  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法可以有任意数量的参数，描述构建该  &lt;code&gt;bean&lt;/code&gt;  所需的依赖关系。例如，如果我们的  &lt;code&gt;TransferService&lt;/code&gt;  需要一个  &lt;code&gt;AccountRepository&lt;/code&gt; ，我们可以用一个方法参数将这种依赖关系具体化，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; TransferService &lt;span class=&#34;hljs-title function_&#34;&gt;transferService&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(AccountRepository accountRepository)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransferServiceImpl&lt;/span&gt;(accountRepository);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解析机制与基于构造函数的依赖注入基本相同。&lt;/p&gt;
&lt;h5 id=&#34;接收生命周期的回调&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#接收生命周期的回调&#34;&gt;#&lt;/a&gt; 接收生命周期的回调&lt;/h5&gt;
&lt;p&gt;任何用  &lt;code&gt;@Bean&lt;/code&gt;  注解定义的类都支持常规的生命周期回调。 &lt;code&gt;@Bean&lt;/code&gt;  注解支持指定任意的初始化和销毁回调方法，就像  &lt;code&gt;Spring XML&lt;/code&gt;  在  &lt;code&gt;bean&lt;/code&gt;  元素上的  &lt;code&gt;init-method&lt;/code&gt;  和  &lt;code&gt;destroy-method&lt;/code&gt;  属性一样，如下例所示：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// initialization logic&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanTwo&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;cleanup&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// destruction logic&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(initMethod = &amp;quot;init&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanOne &lt;span class=&#34;hljs-title function_&#34;&gt;beanOne&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(destroyMethod = &amp;quot;cleanup&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanTwo &lt;span class=&#34;hljs-title function_&#34;&gt;beanTwo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanTwo&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况下，用  &lt;code&gt;Java&lt;/code&gt;  配置定义的具有  &lt;code&gt;public&lt;/code&gt;  的  &lt;code&gt;close&lt;/code&gt;  或  &lt;code&gt;shutdown&lt;/code&gt;  方法的 Bean 会自动被列入销毁回调。如果你有一个  &lt;code&gt;public&lt;/code&gt;  的  &lt;code&gt;close&lt;/code&gt;  或  &lt;code&gt;shutdown&lt;/code&gt;  方法，并且你不希望它在容器关闭时被调用，你可以在你的  &lt;code&gt;bean&lt;/code&gt;  定义中添加  &lt;code&gt;@Bean(destroyMethod = &amp;quot;&amp;quot;)&lt;/code&gt;  来禁用默认  &lt;code&gt;(inferred)&lt;/code&gt;  模式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就前文例子中的  &lt;code&gt;BeanOne&lt;/code&gt;  而言，在构造过程中直接调用  &lt;code&gt;init()&lt;/code&gt;  方法同样有效，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanOne &lt;span class=&#34;hljs-title function_&#34;&gt;beanOne&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;BeanOne&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;beanOne&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt;();&lt;br&gt;        beanOne.init();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; beanOne;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;指定-bean-的-scope&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#指定-bean-的-scope&#34;&gt;#&lt;/a&gt; 指定 Bean 的 Scope&lt;/h5&gt;
&lt;p&gt;Spring 包括  &lt;code&gt;@Scope&lt;/code&gt;  注解，这样你就可以指定 Bean 的 scope。&lt;/p&gt;
&lt;h6 id=&#34;使用-scope-注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用-scope-注解&#34;&gt;#&lt;/a&gt; 使用  &lt;code&gt;@Scope&lt;/code&gt;  注解&lt;/h6&gt;
&lt;p&gt;你可以指定你用  &lt;code&gt;@Bean&lt;/code&gt;  注解定义的  &lt;code&gt;bean&lt;/code&gt;  应该有一个特定的  &lt;code&gt;scope&lt;/code&gt; 。你可以指定任何一个标准  &lt;code&gt;scope&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;默认的  &lt;code&gt;scope&lt;/code&gt;  是  &lt;code&gt;singleton&lt;/code&gt; ，但你可以用  &lt;code&gt;@Scope&lt;/code&gt;  注解来覆盖它，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyConfiguration&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Scope(&amp;quot;prototype&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Encryptor &lt;span class=&#34;hljs-title function_&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;自定义bean的命名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#自定义bean的命名&#34;&gt;#&lt;/a&gt; 自定义 Bean 的命名&lt;/h5&gt;
&lt;p&gt;默认情况下，配置类使用  &lt;code&gt;@Bean&lt;/code&gt;  方法的名称作为结果 Bean 的名称。然而，这个功能可以通过  &lt;code&gt;name&lt;/code&gt;  属性来重写，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(&amp;quot;myThing&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Thing &lt;span class=&#34;hljs-title function_&#34;&gt;thing&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Thing&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;bean-别名&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean-别名&#34;&gt;#&lt;/a&gt; Bean 别名&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;@Bean&lt;/code&gt;  注解的  &lt;code&gt;name&lt;/code&gt;  属性接受一个  &lt;code&gt;String&lt;/code&gt;  数组来实现这一目的。下面的例子展示了如何为一个  &lt;code&gt;bean&lt;/code&gt;  设置若干别名。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean(&amp;#123;&amp;quot;dataSource&amp;quot;, &amp;quot;subsystemA-dataSource&amp;quot;, &amp;quot;subsystemB-dataSource&amp;quot;&amp;#125;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; DataSource &lt;span class=&#34;hljs-title function_&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// instantiate, configure and return DataSource bean...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;bean-描述description&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#bean-描述description&#34;&gt;#&lt;/a&gt; Bean 描述（Description）&lt;/h5&gt;
&lt;p&gt;有时，为  &lt;code&gt;bean&lt;/code&gt;  提供更详细的文本描述是有帮助的。为了给  &lt;code&gt;@Bean&lt;/code&gt;  添加描述，你可以使用  &lt;code&gt;@Description&lt;/code&gt;  注解，如下图所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Description(&amp;quot;Provides a basic example of a bean&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Thing &lt;span class=&#34;hljs-title function_&#34;&gt;thing&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Thing&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;使用configuration注解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用configuration注解&#34;&gt;#&lt;/a&gt; 使用 @Configuration 注解&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;@Configuration&lt;/code&gt;  是一个类级注解，表示一个对象是 Bean 定义的来源。 &lt;code&gt;@Configuration&lt;/code&gt;  类通过  &lt;code&gt;@Bean&lt;/code&gt;  注解的方法声明 bean。对  &lt;code&gt;@Configuration&lt;/code&gt;  类上的  &lt;code&gt;@Bean&lt;/code&gt;  方法的调用也可以用来定义 bean 间的依赖关系。&lt;/p&gt;
&lt;h5 id=&#34;注入bean间的依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注入bean间的依赖&#34;&gt;#&lt;/a&gt; 注入 bean 间的依赖&lt;/h5&gt;
&lt;p&gt;当 Bean 相互之间有依赖关系时，表达这种依赖关系就像让一个  &lt;code&gt;bean&lt;/code&gt;  方法调用另一个一样简单，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanOne &lt;span class=&#34;hljs-title function_&#34;&gt;beanOne&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanOne&lt;/span&gt;(beanTwo());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; BeanTwo &lt;span class=&#34;hljs-title function_&#34;&gt;beanTwo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanTwo&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;使用componentscan&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用componentscan&#34;&gt;#&lt;/a&gt; 使用 @ComponentScan&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ComponentScan(basePackages = &amp;quot;org.example&amp;quot;, //扫描的包&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        includeFilters = @Filter(type = FilterType.REGEX, pattern = &amp;quot;.*Stub.*Repository&amp;quot;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        excludeFilters = @Filter(Repository.class))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AppConfig&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面的列表显示了等效的 XML。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;base-package&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.example&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:include-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;regex&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.*Stub.*Repository&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:exclude-filter&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;type&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;annotation&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                &lt;span class=&#34;hljs-attr&#34;&gt;expression&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.Springframework.stereotype.Repository&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;context:component-scan&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#代理&#34;&gt;#&lt;/a&gt; 代理&lt;/h1&gt;
&lt;p&gt;代理模式术语：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代理类：包装目标类的类&lt;/li&gt;
&lt;li&gt;目标类：被包装的类&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过代理类包装目标类，代理类对客户端完全透明。客户端访问代理类，代理类再访问目标类，外界无法访问目标类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GoF&lt;/code&gt;  23 种设计模式之一的代理模式可用来进行一些功能操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现代码增强。目标对象只需要关注业务代码，额外的操作可以在代理对象中实现。&lt;/li&gt;
&lt;li&gt;提高安全性。在完全进入目标对象前，由代理对象进行一系列的安全判断，以防安全问题或错误出现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;java&lt;/code&gt;  中代理可分为静态代理和动态代理。代理必须通过接口完成。&lt;/p&gt;
&lt;h2 id=&#34;静态代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#静态代理&#34;&gt;#&lt;/a&gt; 静态代理&lt;/h2&gt;
&lt;p&gt;现在有一个接口  &lt;code&gt;OrderService&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 生成订单&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 查看订单详情&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 修改订单&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下是它的实现类  &lt;code&gt;OrderServiceImpl&lt;/code&gt;  也就是目标类，用于订单的一些操作：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceImpl&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;订单已生成&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;订单信息如下：******&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;订单已修改&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下就为目标类的代理类  &lt;code&gt;OrderServiceProxy&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceProxy&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt;&amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;// 代理对象&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 目标对象&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; OrderService orderService;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 通过构造方法将目标对象传递给代理对象&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;OrderServiceProxy&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(OrderService orderService)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.orderService = orderService;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        orderService.generate();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        orderService.detail();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        orderService.modify();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可见代理类对目标类进行了一些功能增强，且使用了对象组合，大大降低了耦合度。&lt;/p&gt;
&lt;p&gt;客户端通过访问该代理类，就可以访问目标类的功能，且能使用额外的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上就是代理模式中的静态代理，其中  &lt;code&gt;OrderService&lt;/code&gt;  接口是代理类和目标类的共同接口。 &lt;code&gt;OrderServiceImpl&lt;/code&gt;  是目标类。 &lt;code&gt;OrderServiceProxy&lt;/code&gt;  是代理类。&lt;/p&gt;
&lt;p&gt;静态代理的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果系统中业务接口很多，一个接口对应一个代理类，会导致类爆炸&lt;/li&gt;
&lt;li&gt;增强代码荣誉无法复用&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态代理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#动态代理&#34;&gt;#&lt;/a&gt; 动态代理&lt;/h2&gt;
&lt;p&gt;动态代理通过使用反射来解决静态代理的缺点。下面我们来介绍动态代理。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;  中的  &lt;code&gt;java.lang.reflect&lt;/code&gt;  中的  &lt;code&gt;Proxy&lt;/code&gt;  专门用来处理动态代理。 &lt;code&gt;Proxy&lt;/code&gt;  类使用静态方法  &lt;code&gt;newInstance()&lt;/code&gt;  来动态创建代理对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;proxy&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Proxy.newInstance(类加载器，接口，调用处理器) &lt;span class=&#34;hljs-comment&#34;&gt;//返回代理对象，可通过接口强转至目标接口的对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*类加载器：	 ClassLoader，动态创建代理类字节码后，需要用类加载器加载进JVM内存。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;    		代理类和目标类的类加载器必须相同，也就是应用类加载器。通过ClassLoader.getSystemClassLoader()获取默认的应用类加载器 */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//接口：Class，目标类的接口的字节码对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//调用处理器：InvocationHandler。用于真正调用目标对象。&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们仍然使用  &lt;code&gt;OrderService&lt;/code&gt;  和  &lt;code&gt;OrderServiceImpl&lt;/code&gt;  来举例子。下面我们来看  &lt;code&gt;InvocationHandler&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;InvocationHandler&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Throwable;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	InvocationHandler只有一个方法也就是invoke，我们来分析这个方法的参数。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	proxy：通过Proxy.newInstance()创建的代理对象。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	method：被调用的方法对象，通过method调用真正的目标方法。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	args：方法所用的参数数组。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	-------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	在调用目标方法前后即可使用增强代码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们来实现  &lt;code&gt;InvocationHandler&lt;/code&gt;  ：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderInvocationHandler&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;InvocationHandler&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; OrderService orderService; &lt;span class=&#34;hljs-comment&#34;&gt;//获得目标对象，以用来调用目标对象的目标方法&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;OrderInvocationHandler&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(OrderService orderService)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.orderService = orderService;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object proxy, Method method, Object[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算开始时间&lt;/span&gt;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 执行目标对象的目标方法&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; method.invoke(orderService, args); &lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis(); &lt;span class=&#34;hljs-comment&#34;&gt;//计算结束时间&lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时&amp;quot;&lt;/span&gt;+(end - begin)+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;毫秒&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//打印结束时间&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; res;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成上述准备工作后，我们来创建代理对象：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;OrderService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;orderService&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (OrderService) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), OrderServiceImpl.class.getInterfaces(), &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderInvocationHandler&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceImpl&lt;/span&gt;()));&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//调用代理对象的方法&lt;/span&gt;&lt;br&gt;    orderService.generate();&lt;br&gt;    orderService.detail();&lt;br&gt;    orderService.modify();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;订单已生成&lt;br&gt;耗时1毫秒&lt;br&gt;订单信息如下：******&lt;br&gt;耗时0毫秒&lt;br&gt;订单已修改&lt;br&gt;耗时0毫秒&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;可见动态代理解决了静态代理的类爆炸和代码冗余问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;下面我们来修改一下  &lt;code&gt;main&lt;/code&gt;  方法的一些细节：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt;&amp;#123;&lt;br&gt;    System.getProperties().put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;jdk.proxy.ProxyGenerator.saveGeneratedFiles&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;OrderService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;orderService&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (OrderService) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), OrderServiceImpl.class.getInterfaces(), &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderInvocationHandler&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderServiceImpl&lt;/span&gt;()));&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//调用代理对象的方法&lt;/span&gt;&lt;br&gt;    orderService.generate();&lt;br&gt;    orderService.detail();&lt;br&gt;    orderService.modify();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不出意外你将会在目录中看到  &lt;code&gt;jdk.proxy1.$proxy0&lt;/code&gt;  的字节码文件，该文件即之前创造的代理对象。下面我们来看看这对象：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;$Proxy0&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Proxy&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;OrderService&lt;/span&gt; &amp;#123; &lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;																	该类实现了OrderService，所以该对象可以强转为目标接口对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;																	且继承了Proxy，由于单继承，所有JDK的动态代理无法使用继承实现&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;																	*/&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//代理类的所有属性均为Method常量。&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m0;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m1;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m2;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m3;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m4;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Method m5;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 代理类的构造方法，以InvocationHandler为参数&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; $Proxy0(InvocationHandler var1) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(var1);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (Integer)&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m0, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;		......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object var1)&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (Boolean)&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m1, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Object&lt;/span&gt;[]&amp;#123;var1&amp;#125;);&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (String)&lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m2, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;       ......&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m3, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;       ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;detail&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;      ......&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m4, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;       ......&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//对代理对象的方法调用，最终都会转换成对InvocationHandler对象的invoke方法的调用&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;modify&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;       ......&lt;br&gt;            &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;.h.invoke(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;, m5, (Object[])&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;       ......&lt;br&gt;    &amp;#125;&lt;br&gt;    ......&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//代理类会获得Object的hashCode方法，equals方法、toString方法以及目标接口的所有方法的Method对象，然后重写他们&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;        ......&lt;br&gt;            m0 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hashCode&amp;quot;&lt;/span&gt;);&lt;br&gt;            m1 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;equals&amp;quot;&lt;/span&gt;, Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;));&lt;br&gt;            m2 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;java.lang.Object&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;toString&amp;quot;&lt;/span&gt;);&lt;br&gt;            m3 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.proxy.OrderService&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;generate&amp;quot;&lt;/span&gt;);&lt;br&gt;            m4 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.proxy.OrderService&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;detail&amp;quot;&lt;/span&gt;);&lt;br&gt;            m5 = Class.forName(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.proxy.OrderService&amp;quot;&lt;/span&gt;).getMethod(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;modify&amp;quot;&lt;/span&gt;);&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;JDK&lt;/code&gt;  会在运行中动态创建名为  &lt;code&gt;$Proxy&lt;/code&gt;  + 数字的代理类，并且让这个类继承  &lt;code&gt;Proxy&lt;/code&gt;  类并且实现目标接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;aop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aop&#34;&gt;#&lt;/a&gt; AOP&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;IoC&lt;/code&gt;  使软件组件松耦合。 &lt;code&gt;AOP&lt;/code&gt;  让你能够捕捉系统中经常使用的功能，把它转化成组件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOP（Aspect Oriented Programming）&lt;/code&gt; ：面向切面编程，面向方面编程。（ &lt;code&gt;AOP&lt;/code&gt;  是一种编程技术）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOP&lt;/code&gt;  是对  &lt;code&gt;OOP&lt;/code&gt;  的补充延伸。 &lt;code&gt;AOP&lt;/code&gt;  底层使用的就是动态代理来实现的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  的  &lt;code&gt;AOP&lt;/code&gt;  使用的动态代理是： &lt;code&gt;JDK&lt;/code&gt;  动态代理 +  &lt;code&gt;CGLIB&lt;/code&gt;  动态代理技术。 &lt;code&gt;Spring&lt;/code&gt;  在这两种动态代理中灵活切换，如果是代理接口，会默认使用  &lt;code&gt;JDK&lt;/code&gt;  动态代理，如果要代理某个类，这个类没有实现接口，就会切换使用  &lt;code&gt;CGLIB&lt;/code&gt;  。当然，你也可以强制通过一些配置让  &lt;code&gt;Spring&lt;/code&gt;  只使用  &lt;code&gt;CGLIB&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;aop介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aop介绍&#34;&gt;#&lt;/a&gt; AOP 介绍&lt;/h2&gt;
&lt;p&gt;一般一个系统当中都会有一些系统服务，例如：日志、事务管理、安全等。这些系统服务被称为：&lt;strong&gt;交叉业务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些&lt;strong&gt;交叉业务&lt;/strong&gt;几乎是通用的，不管你是做银行账户转账，还是删除用户数据。日志、事务管理、安全，这些都是需要做的。&lt;/p&gt;
&lt;p&gt;如果在每一个业务处理过程当中，都掺杂这些交叉业务代码进去的话，存在两方面问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一：交叉业务代码在多个业务流程中反复出现，显然这个交叉业务代码没有得到复用。并且修改这些交叉业务代码的话，需要修改多处。&lt;/li&gt;
&lt;li&gt;第二：程序员无法专注核心业务代码的编写，在编写核心业务代码的同时还需要处理这些交叉业务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用  &lt;code&gt;AOP&lt;/code&gt;  可以很轻松的解决以上问题。&lt;/p&gt;
&lt;img src=&#34;aop.png&#34; alt=&#34;AOP图解&#34;&gt;
&lt;h2 id=&#34;aop八大术语&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aop八大术语&#34;&gt;#&lt;/a&gt; AOP 八大术语&lt;/h2&gt;
&lt;p&gt;让我们首先定义一些核心的 AOP 概念和术语。这些术语并不是针对  &lt;code&gt;Spring&lt;/code&gt;  的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Aspect&lt;/code&gt; （切面）: 一个跨越多个类的关注点的模块化。事务管理是企业级 Java 应用中横切关注点的一个很好的例子。在  &lt;code&gt;Spring AOP&lt;/code&gt;  中，切面是通过使用常规类（基于  &lt;code&gt;XML&lt;/code&gt;  ）或使用  &lt;code&gt;@Aspect&lt;/code&gt;  注解的常规类（  &lt;code&gt;@AspectJ&lt;/code&gt;  风格）实现的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Join point&lt;/code&gt; （连接点）: 程序执行过程中的一个点，例如一个方法的执行或一个异常的处理。在  &lt;code&gt;Spring AOP&lt;/code&gt;  中，一个连接点总是代表一个方法的执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Advice&lt;/code&gt; （通知）: 一个切面在一个特定的连接点采取的行动。不同类型的 advice 包括 “around”、“before” 和 “after” 的 advice（Advice 类型将在后面讨论）。许多 AOP 框架，包括 Spring，都将 advice 建模为一个拦截器，并在连接点（Join point）周围维护一个拦截器链。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Pointcut&lt;/code&gt; （切点）: 一个匹配连接点的谓词（predicate）。 &lt;code&gt;advice&lt;/code&gt;  与一个切点表达式相关联，并在切点匹配的任何连接点上运行（例如，执行一个具有特定名称的方法）。由切点表达式匹配的连接点概念是  &lt;code&gt;AOP&lt;/code&gt;  的核心，Spring 默认使用 AspectJ 的切点表达式语言。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Introduction&lt;/code&gt; （引入）: 代表一个类型声明额外的方法或字段。Spring AOP 允许你为任何 advice 的对象引入新的接口（以及相应的实现）。例如，你可以使用引入来使一个 bean 实现  &lt;code&gt;IsModified&lt;/code&gt;  接口，以简化缓存。（介绍在 AspectJ 社区中被称为类型间声明）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Target object&lt;/code&gt; （目标对象）: 被一个或多个切面所 advice 的对象。也被称为 “advised object”。由于 Spring AOP 是通过使用运行时代理来实现的，这个对象总是一个被代理的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AOP proxy&lt;/code&gt; （代理对象）: 一个由  &lt;code&gt;AOP&lt;/code&gt;  框架创建的对象，以实现切面契约（ &lt;code&gt;advice&lt;/code&gt;  方法执行等）。在  &lt;code&gt;Spring&lt;/code&gt;  框架中， &lt;code&gt;AOP&lt;/code&gt;  代理是一个  &lt;code&gt;JDK&lt;/code&gt;  动态代理或  &lt;code&gt;CGLIB&lt;/code&gt;  代理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Weaving&lt;/code&gt; （织入）: 将  &lt;code&gt;aspect&lt;/code&gt;  与其他应用程序类型或对象连接起来，以创建一个  &lt;code&gt;advice&lt;/code&gt;  对象。这可以在编译时（例如，使用  &lt;code&gt;AspectJ&lt;/code&gt;  编译器）、加载时或运行时完成。 &lt;code&gt;Spring AOP&lt;/code&gt;  和其他纯  &lt;code&gt;Java AOP&lt;/code&gt;  框架一样，在运行时进行织入。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Spring AOP&lt;/code&gt;  包括以下类型的  &lt;code&gt;advice&lt;/code&gt; 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Before advice&lt;/code&gt; : 在连接点之前运行的 Advice ，但它不具备以下能力 阻止执行流进行到 join point 的能力（除非它抛出一个异常）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;After returning advice&lt;/code&gt; : 在一个连接点正常完成后运行的 Advice （例如，如果一个方法返回时没有抛出一个异常）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;After (finally) advice&lt;/code&gt; : 无论连接点以何种方式退出（正常或特殊返回），都要运行该 advice。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Around advice&lt;/code&gt; : 围绕一个连接点的 advice，如方法调用。这是最强大的一种 advice。Around advice 可以在方法调用之前和之后执行自定义行为。它还负责选择是否继续进行连接点或通过返回自己的返回值或抛出一个异常来缩短 advice 方法的执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用spring的aop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用spring的aop&#34;&gt;#&lt;/a&gt; 使用 Spring 的 AOP&lt;/h2&gt;
&lt;p&gt;Spring 对 AOP 的实现包括以下 3 种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一种方式：Spring 框架结合 AspectJ 框架实现的 AOP，基于注解方式。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;第二种方式：Spring 框架结合 AspectJ 框架实现的 AOP，基于 XML 方式。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;第三种方式：Spring 框架自己实现的 AOP，基于 XML 配置方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用  &lt;code&gt;AOP&lt;/code&gt;  必须含有以下注解：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-aop&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-aspects&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;注解-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解-2&#34;&gt;#&lt;/a&gt; 注解&lt;/h3&gt;
&lt;p&gt;使用注解的方式，必须要是有  &lt;code&gt;@Aspecj&lt;/code&gt;  注解标注切面类。&lt;/p&gt;
&lt;h4 id=&#34;开启aspectj的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启aspectj的支持&#34;&gt;#&lt;/a&gt; 开启 @AspectJ 的支持&lt;/h4&gt;
&lt;h5 id=&#34;通过-xml-开启&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过-xml-开启&#34;&gt;#&lt;/a&gt; 通过  &lt;code&gt;XML&lt;/code&gt;  开启&lt;/h5&gt;
&lt;p&gt;使用  &lt;code&gt;aop&lt;/code&gt;  命名空间开启开启  &lt;code&gt;@AspectJ&lt;/code&gt;  的支持&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;xmlns&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/beans&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:xsi&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:context&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/context&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xmlns:aop&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/aop&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;       &lt;span class=&#34;hljs-attr&#34;&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-string&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	保证下面的约束存在&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xmlns:aop=&amp;quot;http://www.springframework.org/schema/aop&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	配置启用 @AspectJ 支持，当然如果你想约束aop的底层代理实现你也可以使用proxy-target-class属性&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	proxy-target-class默认为false，代表使用cglib动态代理或jdk的动态代理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	将proxy-target-class设置为true，则代表强制使用cglib动态代理&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;aop:aspectj-autoproxy&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;beans&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;通过注解开启&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#通过注解开启&#34;&gt;#&lt;/a&gt; 通过注解开启&lt;/h5&gt;
&lt;p&gt;在自定以的配置类中使用注解  &lt;code&gt;@EnableAspectJAutoProxy&lt;/code&gt;  开启  &lt;code&gt;@AspectJ&lt;/code&gt;  的支持：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@EnableAspectJAutoProxy&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyConfiguration&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;声明一个-aspect类&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明一个-aspect类&#34;&gt;#&lt;/a&gt; 声明一个 Aspect 类&lt;/h4&gt;
&lt;p&gt;启用  &lt;code&gt;@AspectJ&lt;/code&gt;  支持后，任何在你的  &lt;code&gt;application context&lt;/code&gt;  中定义的  &lt;code&gt;bean&lt;/code&gt;  ，其类是  &lt;code&gt;@AspectJ&lt;/code&gt;  切面（有  &lt;code&gt;@Aspect&lt;/code&gt;  注解），会被  &lt;code&gt;Spring&lt;/code&gt;  自动检测到，并用于配置 &lt;code&gt;Spring AOP&lt;/code&gt;  。接下来的两个例子展示了一个不怎么有用的切面所需的最小步骤。&lt;/p&gt;
&lt;p&gt;两个例子中的第一个显示了  &lt;code&gt;application context&lt;/code&gt;  中的一个普通  &lt;code&gt;Bean&lt;/code&gt;  定义，它指向一个用  &lt;code&gt;@Aspect&lt;/code&gt;  注解的  &lt;code&gt;Bean&lt;/code&gt;  类。&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;myAspect&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.xyz.NotVeryUsefulAspect&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- configure properties of the aspect here --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两个例子中的第二个展示了  &lt;code&gt;NotVeryUsefulAspect&lt;/code&gt;  类的定义，它被  &lt;code&gt;@Aspect&lt;/code&gt;  注解了。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.xyz;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.aspectj.lang.annotation.Aspect;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;NotVeryUsefulAspect&lt;/span&gt; &amp;#123;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;声明一个切点pointcut&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明一个切点pointcut&#34;&gt;#&lt;/a&gt; 声明一个切点（Pointcut）&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Pointcuts&lt;/code&gt;  确定感兴趣的连接点（ &lt;code&gt;join points&lt;/code&gt; ），从而使我们能够控制  &lt;code&gt;advice&lt;/code&gt;  的运行时间。 &lt;code&gt;Spring AOP&lt;/code&gt;  只支持  &lt;code&gt;Spring Bean&lt;/code&gt;  的方法执行连接点，所以你可以把 &lt;code&gt;pointcut&lt;/code&gt;  看作是对  &lt;code&gt;Spring Bean&lt;/code&gt;  上的方法执行的匹配。一个切点声明有两个部分：一个由名称和任何参数组成的签名，以及一个切点表达式，它决定了我们到底对哪些方法的执行感兴趣。在  &lt;code&gt;AOP&lt;/code&gt;  的  &lt;code&gt;@AspectJ&lt;/code&gt;  注解式中，一个  &lt;code&gt;pointcut&lt;/code&gt;  签名是由一个常规的方法定义提供的，而  &lt;code&gt;pointcut&lt;/code&gt;  表达式是通过使用  &lt;code&gt;@Pointcut&lt;/code&gt;  注解来表示的（作为 &lt;code&gt;pointcut&lt;/code&gt;  签名的方法必须是一个  &lt;code&gt;void&lt;/code&gt;  返回类型）。&lt;/p&gt;
&lt;p&gt;一个例子可以帮助我们清楚地了解切点签名和切点表达式之间的区别。下面的例子定义了一个名为  &lt;code&gt;anyOldTransfer&lt;/code&gt;  的切点，它匹配任何名为  &lt;code&gt;transfer&lt;/code&gt;  的方法的执行：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;execution(* transfer(..))&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// the pointcut expression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;anyOldTransfer&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;span class=&#34;hljs-comment&#34;&gt;// the pointcut signature&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;支持的-pointcut-指定器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#支持的-pointcut-指定器&#34;&gt;#&lt;/a&gt; 支持的  &lt;code&gt;Pointcut&lt;/code&gt;  指定器&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Spring AOP&lt;/code&gt;  支持以下  &lt;code&gt;AspectJ&lt;/code&gt;  的切点指定器（  &lt;code&gt;PCD&lt;/code&gt;  ），用于切点表达式中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execution&lt;/code&gt; : 用于匹配方法执行的连接点。这是在使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时要使用的主要切点指定器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;within&lt;/code&gt; : 将匹配限制在某些类型内的连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时，执行在匹配类型内声明的方法）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中  &lt;code&gt;bean&lt;/code&gt;  引用（  &lt;code&gt;Spring AOP&lt;/code&gt;  代理）是给定类型的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中目标对象（被代理的应用程序对象）是给定类型的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;args&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中参数是给定类型的实例。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@target&lt;/code&gt; : 限制匹配到连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中执行对象的类有一个给定类型的注解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@args&lt;/code&gt; : 将匹配限制在连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时方法的执行），其中实际传递的参数的运行时类型有给定类型的注解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@within&lt;/code&gt; : 将匹配限制在具有给定注解的类型中的连接点（使用  &lt;code&gt;Spring AOP&lt;/code&gt;  时，执行在具有给定注解的类型中声明的方法）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@annotation&lt;/code&gt; : 将匹配限制在连接点的主体（  &lt;code&gt;Spring AOP&lt;/code&gt;  中正在运行的方法）具有给定注解的连接点上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;切点表达式用来定义通知（  &lt;code&gt;Advice&lt;/code&gt;  ）往哪些方法上切入。&lt;/p&gt;
&lt;h6 id=&#34;切点表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#切点表达式&#34;&gt;#&lt;/a&gt; 切点表达式&lt;/h6&gt;
&lt;p&gt;切入点表达式语法格式：&lt;/p&gt;
&lt;figure class=&#34;highlight stylus&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs stylus&#34;&gt;&lt;span class=&#34;hljs-function&#34;&gt;&lt;span class=&#34;hljs-title&#34;&gt;execution&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;([访问控制权限修饰符] 返回值类型 [全限定类名]方法名(形式参数列表)&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;hljs-selector-attr&#34;&gt;[异常]&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;访问控制权限修饰符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选项。&lt;/li&gt;
&lt;li&gt;没写，就是 4 个权限都包括。&lt;/li&gt;
&lt;li&gt;写 public 就表示只包括公开的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;返回值类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必填项。&lt;/li&gt;
&lt;li&gt;* 表示返回值类型任意。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;全限定类名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选项。&lt;/li&gt;
&lt;li&gt;两个点 “…” 代表当前包以及子包下的所有类。&lt;/li&gt;
&lt;li&gt;省略时表示所有的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;方法名：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;必填项。&lt;/li&gt;
&lt;li&gt;* 表示所有方法。&lt;/li&gt;
&lt;li&gt;set * 表示所有的 set 方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;形式参数列表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;必填项&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;() 表示没有参数的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(…) 参数类型和个数随意的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(*) 只有一个参数的方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(*, String) 第一个参数类型随意，第二个参数是 String 的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异常：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可选项。&lt;/li&gt;
&lt;li&gt;省略时表示任意异常类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;组合切点pointcut表达式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#组合切点pointcut表达式&#34;&gt;#&lt;/a&gt; 组合切点（Pointcut）表达式&lt;/h6&gt;
&lt;p&gt;你可以通过使用  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 、 &lt;code&gt;||&lt;/code&gt;  和  &lt;code&gt;!&lt;/code&gt;  来组合  &lt;code&gt;pointcut&lt;/code&gt;  表达式。你也可以通过名称来引用  &lt;code&gt;pointcut&lt;/code&gt;  表达式。下面的例子显示了三个  &lt;code&gt;pointcut&lt;/code&gt;  表达式。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com.xyz;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Pointcuts&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;execution(public * *(..))&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//1&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;publicMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;within(com.xyz.trading..*)&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//2&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;inTrading&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;publicMethod() &amp;amp;&amp;amp; inTrading()&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//3&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;tradingOperation&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&amp;#125; &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;如果一个方法执行连接点代表任何  &lt;code&gt;public&lt;/code&gt;  方法的执行，则  &lt;code&gt;publicMethod&lt;/code&gt;  匹配。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inTrading&lt;/code&gt;  匹配一个方法的执行是否在  &lt;code&gt;trading&lt;/code&gt;  模块中。&lt;/li&gt;
&lt;li&gt;如果一个方法的执行代表了  &lt;code&gt;trading&lt;/code&gt;  模块中的任何  &lt;code&gt;public&lt;/code&gt;  方法，则  &lt;code&gt;tradingOperation&lt;/code&gt;  匹配&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如上所示，从较小的命名的切点程序中建立更复杂的切点程序表达式是一种最佳做法。当通过名称来引用点切时，正常的  &lt;code&gt;Java&lt;/code&gt;  可见性规则适用（你可以看到同一类型中的  &lt;code&gt;private&lt;/code&gt;  切点、层次结构中的  &lt;code&gt;protected&lt;/code&gt;  切点、任何地方的  &lt;code&gt;public&lt;/code&gt;  切点，等等）。可见性并不影响切点的匹配。&lt;/p&gt;
&lt;h4 id=&#34;声明-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明-advice&#34;&gt;#&lt;/a&gt; 声明 Advice&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Advice&lt;/code&gt;  与一个切点表达式相关联，在切点匹配的方法执行之前、之后或周围（around）运行。切点表达式可以是一个内联切点，也可以是对一个 &lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-common-pointcuts&#34;&gt;命名切点&lt;/a&gt; 的引用&lt;/p&gt;
&lt;h5 id=&#34;before-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#before-advice&#34;&gt;#&lt;/a&gt; Before Advice&lt;/h5&gt;
&lt;p&gt;你可以通过使用  &lt;code&gt;@Before&lt;/code&gt;  注解在一个切面中声明  &lt;code&gt;before advice&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;下面的例子使用了一个内联的切点表达式。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeforeExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们使用一个 &lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-common-pointcuts&#34;&gt;命名的切点&lt;/a&gt;，我们可以把前面的例子改写成如下。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeforeExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;com.xyz.CommonPointcuts.dataAccessOperation()&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;after-returning-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#after-returning-advice&#34;&gt;#&lt;/a&gt; After Returning Advice&lt;/h5&gt;
&lt;p&gt;当一个匹配的方法执行正常返回时， &lt;code&gt;After returning advice&lt;/code&gt;  运行。你可以通过使用  &lt;code&gt;@AfterReturning&lt;/code&gt;  注解来声明它。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterReturningExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterReturning(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以有多个 advice 声明（也可以有其他成员），都在同一个切面。我们在这些例子中只展示了一个 advice 声明，以集中展示每个 advice 的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有时，你需要在  &lt;code&gt;advice body&lt;/code&gt;  中访问被返回的实际值。你可以使用绑定返回值的  &lt;code&gt;@AfterReturning&lt;/code&gt;  的形式来获得这种访问权，正如下面的例子所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterReturningExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterReturning(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        pointcut=&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        returning=&amp;quot;retVal&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doAccessCheck&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object retVal)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;returning&lt;/code&gt;  属性中使用的名称必须与 advice 方法中的参数名称相对应。当一个方法执行返回时，返回值会作为相应的参数值传递给  &lt;code&gt;advice&lt;/code&gt;  方法。 &lt;code&gt;returning&lt;/code&gt;  子句也限制了匹配，只匹配那些返回指定类型的值的方法执行（在这种情况下是  &lt;code&gt;Object&lt;/code&gt; ，它匹配任何返回值）。&lt;/p&gt;
&lt;h5 id=&#34;after-throwing-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#after-throwing-advice&#34;&gt;#&lt;/a&gt; After Throwing Advice&lt;/h5&gt;
&lt;p&gt;当一个匹配的方法执行通过抛出异常退出时， &lt;code&gt;After throwing advice&lt;/code&gt;  运行。你可以通过使用  &lt;code&gt;@AfterThrowing&lt;/code&gt;  注解来声明它，如下例所示。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterThrowingExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterThrowing(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doRecoveryActions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常情况下，你希望  &lt;code&gt;advice&lt;/code&gt;  只在给定类型的异常被抛出时运行，而且你也经常需要在  &lt;code&gt;advice body&lt;/code&gt;  中访问被抛出的异常。你可以使用  &lt;code&gt;throwing&lt;/code&gt;  属性来限制匹配（如果需要的话 — 否则使用  &lt;code&gt;Throwable&lt;/code&gt;  作为异常类型），并将抛出的异常绑定到  &lt;code&gt;advice&lt;/code&gt;  参数上。下面的例子展示了如何做到这一点。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterThrowingExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@AfterThrowing(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        pointcut=&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        throwing=&amp;quot;ex&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doRecoveryActions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DataAccessException ex)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在  &lt;code&gt;throwing&lt;/code&gt;  属性中使用的名称必须与 advice 方法中的参数名称相对应。当一个方法的执行通过抛出一个异常退出时，该异常将作为相应的参数值传递给 advice 方法。 &lt;code&gt;throwing&lt;/code&gt;  子句也限制了匹配，只能匹配那些抛出指定类型的异常的方法执行（本例中是  &lt;code&gt;DataAccessException&lt;/code&gt; ）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意， &lt;code&gt;@AfterThrowing&lt;/code&gt;  并不表示一般的异常处理回调。具体来说， &lt;code&gt;@AfterThrowing advice&lt;/code&gt;  方法只应该接收来自连接点（用户声明的目标方法）本身的异常，而不是来自附带的  &lt;code&gt;@After&lt;/code&gt; / &lt;code&gt;@AfterReturning&lt;/code&gt;  方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;after-finally-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#after-finally-advice&#34;&gt;#&lt;/a&gt; After (Finally) Advice&lt;/h5&gt;
&lt;p&gt;当一个匹配的方法执行退出时，After (finally) advice 会运行。它是通过使用  &lt;code&gt;@After&lt;/code&gt;  注解来声明的。After advice 必须准备好处理正常和异常的返回条件。它通常被用于释放资源和类似的目的。下面的例子展示了如何使用 After finally advice。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AfterFinallyExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@After(&amp;quot;execution(* com.xyz.dao.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doReleaseLock&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意， &lt;code&gt;AspectJ&lt;/code&gt;  中的  &lt;code&gt;@After&lt;/code&gt;   &lt;code&gt;advice&lt;/code&gt;  被定义为 “after finally advice”，类似于  &lt;code&gt;try-catch&lt;/code&gt;  语句中的  &lt;code&gt;finally&lt;/code&gt;  块。它将对任何结果、正常返回或从连接点（用户声明的目标方法）抛出的异常进行调用，这与  &lt;code&gt;@AfterReturning&lt;/code&gt;  不同，后者只适用于成功的正常返回。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;around-advice&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#around-advice&#34;&gt;#&lt;/a&gt; Around Advice&lt;/h5&gt;
&lt;p&gt;最后一种  &lt;code&gt;Advice&lt;/code&gt;  是  &lt;code&gt;Around Advice&lt;/code&gt; 。 “围绕” 一个匹配的方法的执行而运行。它有机会在方法运行之前和之后进行工作，并决定何时、如何、甚至是否真正运行该方法。如果你需要以线程安全的方式分享方法执行前后的状态，例如启动和停止一个定时器，那么  &lt;code&gt;Around advice&lt;/code&gt;  经常被使用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;始终使用符合你要求的最不强大的  &lt;code&gt;advice&lt;/code&gt;  形式。例如，如果  &lt;code&gt;before advice&lt;/code&gt;  足以满足你的需要，就不要使用  &lt;code&gt;around advice&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Around advice&lt;/code&gt;  是通过用  &lt;code&gt;@Around&lt;/code&gt;  注解来声明一个方法的。该方法应该声明  &lt;code&gt;Object&lt;/code&gt;  为其返回类型，并且该方法的第一个参数必须是  &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  类型。在 advice 方法的 body 中，你必须在  &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  上调用  &lt;code&gt;proceed()&lt;/code&gt; ，以使底层方法运行。在没有参数的情况下调用  &lt;code&gt;proceed()&lt;/code&gt;  将导致调用者的原始参数在底层方法被调用时被提供给它。对于高级用例，有一个重载的  &lt;code&gt;proceed()&lt;/code&gt;  方法，它接受一个参数数组（ &lt;code&gt;Object[]&lt;/code&gt; ）。当底层方法被调用时，数组中的值将被用作该方法的参数。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;around advice&lt;/code&gt;  返回的值是方法的调用者看到的返回值。例如，一个简单的缓存切面可以从缓存中返回一个值（如果有的话），或者调用  &lt;code&gt;proceed()&lt;/code&gt;  （并返回该值），如果没有的话。请注意，  &lt;code&gt;proceed&lt;/code&gt;  可以被调用一次，多次，或者根本就不在  &lt;code&gt;around advice&lt;/code&gt;  的  &lt;code&gt;body&lt;/code&gt;  中调用。所有这些都是合法的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你将  &lt;code&gt;around advice&lt;/code&gt;  方法的返回类型声明为  &lt;code&gt;void&lt;/code&gt; ，那么将总是返回给调用者  &lt;code&gt;null&lt;/code&gt; ，有效地忽略了任何调用  &lt;code&gt;proceed()&lt;/code&gt;  的结果。因此，我们建议  &lt;code&gt;around advice&lt;/code&gt;  方法声明一个  &lt;code&gt;Object&lt;/code&gt;  的返回类型。该  &lt;code&gt;advice&lt;/code&gt;  方法通常应该返回调用  &lt;code&gt;proceed()&lt;/code&gt;  所返回的值，即使底层方法的返回类型为  &lt;code&gt;void&lt;/code&gt; 。然而， &lt;code&gt;advice&lt;/code&gt;  可以根据使用情况选择性地返回一个缓存的值、一个封装的值或一些其他的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的例子显示了如何使用  &lt;code&gt;around advice&lt;/code&gt; 。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Aspect&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;AroundExample&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Around(&amp;quot;execution(* com.xyz..service.*.*(..))&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Object &lt;span class=&#34;hljs-title function_&#34;&gt;doBasicProfiling&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(ProceedingJoinPoint pjp)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Throwable &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// start stopwatch&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;retVal&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; pjp.proceed();&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// stop stopwatch&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; retVal;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;advice-参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#advice-参数&#34;&gt;#&lt;/a&gt; Advice 参数&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了完全类型化的  &lt;code&gt;advice&lt;/code&gt;  ，这意味着你可以在  &lt;code&gt;advice&lt;/code&gt;  签名中声明你需要的参数（就像我们在前面看到的返回和抛出的例子一样），而不是一直用  &lt;code&gt;Object[]&lt;/code&gt;  数组工作。我们将在本节后面看到如何使参数和其他上下文值对  &lt;code&gt;advice&lt;/code&gt;  主体可用。首先，我们看一下如何编写通用  &lt;code&gt;advice&lt;/code&gt;  ，它可以找出  &lt;code&gt;advice&lt;/code&gt;  当前所  &lt;code&gt;advice&lt;/code&gt;  的方法。&lt;/p&gt;
&lt;h6 id=&#34;访问当前的-joinpoint&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#访问当前的-joinpoint&#34;&gt;#&lt;/a&gt; 访问当前的  &lt;code&gt;JoinPoint&lt;/code&gt;&lt;/h6&gt;
&lt;p&gt;任何  &lt;code&gt;advice method&lt;/code&gt;  都可以声明一个  &lt;code&gt;org.aspectj.lang.JoinPoint&lt;/code&gt;  类型的参数作为其第一个参数。请注意， &lt;code&gt;around advice&lt;/code&gt;  方法需要声明一个  &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  类型的第一个参数，它是  &lt;code&gt;JoinPoint&lt;/code&gt;  的一个子类。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JoinPoint&lt;/code&gt;  接口提供了许多有用的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getArgs()&lt;/code&gt; : 返回方法的参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getThis()&lt;/code&gt; : 返回代理对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getTarget()&lt;/code&gt; : 返回目标对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSignature()&lt;/code&gt; : 返回正在被  &lt;code&gt;advice&lt;/code&gt;  的方法的描述。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toString()&lt;/code&gt; : 打印对所  &lt;code&gt;advice&lt;/code&gt;  的方法的有用描述。&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;向-advice-传递参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#向-advice-传递参数&#34;&gt;#&lt;/a&gt; 向 Advice 传递参数&lt;/h6&gt;
&lt;p&gt;我们已经看到了如何绑定返回值或异常值（使用  &lt;code&gt;after returning&lt;/code&gt;  和  &lt;code&gt;after throwing advice&lt;/code&gt;  ）。为了使参数值对  &lt;code&gt;advice body&lt;/code&gt;  可用，你可以使用  &lt;code&gt;args&lt;/code&gt;  的绑定形式。如果你在  &lt;code&gt;args&lt;/code&gt;  表达式中使用参数名来代替类型名，那么当  &lt;code&gt;advice&lt;/code&gt;  被调用时，相应参数的值将作为参数值被传递。一个例子可以让我们更清楚地了解这一点。假设你想  &lt;code&gt;advice&lt;/code&gt;  执行以一个  &lt;code&gt;Account&lt;/code&gt;  对象为第一参数的 DAO 操作，并且你需要在  &lt;code&gt;advice body&lt;/code&gt;  中访问该  &lt;code&gt;account&lt;/code&gt;  。你可以写如下内容。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* com.xyz.dao.*.*(..)) &amp;amp;&amp;amp; args(account,..)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;validateAccount&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Account account)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;pointcut&lt;/code&gt;  表达式的  &lt;code&gt;args(account,..)&lt;/code&gt;  部分有两个作用。首先，它将匹配限制在方法的执行上，即方法至少需要一个参数，并且传递给该参数的参数是一个  &lt;code&gt;Account&lt;/code&gt;  的实例。其次，它使实际的  &lt;code&gt;Account&lt;/code&gt;  对象通过  &lt;code&gt;account&lt;/code&gt;  参数对  &lt;code&gt;advice&lt;/code&gt;  可用。&lt;/p&gt;
&lt;p&gt;另一种写法是声明一个 pointcut，当它与一个连接点匹配时 “提供”  &lt;code&gt;Account&lt;/code&gt;  对象的值，然后从 advice 中引用命名的 pointcut。这看起来就像这样。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Pointcut(&amp;quot;execution(* com.xyz.dao.*.*(..)) &amp;amp;&amp;amp; args(account,..)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;accountDataAccessOperation&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Account account)&lt;/span&gt; &amp;#123;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;accountDataAccessOperation(account)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;validateAccount&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Account account)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;更多细节请参见 AspectJ 编程指南。&lt;/p&gt;
&lt;p&gt;代理对象（ &lt;code&gt;this&lt;/code&gt; ）、目标对象（ &lt;code&gt;target&lt;/code&gt; ）和注解（ &lt;code&gt;@within&lt;/code&gt; 、 &lt;code&gt;@target&lt;/code&gt; 、 &lt;code&gt;@annotation&lt;/code&gt;  和  &lt;code&gt;@args&lt;/code&gt; ）都可以用类似的方式绑定。接下来的一组例子展示了如何匹配执行带有  &lt;code&gt;@Auditable&lt;/code&gt;  注解的方法，并提取审计代码。&lt;/p&gt;
&lt;p&gt;下面是  &lt;code&gt;@Auditable&lt;/code&gt;  注解的定义。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Retention(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Target(ElementType.METHOD)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@interface&lt;/span&gt; Auditable &amp;#123;&lt;br&gt;    AuditCode &lt;span class=&#34;hljs-title function_&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面显示了与  &lt;code&gt;@Auditable&lt;/code&gt;  方法的执行相匹配的 advice。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;com.xyz.Pointcuts.publicMethod() &amp;amp;&amp;amp; @annotation(auditable)&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Auditable auditable)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;AuditCode&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; auditable.value();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ...&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的  &lt;code&gt;pointcut&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&#34;advice-参数和泛型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#advice-参数和泛型&#34;&gt;#&lt;/a&gt; Advice 参数和泛型&lt;/h6&gt;
&lt;p&gt;Spring AOP 可以处理类声明和方法参数中使用的泛型。假设你有一个像下面这样的泛型。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Sample&lt;/span&gt;&amp;lt;T&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sampleGenericMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(T param)&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;sampleGenericCollectionMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Collection&amp;lt;T&amp;gt; param)&lt;/span&gt;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以将方法类型的拦截限制在某些参数类型上，办法是将 advice 参数与你想拦截方法的参数类型联系起来。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* ..Sample+.sampleGenericMethod(*)) &amp;amp;&amp;amp; args(param)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;beforeSampleMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(MyType param)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Advice implementation&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种方法对泛型集合不起作用。所以你不能像下面这样定义一个 pointcut。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;execution(* ..Sample+.sampleGenericCollectionMethod(*)) &amp;amp;&amp;amp; args(param)&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;beforeSampleMethod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Collection&amp;lt;MyType&amp;gt; param)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// Advice implementation&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了实现这一点，我们必须检查集合中的每一个元素，这是不太合理的，因为我们也无法决定如何处理一般的  &lt;code&gt;null&lt;/code&gt; 。为了实现与此类似的东西，你必须将参数输入到  &lt;code&gt;Collection&amp;lt;?&amp;gt;&lt;/code&gt;  中，并手动检查元素的类型。&lt;/p&gt;
&lt;h6 id=&#34;确定参数名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#确定参数名称&#34;&gt;#&lt;/a&gt; 确定参数名称&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;advice&lt;/code&gt;  调用中的参数绑定依赖于将在切点表达式中使用的名称与 advice 和切点方法签名中声明的参数名称相匹配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Spring AOP&lt;/code&gt;  使用以下  &lt;code&gt;ParameterNameDiscoverer&lt;/code&gt;  实现来确定参数名称。每个 discoverers 将有机会发现参数名称，第一个成功的发现者获胜。如果没有一个注册的 discoverers 能确定参数名称，那么将抛出一个异常。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AspectJAnnotationParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用用户通过相应的 advice 或指向性注解中的  &lt;code&gt;argNames&lt;/code&gt;  属性明确指定的参数名称。详见 &lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-ataspectj-advice-params-names-explicit&#34;&gt;明确的参数名称&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;KotlinReflectionParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用  &lt;code&gt;Kotlin&lt;/code&gt;  反射 API 来确定参数名称。只有在 classpath 上存在这种 API 时，才会使用这个 discoverer。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;StandardReflectionParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用标准的  &lt;code&gt;java.lang.reflect.Parameter&lt;/code&gt;  API 来确定参数名称。需要用  &lt;code&gt;javac&lt;/code&gt;  的  &lt;code&gt;-parameters&lt;/code&gt;  标志来编译代码。建议在 Java 8 + 上采用这种方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LocalVariableTableParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;分析 advice 类的字节码中可用的局部变量表，从 debug 信息中确定参数名称。需要用 debug 参数（至少是  &lt;code&gt;-g:vars&lt;/code&gt; ）编译代码。从 Spring Framework 6.0 开始被弃用，在 Spring Framework 6.1 中被移除，以支持用  &lt;code&gt;-parameters&lt;/code&gt;  编译代码。在 GraalVM 原生镜像中不支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AspectJAdviceParameterNameDiscoverer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从  &lt;code&gt;pointcut&lt;/code&gt;  表达式、 &lt;code&gt;returning&lt;/code&gt; , 和  &lt;code&gt;throwing&lt;/code&gt;  子句中推导出参数名称。关于所用算法的细节，请参见 &lt;a href=&#34;https://docs.spring.io/spring-framework/docs/6.0.8-SNAPSHOT/javadoc-api/org/springframework/aop/aspectj/AspectJAdviceParameterNameDiscoverer.html&#34;&gt;javadoc&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;明确的参数名称&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#明确的参数名称&#34;&gt;#&lt;/a&gt; 明确的参数名称&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;@AspectJ&lt;/code&gt;  advice 和 pointcut 注解有一个可选的  &lt;code&gt;argNames&lt;/code&gt;  属性，你可以用它来指定被注解方法的参数名称。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个 @AspectJ 切面已经被 AspectJ 编译器（ &lt;code&gt;ajc&lt;/code&gt; ）编译，即使没有 debug 信息，你也不需要添加  &lt;code&gt;argNames&lt;/code&gt;  属性，因为编译器会保留需要的信息。同样地，如果一个 @AspectJ 切面已经用  &lt;code&gt;javac&lt;/code&gt;  的  &lt;code&gt;-parameters&lt;/code&gt;  标志进行了编译，你就不需要添加  &lt;code&gt;argNames&lt;/code&gt;  属性，因为编译器会保留所需的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面的例子显示了如何使用  &lt;code&gt;argNames&lt;/code&gt;  属性。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    value = &amp;quot;com.xyz.Pointcuts.publicMethod() &amp;amp;&amp;amp; target(bean) &amp;amp;&amp;amp; @annotation(auditable)&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    argNames = &amp;quot;bean,auditable&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object bean, Auditable auditable)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;AuditCode&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; auditable.value();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ... use code and bean&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的 pointcut。声明  &lt;code&gt;bean&lt;/code&gt;  和  &lt;code&gt;auditable&lt;/code&gt;  为参数名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果第一个参数是  &lt;code&gt;JoinPoint&lt;/code&gt; 、 &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  或  &lt;code&gt;JoinPoint.StaticPart&lt;/code&gt;  类型，你可以在  &lt;code&gt;argNames&lt;/code&gt;  属性的值中省略参数的名称。例如，如果你修改前面的 advice 来接收连接点（join point）对象， &lt;code&gt;argNames&lt;/code&gt;  属性不需要包括它。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    value = &amp;quot;com.xyz.Pointcuts.publicMethod() &amp;amp;&amp;amp; target(bean) &amp;amp;&amp;amp; @annotation(auditable)&amp;quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;    argNames = &amp;quot;bean,auditable&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(JoinPoint jp, Object bean, Auditable auditable)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;AuditCode&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; auditable.value();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ... use code, bean, and jp&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的 pointcut。声明  &lt;code&gt;bean&lt;/code&gt;  和  &lt;code&gt;auditable&lt;/code&gt;  为参数名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给予  &lt;code&gt;JoinPoint&lt;/code&gt; 、 &lt;code&gt;ProceedingJoinPoint&lt;/code&gt;  或  &lt;code&gt;JoinPoint.StaticPart&lt;/code&gt;  类型的第一个参数的特殊处理，对于不收集任何其他连接点上下文的 advice 方法特别方便。在这种情况下，你可以省略  &lt;code&gt;argNames&lt;/code&gt;  属性。例如，下面的 advice 不需要声明  &lt;code&gt;argNames&lt;/code&gt;  属性。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Before(&amp;quot;com.xyz.Pointcuts.publicMethod()&amp;quot;)&lt;/span&gt; &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;audit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(JoinPoint jp)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// ... use jp&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;引用 “&lt;a href=&#34;https://springdoc.cn/spring/core.html#aop-pointcuts-combining&#34;&gt;组合切点（Pointcut）表达式&lt;/a&gt;” 中定义的  &lt;code&gt;publicMethod&lt;/code&gt;  命名的 pointcut。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h1&gt;
&lt;h2 id=&#34;事务概述&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务概述&#34;&gt;#&lt;/a&gt; 事务概述&lt;/h2&gt;
&lt;p&gt;在一个业务流程当中，通常需要多条  &lt;code&gt;DML&lt;/code&gt;  语句共同联合才能完成，这多条  &lt;code&gt;DML&lt;/code&gt;  语句必须同时成功，或者同时失败，这样才能保证数据的安全。&lt;/p&gt;
&lt;p&gt;事务的四个处理过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;开启事务 ( &lt;code&gt;start transaction&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;执行核心业务代码&lt;/li&gt;
&lt;li&gt;提交事务（如果核心业务处理过程中没有出现异常）( &lt;code&gt;commit transaction&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;回滚事务（如果核心业务处理过程中出现异常）( &lt;code&gt;rollback transaction&lt;/code&gt; )&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;spring对事务的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对事务的支持&#34;&gt;#&lt;/a&gt; Spring 对事务的支持&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编程式事务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过编写代码的方式来实现事务的管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;声明式事务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于注解方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 XML 配置方式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;   专门针对事务开发了一套  &lt;code&gt;API&lt;/code&gt; ， &lt;code&gt;API&lt;/code&gt;  的核心接口如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PlatformTransactionManager&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TransactionManager&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    TransactionStatus &lt;span class=&#34;hljs-title function_&#34;&gt;getTransaction&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TransactionDefinition definition)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; TransactionException;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TransactionStatus status)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; TransactionException;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;rollback&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TransactionStatus status)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; TransactionException;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;PlatformTransactionManager&lt;/code&gt;  接口： &lt;code&gt;spring&lt;/code&gt;   事务管理器的核心接口。在 ** &lt;code&gt;Spring6&lt;/code&gt; ** 中它有两个实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataSourceTransactionManager&lt;/code&gt; ：支持 &lt;code&gt;JdbcTemplate&lt;/code&gt; 、 &lt;code&gt;MyBatis&lt;/code&gt; 、 &lt;code&gt;Hibernate&lt;/code&gt;  等事务管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JtaTransactionManager&lt;/code&gt; ：支持分布式事务管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;声明式事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#声明式事务&#34;&gt;#&lt;/a&gt; 声明式事务&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  框架的声明式事务管理是通过  &lt;code&gt;Spring&lt;/code&gt;  面向切面编程（ &lt;code&gt;AOP&lt;/code&gt; ）实现的。然而，由于事务方面的代码是随  &lt;code&gt;Spring&lt;/code&gt;  框架的发布而来，并且可以以模板的方式使用，所以一般不需要理解  &lt;code&gt;AOP&lt;/code&gt;  的概念来有效地使用这些代码。&lt;/p&gt;
&lt;h3 id=&#34;注解实现&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#注解实现&#34;&gt;#&lt;/a&gt; 注解实现&lt;/h3&gt;
&lt;p&gt;使用注解  &lt;code&gt;@Transactional&lt;/code&gt;  注解方法或者类，则可以为方法添加事务管理。&lt;/p&gt;
&lt;h4 id=&#34;xml配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#xml配置&#34;&gt;#&lt;/a&gt; xml 配置&lt;/h4&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--配置数据源--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driverClassName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--通过数据源配置DataSourceTransactionManager--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--对指定事务管理器开启声明式事务注解--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;tx:annotation-driven&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;transaction-manager&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;配置类配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置类配置&#34;&gt;#&lt;/a&gt; 配置类配置&lt;/h4&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ComponentScan(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        basePackages = &amp;#123;&amp;quot;com.jhy.bank&amp;quot;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        excludeFilters = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;            @ComponentScan.Filter(type = FilterType.ANNOTATION,classes = &amp;#123;Data.class&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@PropertySource(&amp;quot;jdbc.properties&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@EnableTransactionManagement&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//开启声明式事务&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MyConfiguration&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.driver&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String driver;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.url&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String url;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.username&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String username;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Value(&amp;quot;$&amp;#123;jdbc.password&amp;#125;&amp;quot;)&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String password;&lt;br&gt;	&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//配置数据源&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; DruidDataSource &lt;span class=&#34;hljs-title function_&#34;&gt;dataSource&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;DruidDataSource&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;druidDataSource&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;DruidDataSource&lt;/span&gt;();&lt;br&gt;        druidDataSource.setUrl(url);&lt;br&gt;        druidDataSource.setDriverClassName(driver);&lt;br&gt;        druidDataSource.setUsername(username);&lt;br&gt;        druidDataSource.setPassword(password);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; druidDataSource;&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//通过数据源配置DataSourceTransactionManager&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Bean&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; DataSourceTransactionManager &lt;span class=&#34;hljs-title function_&#34;&gt;transactionManager&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DataSource dataSource)&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;DataSourceTransactionManager&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dataSourceTransactionManager&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;DataSourceTransactionManager&lt;/span&gt;();&lt;br&gt;        dataSourceTransactionManager.setDataSource(dataSource);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; dataSourceTransactionManager;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;然后就可以使用注解  &lt;code&gt;@Transactional&lt;/code&gt;  开启声明式事务&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;transactional设置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#transactional设置&#34;&gt;#&lt;/a&gt; @Transactional 设置&lt;/h4&gt;
&lt;p&gt;默认的  &lt;code&gt;@Transactional&lt;/code&gt;  设置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;propagation&lt;/code&gt;  （传播）设置为  &lt;code&gt;PROPAGATION_REQUIRED&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;隔离级别是  &lt;code&gt;ISOLATION_DEFAULT&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;事务是读写的。&lt;/li&gt;
&lt;li&gt;事务超时默认为底层事务系统的默认超时，如果不支持超时，则默认为无。&lt;/li&gt;
&lt;li&gt;任何  &lt;code&gt;RuntimeException&lt;/code&gt;  或  &lt;code&gt;Error&lt;/code&gt;  都会触发回滚，而任何被检查的  &lt;code&gt;Exception&lt;/code&gt;  则不会。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以改变这些默认设置。下表总结了  &lt;code&gt;@Transactional&lt;/code&gt;  注解的各种属性：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;类型&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://springdoc.cn/spring/data-access.html#tx-multiple-tx-mgrs-with-attransactional&#34;&gt;value&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的  &lt;code&gt;qualifier&lt;/code&gt; ，指定要使用的事务管理器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;transactionManager&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;value&lt;/code&gt;  别名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;label&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;  标签数组，用于为事务添加表达式描述。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标签可以由事务管理器评估，以便将特定于实现的行为与实际事务联系起来。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[propagation](# 事务传播（Propagation）)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;enum&lt;/code&gt; :  &lt;code&gt;Propagation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的  &lt;code&gt;propagation&lt;/code&gt;  （传播）设置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%EF%BC%88Isolation%EF%BC%89&#34;&gt;isolation&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;enum&lt;/code&gt; :  &lt;code&gt;Isolation&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的隔离级别。仅适用于  &lt;code&gt;REQUIRED&lt;/code&gt;  或  &lt;code&gt;REQUIRES_NEW&lt;/code&gt;  的传播值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E4%BA%8B%E5%8A%A1%E8%B6%85%E6%97%B6%EF%BC%88timeout%EF%BC%89&#34;&gt;timeout&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;int&lt;/code&gt;  (以秒为单位的粒度)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的事务超时。仅适用于  &lt;code&gt;REQUIRED&lt;/code&gt;  或  &lt;code&gt;REQUIRES_NEW&lt;/code&gt;  的传播值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;timeoutString&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;String&lt;/code&gt;  (以秒为单位的粒度)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于指定以秒为单位的  &lt;code&gt;timeout&lt;/code&gt; ，作为  &lt;code&gt;String&lt;/code&gt;  值的替代方案，例如，作为占位符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E5%8F%AA%E8%AF%BB%E4%BA%8B%E5%8A%A1%EF%BC%88readOnly%EF%BC%89&#34;&gt;readOnly&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;读写事务与只读事务。只适用于  &lt;code&gt;REQUIRED&lt;/code&gt;  或  &lt;code&gt;REQUIRES_NEW&lt;/code&gt;  的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E5%BC%82%E5%B8%B8%E5%9B%9E%E6%BB%9A%EF%BC%88rollbackFor%EF%BC%89&#34;&gt;rollbackFor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;Class&lt;/code&gt;  对象的数组，必须从  &lt;code&gt;Throwable&lt;/code&gt;  派生。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的必然会引起回滚的异常类型数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rollbackForClassName&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异常名称模式（pattern）的数组。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的必然会引起回滚异常名称模式（ &lt;code&gt;patterns&lt;/code&gt; ）数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;#%E5%BC%82%E5%B8%B8%E4%B8%8D%E5%9B%9E%E6%BB%9A%EF%BC%88rollbackFor&#34;&gt;noRollbackFor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;必须从  &lt;code&gt;Throwable&lt;/code&gt;  派生的  &lt;code&gt;Class&lt;/code&gt;  对象的数组。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的不会引起回滚的  &lt;code&gt;exception&lt;/code&gt;  类型数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;noRollbackForClassName&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;异常名称模式（pattern）的数组。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;可选的不会引起回滚异常名称模式（ &lt;code&gt;patterns&lt;/code&gt; ）数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;事务传播propagation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务传播propagation&#34;&gt;#&lt;/a&gt; 事务传播（Propagation）&lt;/h5&gt;
&lt;p&gt;一共有七种传播行为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REQUIRED：支持当前事务，如果不存在当前事务就新建一个 (默认)&lt;strong&gt;【没有就新建，有就加入】&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行 **【有就加入，没有就不管了】**&lt;/li&gt;
&lt;li&gt;MANDATORY：必须运行在一个事务中，如果当前没有事务，就会抛出一个异常 **【有就加入，没有就抛异常】**&lt;/li&gt;
&lt;li&gt;REQUIRES_NEW：开启一个新的事务，如果一个事务已经存在，则将这个存在的事务挂起 **【不管有没有，直接开启一个新事务，开启的新事务和之前的事务不存在嵌套关系，之前事务被挂起】**&lt;/li&gt;
&lt;li&gt;NOT_SUPPORTED：以非事务方式运行，如果当前有事务存在，则挂起当前事务 **【不支持事务，存在就挂起】**&lt;/li&gt;
&lt;li&gt;NEVER：以非事务方式运行，如果有一个事务存在，抛出异常 **【不支持事务，存在就抛异常】**&lt;/li&gt;
&lt;li&gt;NESTED：如果当前正有一个事务在进行中，则该方法应当运行在一个嵌套式事务中。被嵌套的事务可以独立于外层事务进行提交或回滚。如果外层事务不存在，行为就像 REQUIRED 一样。&lt;strong&gt;【有事务的话，就在这个事务里再嵌套一个完全独立的事务，嵌套的事务可以独立的提交和回滚。没有事务就和 REQUIRED 一样。】&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;事务隔离级别isolation&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务隔离级别isolation&#34;&gt;#&lt;/a&gt; 事务隔离级别（Isolation）&lt;/h5&gt;
&lt;p&gt;数据库中读取数据存在的三大问题：（三大读问题）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;脏读：读取到没有提交到数据库的数据，叫做脏读。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;  先进来修改了数据但未提交，此时切换至 &lt;code&gt;b&lt;/code&gt; ， &lt;code&gt;b&lt;/code&gt;  读取该数据，此后切换至 &lt;code&gt;a&lt;/code&gt;  提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不可重复读：在同一个事务当中，第一次和第二次读取的数据不一样。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;  先进来读取了数据，然后切换至 &lt;code&gt;b&lt;/code&gt;  修改了数据并进行提交，此后切换至 &lt;code&gt;a&lt;/code&gt;  重新读取了数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;幻读：读到的数据是假的。&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;  先进来但未开始读取数据，然后切换至 &lt;code&gt;b&lt;/code&gt;  修改了数据并提交，此后切换至 &lt;code&gt;a&lt;/code&gt;  开始读取数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;事务隔离级别包括四个级别，分别解决上述问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;读未提交： &lt;code&gt;READ_UNCOMMITTED&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种隔离级别，存在脏读问题，所谓的脏读 (dirty read) 表示能够读取到其它事务未提交的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读提交： &lt;code&gt;READ_COMMITTED&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决了脏读问题，其它事务提交之后才能读到，但存在不可重复读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可重复读： &lt;code&gt;REPEATABLE_READ&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决了不可重复读，可以达到可重复读效果，只要当前事务不结束，读取到的数据一直都是一样的。但存在幻读问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;序列化： &lt;code&gt;SERIALIZABLE&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决了幻读问题，事务排队执行。不支持并发。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;隔离级别&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;脏读&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;不可重复读&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;幻读&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;读未提交&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;读提交&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可重复读&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;有&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;序列化&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;Spring&lt;/code&gt;  中事务隔离有 &lt;strong&gt;5&lt;/strong&gt; 种情况：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Isolation&lt;/span&gt; &amp;#123;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//默认，数据库未Mysql则为可重复读，Oracle则为读未提交&lt;/span&gt;&lt;br&gt;	DEFAULT(TransactionDefinition.ISOLATION_DEFAULT),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//读未提交&lt;/span&gt;&lt;br&gt;	READ_UNCOMMITTED(TransactionDefinition.ISOLATION_READ_UNCOMMITTED),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//读可提交&lt;/span&gt;&lt;br&gt;	READ_COMMITTED(TransactionDefinition.ISOLATION_READ_COMMITTED),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//可重复度&lt;/span&gt;&lt;br&gt;	REPEATABLE_READ(TransactionDefinition.ISOLATION_REPEATABLE_READ),&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//序列化&lt;/span&gt;&lt;br&gt;	SERIALIZABLE(TransactionDefinition.ISOLATION_SERIALIZABLE);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&#34;事务超时timeout&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务超时timeout&#34;&gt;#&lt;/a&gt; 事务超时（timeout）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(timeout = 10)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以秒为单位，如果&lt;strong&gt;指定时间&lt;/strong&gt;内  &lt;code&gt;DML&lt;/code&gt;  语句还未执行完成 &lt;strong&gt;最终结果会选择回滚。&lt;/strong&gt;，那么则会抛出错误。默认值 - 1，表示没有时间限制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;指定时间：指的是从最后一条事务语句结束之前的时间，在这后的时间都不算&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;只读事务readonly&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#只读事务readonly&#34;&gt;#&lt;/a&gt; 只读事务（readOnly）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(readOnly = true)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将当前事务设置为只读事务，在该事务执行过程中只允许  &lt;code&gt;select&lt;/code&gt;  语句执行，其余的  &lt;code&gt;DML&lt;/code&gt;  语句均不会允许执行。&lt;/p&gt;
&lt;h5 id=&#34;异常回滚rollbackfor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常回滚rollbackfor&#34;&gt;#&lt;/a&gt; 异常回滚（rollbackFor）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(rollbackFor = RuntimeException.class)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置发生了哪些异常才会回滚&lt;/p&gt;
&lt;h5 id=&#34;异常不回滚rollbackfor&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#异常不回滚rollbackfor&#34;&gt;#&lt;/a&gt; 异常不回滚（rollbackFor）&lt;/h5&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Transactional(noRollbackFor = NullPointerException.class)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;设置发生哪些异常不会回滚&lt;/p&gt;
&lt;h1 id=&#34;测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试&#34;&gt;#&lt;/a&gt; 测试&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  提供了一套  &lt;code&gt;API&lt;/code&gt;  对  &lt;code&gt;junit&lt;/code&gt;  进行了整合&lt;/p&gt;
&lt;h2 id=&#34;spring对junit4的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对junit4的支持&#34;&gt;#&lt;/a&gt; Spring 对 JUnit4 的支持&lt;/h2&gt;
&lt;p&gt;首先需要以下的依赖：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--Spring整合JUnit的依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--junit4依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.13.2&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@RunWith(SpringJUnit4ClassRunner.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ContextConfiguration(&amp;quot;classpath:spring.xml&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//@ContextConfiguration(classes = MyConfiguration.class) 配置类的形式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SpringJUnit4Test&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;br&gt;  	&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; User user;    &lt;br&gt;    &lt;br&gt;   &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testFoo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt; .....&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;spring对junit5的支持&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#spring对junit5的支持&#34;&gt;#&lt;/a&gt; Spring 对 JUnit5 的支持&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--Spring整合JUnit的依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--junit5依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.junit.jupiter&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit-jupiter-api&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.10.0&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ExtendWith(SpringExtension.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@ContextConfiguration(&amp;quot;classpath:spring.xml&amp;quot;)&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//@ContextConfiguration(classes = MyConfiguration.class) 配置类的形式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SpringJUnit4Test&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;br&gt;  	&lt;span class=&#34;hljs-meta&#34;&gt;@Autowired&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; User user;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testFoo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        ......&lt;br&gt;    &amp;#125;&lt;br&gt; .....&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;现在你不需要像以前那样获取  &lt;code&gt;IoC&lt;/code&gt;  容器之后再获取  &lt;code&gt;bean&lt;/code&gt;  ，而是可以通过自动装配的方式来获取  &lt;code&gt;bean&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;整合mybtias&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#整合mybtias&#34;&gt;#&lt;/a&gt; 整合 Mybtias&lt;/h1&gt;
&lt;p&gt;将步骤分为 &lt;strong&gt;11&lt;/strong&gt; 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;导入依赖&lt;/li&gt;
&lt;li&gt;编写三层架构&lt;/li&gt;
&lt;li&gt;创建  &lt;code&gt;pojo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%BC%96%E5%86%99Mybatis%E7%9A%84%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6&#34;&gt;编写 Mybatis 的核心配置文件&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;该文件可以没有，大部分的配置可以转移到  &lt;code&gt;Spring&lt;/code&gt;  配置文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编写  &lt;code&gt;mapper&lt;/code&gt;  映射文件&lt;/li&gt;
&lt;li&gt;配置  &lt;code&gt;IoC&lt;/code&gt;  容器中三层架构的  &lt;code&gt;bean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90&#34;&gt;配置数据源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AESqlSessionFactoryBean&#34;&gt;配置 SqlSessionFactoryBean&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;用于生产  &lt;code&gt;SqlSessionFactory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AEmapper%E6%8E%A5%E5%8F%A3%E6%89%AB%E6%8F%8F%E5%99%A8&#34;&gt;配置 mapper 接口扫描器&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;用于将  &lt;code&gt;mapper&lt;/code&gt;  接口的代理类注册为  &lt;code&gt;bean&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%85%8D%E7%BD%AE%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8&#34;&gt;配置事务管理器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%BC%80%E5%90%AF%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1&#34;&gt;开启声明式事务&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编写mybatis的核心配置文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#编写mybatis的核心配置文件&#34;&gt;#&lt;/a&gt; 编写 Mybatis 的核心配置文件&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;?xml version=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt; encoding=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mybatis的总配置文件--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;&amp;lt;!DOCTYPE &lt;span class=&#34;hljs-keyword&#34;&gt;configuration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;PUBLIC&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;   	&lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	关于Mybatis环境、数据源等移动至Spring配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	核心设置必须在该配置文件中配置&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mapUnderscoreToCamelCase&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;logImpl&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;STDOUT_LOGGING&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;settings&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置数据源&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置数据源&#34;&gt;#&lt;/a&gt; 配置数据源&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;context:property-placeholder&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;location&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;classpath:jdbc.properties&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.alibaba.druid.pool.DruidDataSource&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;driverClassName&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.driver&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.username&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.password&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;url&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;$&amp;#123;jdbc.url&amp;#125;&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置sqlsessionfactorybean&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置sqlsessionfactorybean&#34;&gt;#&lt;/a&gt; 配置 SqlSessionFactoryBean&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.mybatis.spring.SqlSessionFactoryBean&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--注入数据源--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;configLocation&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mybatis-config.xml&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--配置文件所在位置--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;typeAliasesPackage&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.acct.entity&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--起别名--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--如果mapper映射文件和接口不在同一目录要设置该属性--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mapperLocations&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com/jhy/acct/mapper/*.xml&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mapper映射文件所在地--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;配置mapper接口扫描器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置mapper接口扫描器&#34;&gt;#&lt;/a&gt; 配置 mapper 接口扫描器&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.mybatis.spring.mapper.MapperScannerConfigurer&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;basePackage&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;value&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;com.jhy.acct.mapper&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mapper接口的包路径--&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;/code&gt;  会默认扫描指定包下的  &lt;code&gt;Mapper&lt;/code&gt;  接口，并根据命名规则自动加载对应的  &lt;code&gt;Mapper&lt;/code&gt;  映射文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;配置事务管理器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置事务管理器&#34;&gt;#&lt;/a&gt; 配置事务管理器&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;id&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;class&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;property&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;name&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;ref&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dataSource&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;bean&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;开启声明式事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启声明式事务&#34;&gt;#&lt;/a&gt; 开启声明式事务&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;tx:annotation-driven&lt;/span&gt; &lt;span class=&#34;hljs-attr&#34;&gt;transaction-manager&lt;/span&gt;=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;transactionManager&amp;quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;依赖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依赖&#34;&gt;#&lt;/a&gt; 依赖&lt;/h2&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--mysql驱动--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.mysql&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mysql-connector-j&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;8.0.33&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--spring上下文，同时引入aop，bean，core，expression--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--druid数据源--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.alibaba&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;druid&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;1.2.13&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入mybatis官方提供的mybatis与spring整合的依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis-spring&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.3&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;     &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入spring-jdbc，包括事务管理器--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-jdbc&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入junit依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.13.2&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入spring-test--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-test&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;6.1.4&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入jakarta的注解，包括@Resource--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;jakarta.annotation-api&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.1.1&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!--引入mybatis本体依赖--&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;mybatis&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.5.11&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependencies&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
