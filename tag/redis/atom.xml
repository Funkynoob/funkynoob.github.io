<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.riversea.top</id>
    <title>Funkynoob的个人博客 • Posts by &#34;redis&#34; tag</title>
    <link href="https://blog.riversea.top" />
    <updated>2024-03-18T13:20:07.000Z</updated>
    <category term="docker" />
    <category term="Git" />
    <category term="Nginx" />
    <category term="ORM框架" />
    <category term="MyBatis" />
    <category term="redis" />
    <category term="spring" />
    <entry>
        <id>https://blog.riversea.top/2024/03/18/redis/</id>
        <title>redis</title>
        <link rel="alternate" href="https://blog.riversea.top/2024/03/18/redis/"/>
        <content type="html">&lt;link rel=&#34;stylesheet&#34; class=&#34;aplayer-secondary-style-marker&#34; href=&#34;\assets\css\APlayer.min.css&#34;&gt;&lt;script src=&#34;\assets\js\APlayer.min.js&#34; class=&#34;aplayer-secondary-script-marker&#34;&gt;&lt;/script&gt;&lt;script class=&#34;meting-secondary-script-marker&#34; src=&#34;\assets\js\Meting.min.js&#34;&gt;&lt;/script&gt;&lt;h1 id=&#34;持久化&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#持久化&#34;&gt;#&lt;/a&gt; 持久化&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了持久化策略， &lt;code&gt;redis&lt;/code&gt;  会将内存中的数据持久化到磁盘中存储避免了断电之后，内存中的数据消失。当再次重启  &lt;code&gt;redis&lt;/code&gt;  服务器后， &lt;code&gt;redis&lt;/code&gt;  会读取磁盘文件加载进内存，将数据恢复至之前的状态。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了四种持久化策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;RDB&lt;/code&gt; &lt;/strong&gt; ( &lt;code&gt;Redis Database&lt;/code&gt; ): 使用该策略， &lt;code&gt;redis&lt;/code&gt;  会为数据库的数据在指定的时间间隔中生成一份时间点快照。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;AOF&lt;/code&gt; &lt;/strong&gt; (Append Only File): 使用该策略， &lt;code&gt;redis&lt;/code&gt;  会记录每次服务器收到的&lt;strong&gt;写&lt;/strong&gt;的操作。这些操作会在服务器启动的时候重新运行以便能够重新构建起原始的数据库。这些&lt;strong&gt;写&lt;/strong&gt;操作会按照  &lt;code&gt;redis&lt;/code&gt;  的协议以同样的格式被日志记录&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;No persistence&lt;/code&gt; &lt;/strong&gt;: 你可以完全禁用持久化。这有时候是在缓存的时候使用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; &lt;code&gt;RDB + AOF&lt;/code&gt; &lt;/strong&gt;: 你也可以在在同一次运行中结合使用  &lt;code&gt;AOF&lt;/code&gt;  和  &lt;code&gt;RDB&lt;/code&gt;  两种策略&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb&#34;&gt;#&lt;/a&gt; RDB&lt;/h2&gt;
&lt;p&gt;实现类似照片记录效果的方式，就是把某一时刻的数据和状态以文件的形式写到磁盘上，也就是快照。这样一来即使故障宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。这个快照文件就称为  &lt;code&gt;RDB&lt;/code&gt;  文件 (文件名默认为： &lt;code&gt;dump.rdb&lt;/code&gt; )，其中， &lt;code&gt;RDB&lt;/code&gt;  就是  &lt;code&gt;Redis DataBase&lt;/code&gt;  的缩写。&lt;/p&gt;
&lt;p&gt;当服务器再次重启后，服务器将会读取这个快照文件，恢复整个数据集。&lt;/p&gt;
&lt;h3 id=&#34;如何开启rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何开启rdb&#34;&gt;#&lt;/a&gt; 如何开启 RDB&lt;/h3&gt;
&lt;p&gt;进入  &lt;code&gt;redis&lt;/code&gt;  配置文件，大概在  &lt;code&gt;418&lt;/code&gt;  行，你将会看到如下的话：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs c&#34;&gt;################################ SNAPSHOTTING  ################################&lt;br&gt;&lt;br&gt;# Save the DB to disk.&lt;br&gt;#&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# save &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;seconds&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;changes&amp;gt;&lt;/span&gt; [&lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;seconds&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;changes&amp;gt;&lt;/span&gt; ...]&lt;/span&gt;&lt;br&gt;#&lt;br&gt;# Redis will save the DB &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; the given number of seconds elapsed and it&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# surpassed the given number of write operations against the DB.&lt;/span&gt;&lt;br&gt;#&lt;br&gt;# Snapshotting can be completely disabled with a single empty &lt;span class=&#34;hljs-built_in&#34;&gt;string&lt;/span&gt; argument&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# as in following example:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# save &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;#&lt;br&gt;# Unless specified otherwise, by &lt;span class=&#34;hljs-keyword&#34;&gt;default&lt;/span&gt; Redis will save the DB:&lt;br&gt;#   * After &lt;span class=&#34;hljs-number&#34;&gt;3600&lt;/span&gt; seconds (an hour) &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; at least &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt; change was performed&lt;br&gt;#   * After &lt;span class=&#34;hljs-number&#34;&gt;300&lt;/span&gt; seconds (&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt; minutes) &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; at least &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt; changes were performed&lt;br&gt;#   * After &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt; seconds &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; at least &lt;span class=&#34;hljs-number&#34;&gt;10000&lt;/span&gt; changes were performed&lt;br&gt;#&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;原来  &lt;code&gt;redis&lt;/code&gt;  默认已经开启了  &lt;code&gt;RDB&lt;/code&gt;  且遵守以下策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 60 秒之后，如果至少有 10000 次改变被执行&lt;/li&gt;
&lt;li&gt;在 5 分钟之后，如果至少有 100 次变化被执行&lt;/li&gt;
&lt;li&gt;在 1 小时之后，如果至少有 1 次变化被执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果上面的规定至少有一个被遵守， &lt;code&gt;redis&lt;/code&gt;  将会自动触发  &lt;code&gt;RDB&lt;/code&gt;  持久化，为此刻的数据生成快照，然后将其保存在为以  &lt;code&gt;rdb&lt;/code&gt;  为后缀的二进制文件，文件名默认为 &lt;code&gt;dump.rdb&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你可以以如下的形式重载  &lt;code&gt;redis&lt;/code&gt;  默认的  &lt;code&gt;RDB&lt;/code&gt;  持久化规则：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;save &amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt; [&amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt; ...]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  会当  &lt;code&gt;&amp;lt;seconds&amp;gt;&lt;/code&gt;  秒消逝，并且累计的  &lt;code&gt;&amp;lt;changes&amp;gt;&lt;/code&gt;  个数的写操作被执行后，自动保存数据库。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意是在每个时间区间内，一旦写操作&lt;strong&gt;累积&lt;/strong&gt;到了设定的数就会触发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;禁用rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#禁用rdb&#34;&gt;#&lt;/a&gt; 禁用 RDB&lt;/h3&gt;
&lt;p&gt;在配置文件中可以使用一个简单的配置来禁用  &lt;code&gt;RDB&lt;/code&gt;  持久化策略，在  &lt;code&gt;redis&lt;/code&gt;  中有以下描述：&lt;/p&gt;
&lt;figure class=&#34;highlight clean&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs clean&#34;&gt;# Snapshotting can be completely disabled &lt;span class=&#34;hljs-keyword&#34;&gt;with&lt;/span&gt; a single empty string argument&lt;br&gt;# &lt;span class=&#34;hljs-keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;in&lt;/span&gt; following example:&lt;br&gt;快照化可以用下面的例子，使用单个空的字符串参数来完全禁用：&lt;br&gt;# save &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;配置rdb&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置rdb&#34;&gt;#&lt;/a&gt; 配置 RDB&lt;/h3&gt;
&lt;p&gt;如何更改默认文件名，来到配置文件的大概  &lt;code&gt;481&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The filename where to dump the DB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;dbfilename&lt;/span&gt; dump.rdb&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以通过更改  &lt;code&gt;dbfilename&lt;/code&gt;  的值来修改  &lt;code&gt;RDB&lt;/code&gt;  文件的名字。&lt;/p&gt;
&lt;p&gt;如何更改文件存储路径，来到配置文件的大概  &lt;code&gt;502&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The working directory.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The DB will be written inside this directory, with the filename specified&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# above using the &amp;#x27;dbfilename&amp;#x27; configuration directive.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The Append Only File will also be created inside this directory.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Note that you must specify a directory here, not a file name.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;dir&lt;/span&gt; ./&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以通过修改  &lt;code&gt;dir&lt;/code&gt;  的值来修改  &lt;code&gt;RDB&lt;/code&gt;  的存储路径。&lt;/p&gt;
&lt;h3 id=&#34;手动保存&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动保存&#34;&gt;#&lt;/a&gt; 手动保存&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;   提供了两个命令来手动保存  &lt;code&gt;RDB&lt;/code&gt;  文件： &lt;code&gt;save&lt;/code&gt;  ， &lt;code&gt;bgsave&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;save&lt;/code&gt;  以同步的方式执行保存操作，会阻塞进程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bgsave&lt;/code&gt;  以异步的方式执行保存操作，不会阻塞进程&lt;/p&gt;
&lt;p&gt;当你运行上述命令时，会为当前  &lt;code&gt;redis&lt;/code&gt;   实例中的所有数据生成一个以  &lt;code&gt;RDB&lt;/code&gt;  文件的格式的快照。&lt;/p&gt;
&lt;p&gt;你绝对不应该在生产环境中使用  &lt;code&gt;save&lt;/code&gt;   命令，当你运行该命令时，会阻塞所有客户端的请求，服务器将不再接受所有客户端的请求，直到保存操作结束。&lt;/p&gt;
&lt;p&gt;实际上， &lt;code&gt;redis&lt;/code&gt;  的自动保存正是调用的  &lt;code&gt;bgsave&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在生产环境中必须使用  &lt;code&gt;bgsave&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;rdb的优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb的优点&#34;&gt;#&lt;/a&gt; RDB 的优点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RDB&lt;/code&gt;  是一个非常紧凑的单时间点代表  &lt;code&gt;Redis&lt;/code&gt;  数据的单文件。 &lt;code&gt;RDB&lt;/code&gt;  文件非常适合于备份。举个例子，你可能想每个小时归档你的  &lt;code&gt;RDB&lt;/code&gt;  文件，或者每天保存一次  &lt;code&gt;RDB&lt;/code&gt;  快照。这样允许你非常轻松的恢复不同版本的数据以防灾难的发生。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDB&lt;/code&gt;  非常适合于灾难性的数据恢复，因为单文件的结构可以被运输至远程的数据中心。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDB&lt;/code&gt;  最大化  &lt;code&gt;redis&lt;/code&gt;  的功能，因为  &lt;code&gt;redis&lt;/code&gt;  的父进程为了完成持久化的唯一的工作就是  &lt;code&gt;fork&lt;/code&gt;  子进程，然后剩余的工作都交给子进程。父进程并不会执行  &lt;code&gt;I/O&lt;/code&gt;  操作。&lt;/li&gt;
&lt;li&gt;对比  &lt;code&gt;AOF&lt;/code&gt; ， &lt;code&gt;RDB&lt;/code&gt;  在大数据的情况下，能够进行快速重启。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rdb的缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rdb的缺点&#34;&gt;#&lt;/a&gt; RDB 的缺点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RDB&lt;/code&gt;  不是一个好选择，如果你想减少数据丢失的可能性以防  &lt;code&gt;redis&lt;/code&gt;  异常的停止工作。你可以配置不同的  &lt;code&gt;RDB&lt;/code&gt;  创建的时间点。然而，你会经常每 5 分钟或者更久的时间创建一个  &lt;code&gt;RDB&lt;/code&gt;   快照，所以在   &lt;code&gt;redis&lt;/code&gt;   没有正常进行  &lt;code&gt;shutdown&lt;/code&gt;  的莫名情况停止工作的情况下，你应该准备好丢失最新几分钟的数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt; RDB&lt;/code&gt;  需要经常调用  &lt;code&gt;fork()&lt;/code&gt;  以使用子进程进行持久化。 &lt;code&gt;fork()&lt;/code&gt;  有时会很消耗时间，如果数据库的我数据很大的话，并且如果数据很大，且  &lt;code&gt;cpu&lt;/code&gt;  的性能不是很好，将会导致  &lt;code&gt;redis&lt;/code&gt;  在几微秒甚至 1 秒的时间停止服务客户端。 &lt;code&gt;AOF&lt;/code&gt;  也会使用  &lt;code&gt;fork()&lt;/code&gt;  但是不会如此频繁，并且你也可以自定义重新写入日志的频率且不用担心任何耐用性的损失。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数据检查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据检查&#34;&gt;#&lt;/a&gt; 数据检查&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了一个工具用来检查  &lt;code&gt;RDB&lt;/code&gt;   文件的格式是否正确：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis－check－rdb &amp;lt;/path/to/rdb/file&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果  &lt;code&gt;RDB&lt;/code&gt;  文件损坏，该命令能检查出来。如果加载坏的  &lt;code&gt;RDB&lt;/code&gt;  文件，那么  &lt;code&gt;redis&lt;/code&gt;  客户端将无法执行命令，会弹出  &lt;code&gt;not connected&lt;/code&gt;  字样&lt;/p&gt;
&lt;h2 id=&#34;aof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof&#34;&gt;#&lt;/a&gt; AOF&lt;/h2&gt;
&lt;p&gt;快照不总是耐用的。如果你的计算机上的正在运行的  &lt;code&gt;redis&lt;/code&gt;  停止了、断电了、或者你意外地使用  &lt;code&gt;kill －9&lt;/code&gt;   杀死了你的实例，最新写入  &lt;code&gt;redis&lt;/code&gt;  的数据将会丢失。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  是  &lt;code&gt;RDB&lt;/code&gt;  的一个更充满耐用性的替代品。在  &lt;code&gt;1.1&lt;/code&gt;  版本开始了使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  以日志的形式记录每一次 ** 写操作，** 且不记录任何形式的读操作。当服务器重新启动的时候会读取日志记录，重新执行以构建原来的数据。&lt;/p&gt;
&lt;h3 id=&#34;开启aof&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启aof&#34;&gt;#&lt;/a&gt; 开启 AOF&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  没有默认开启  &lt;code&gt;AOF&lt;/code&gt;  ，需要手动开启。&lt;/p&gt;
&lt;p&gt;进入配置文件，大概  &lt;code&gt;1381&lt;/code&gt;  行&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# AOF and RDB persistence can be enabled at the same time without problems.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# If the AOF is enabled on startup Redis will load the AOF, that is the file&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# with the better durability guarantees.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Please check https://redis.io/topics/persistence for more information.&lt;/span&gt;&lt;br&gt;&lt;br&gt;appendonly &lt;span class=&#34;hljs-literal&#34;&gt;no&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;将  &lt;code&gt;appendonly&lt;/code&gt;  的值改为  &lt;code&gt;yes&lt;/code&gt;  则代表开启了 &lt;code&gt;AOF&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;由文档注释可知，如果你开启了  &lt;code&gt;AOF&lt;/code&gt;  ，那么每次服务器启动的时候就只会加载  &lt;code&gt;AOF&lt;/code&gt;  文件，不管是否开启了  &lt;code&gt;RDB&lt;/code&gt;  持久化。&lt;/p&gt;
&lt;h3 id=&#34;aof文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#aof文件&#34;&gt;#&lt;/a&gt; AOF 文件&lt;/h3&gt;
&lt;p&gt;自  &lt;code&gt;redis 7.0.0&lt;/code&gt;  开始， &lt;code&gt;redis&lt;/code&gt;  使用&lt;strong&gt;多部分  &lt;code&gt;AOF&lt;/code&gt;  机制&lt;/strong&gt;。这是什么呢？原始的单  &lt;code&gt;AOF&lt;/code&gt;  文件被分割为：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;base&lt;/code&gt;  文件 (最多只有一个)：它是在创建文件时表示数据集完整状态的快照，可以为  &lt;code&gt;RDB&lt;/code&gt;  或者  &lt;code&gt;AOF&lt;/code&gt;  格式&lt;/p&gt;
&lt;p&gt;&lt;code&gt;incremental&lt;/code&gt;  文件 (可能会有多个)：包含额外的被应用在数据库的跟随旧文件的命令&lt;/p&gt;
&lt;p&gt;这两个文件会被放进一个分离的路径且会被  &lt;code&gt;manifest&lt;/code&gt;  文件追踪。&lt;/p&gt;
&lt;h4 id=&#34;文件存放位置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#文件存放位置&#34;&gt;#&lt;/a&gt; 文件存放位置&lt;/h4&gt;
&lt;p&gt;上述三种文件的存放位置，同样可以由配置文件进行配置，在配置文件大概  &lt;code&gt;1404&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Append-only file names are created by Redis following a specific pattern.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# The file name&amp;#x27;s prefix is based on the &amp;#x27;appendfilename&amp;#x27; configuration&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# parameter, followed by additional information about the sequence and type.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# For example, if appendfilename is set to appendonly.aof, the following file&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# names could be derived:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# - appendonly.aof.1.base.rdb as a base file.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# - appendonly.aof.1.incr.aof, appendonly.aof.2.incr.aof as incremental files.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# - appendonly.aof.manifest as a manifest file.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;appendfilename&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;appendonly.aof&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# For convenience, Redis stores all persistent append-only files in a dedicated&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# directory. The name of the directory is determined by the appenddirname&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# configuration parameter.&lt;/span&gt;&lt;br&gt;&lt;br&gt;appenddirname &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;appendonlydir&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据注释我们可以知道， &lt;code&gt;AOF&lt;/code&gt;  文件名字遵守一个格式：由  &lt;code&gt;appendfilename&lt;/code&gt;  的值为前缀，随后更随着序列号和类型，默认的名字为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;appendonly.aof.1.base.rdb&lt;/code&gt; ： &lt;code&gt;base&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appendonly.aof.1.incr.aof&lt;/code&gt; ,  &lt;code&gt;appendonly.aof.2.incr.aof&lt;/code&gt; ： &lt;code&gt;increment&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appendonly.aof.manifest&lt;/code&gt; ： &lt;code&gt;manifest&lt;/code&gt;  文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次进行写回后， &lt;code&gt;AOF&lt;/code&gt;  文件的序列号将会进行增加，开始序号为 1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改  &lt;code&gt;appendfilename&lt;/code&gt;  值来修改文件名的前缀&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改  &lt;code&gt;appenddirname&lt;/code&gt;  的值来修改存放路径。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意在  &lt;code&gt;redis 7&lt;/code&gt;  之后  &lt;code&gt;AOF&lt;/code&gt;  文件的存放路径由  &lt;code&gt;dir&lt;/code&gt;  +  &lt;code&gt;appenddirname&lt;/code&gt;  一起决定，即会在  &lt;code&gt;RDB&lt;/code&gt;  文件的存放路径中，放一个隔离的  &lt;code&gt;appenddirname&lt;/code&gt;  的目录来存放  &lt;code&gt;AOF&lt;/code&gt;  文件&lt;/p&gt;
&lt;h3 id=&#34;写回策略&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#写回策略&#34;&gt;#&lt;/a&gt; 写回策略&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  支持三种写回策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Always&lt;/code&gt; ：同步写回，每个写命令执行完立刻同步地将日志写回磁盘。这个策略会导致服务器非常非常的慢，当很多客户端同时请求时，客户端将会不得不等待服务器一条命令一条命令写回后再进行回复，但该策略也会很安全。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;everysec&lt;/code&gt; ：每秒写回，每个写命令执行完，只是先把日志写到  &lt;code&gt;AOF&lt;/code&gt;  文件的内存缓冲区，每隔  &lt;code&gt;1&lt;/code&gt;  秒把缓冲区中的内容写入磁盘。该策略已经足够快了，但是你可能会丢失 1 秒的数据如果服务器宕机了的话。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;no&lt;/code&gt; ：操作系统控制的写回，每个写命令执行完，只是先把日志写到  &lt;code&gt;AOF&lt;/code&gt;  文件的内存缓冲区，由操作系统决定何时将缓冲区的数据写回磁盘。该此略会更快，但会很不安全。通常， &lt;code&gt;linux&lt;/code&gt;  会每 30 秒将数据写回磁盘，但这取决于内核。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们进入配置文件，大概 1448 行：&lt;/p&gt;
&lt;figure class=&#34;highlight nginx&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs nginx&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# appendfsync always&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;appendfsync&lt;/span&gt; everysec&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# appendfsync no&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过修改  &lt;code&gt;appendfsync&lt;/code&gt;  的值来修改写回策略，根据配置文件我们可以了解到  &lt;code&gt;redis&lt;/code&gt;  默认且推荐的策略是  &lt;code&gt;everysec&lt;/code&gt;  ，该策略兼具速度并且相对的安全。&lt;/p&gt;
&lt;h3 id=&#34;日志重写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#日志重写&#34;&gt;#&lt;/a&gt; 日志重写&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  会随着写操作的次数而变得越来越大。举个例子，如果你增加了一个计数器 100 次，你会都得到一个包含了最终值的键，但是 100 次操作全部进入了你的  &lt;code&gt;AOF&lt;/code&gt;  文件，而其他 99 个操作不需要参入重建现在状态的过程。&lt;/p&gt;
&lt;p&gt;重写是完全安全的。当  &lt;code&gt;Redis&lt;/code&gt;  继续追加到旧文件时，会使用创建当前数据集所需的最少操作集生成一个全新的文件，一旦第二个文件准备就绪， &lt;code&gt;Redis&lt;/code&gt;  就会切换这两个文件并开始追加到新文件。&lt;/p&gt;
&lt;p&gt;所以  &lt;code&gt;Redis&lt;/code&gt;  支持一个有趣的功能：它能够在后台重建 AOF 而不中断对客户端的服务。每当您发出  &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  命令时， &lt;code&gt;Redis&lt;/code&gt;  都会写入在内存中重建当前数据集所需的最短命令序列。 如果您在  &lt;code&gt;Redis 2.2&lt;/code&gt;  中使用  &lt;code&gt;AOF&lt;/code&gt; ，则需要时不时地运行  &lt;code&gt;BGREWRITEAOF&lt;/code&gt; 。因为自从  &lt;code&gt;Redis 2.4&lt;/code&gt;  开始才能够自动触发日志重写。&lt;/p&gt;
&lt;p&gt;从  &lt;code&gt;Redis 7.0.0&lt;/code&gt;  开始，当计划进行  &lt;code&gt;AOF&lt;/code&gt;  重写时， &lt;code&gt;Redis&lt;/code&gt;  父进程会打开一个新的增量  &lt;code&gt;AOF&lt;/code&gt;  文件来继续写入。子进程执行重写逻辑并生成新的  &lt;code&gt;base AOF&lt;/code&gt; 。 &lt;code&gt;Redis&lt;/code&gt;  将使用临时清单文件来跟踪新生成的基础文件和增量文件。 当它们准备好时， &lt;code&gt;Redis&lt;/code&gt;  将执行原子替换操作以使这个临时清单文件生效。为了避免  &lt;code&gt;AOF&lt;/code&gt;  重写重复失败和重试时创建大量增量文件的问题， &lt;code&gt;Redis&lt;/code&gt;  引入了  &lt;code&gt;AOF&lt;/code&gt;  重写限制机制，以确保失败的  &lt;code&gt;AOF&lt;/code&gt;  重写以越来越慢的速度重试。&lt;/p&gt;
&lt;p&gt;既然说到  &lt;code&gt;Redis 2.4&lt;/code&gt;  以上地版本会自动进行重写，那么如何配置呢，来到配置文件大概 1471 行：&lt;/p&gt;
&lt;figure class=&#34;highlight apache&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs apache&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Automatic rewrite of the append only file.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Redis is able to automatically rewrite the log file implicitly calling&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# BGREWRITEAOF when the AOF log size grows by the specified percentage.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# This is how it works: Redis remembers the size of the AOF file after the&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# latest rewrite (if no rewrite has happened since the restart, the size of&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# the AOF at startup is used).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# This base size is compared to the current size. If the current size is&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# bigger than the specified percentage, the rewrite is triggered. Also&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# you need to specify a minimal size for the AOF file to be rewritten, this&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# is useful to avoid rewriting the AOF file even if the percentage increase&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# is reached but it is still pretty small.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Specify a percentage of zero in order to disable the automatic AOF&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# rewrite feature.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;auto&lt;/span&gt;-aof-rewrite-percentage &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;auto&lt;/span&gt;-aof-rewrite-min-size &lt;span class=&#34;hljs-number&#34;&gt;64&lt;/span&gt;mb&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由注释可知， &lt;code&gt;redis&lt;/code&gt;  会自动调用  &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  命令当  &lt;code&gt;AOF&lt;/code&gt;  文件的大小到达指定的百分比时。 &lt;code&gt;redis&lt;/code&gt;  会记住最新一次重写时的文件大小，如果没有发生重写，那么当服务器重启之后的  &lt;code&gt;AOF&lt;/code&gt;  文件的大小将会被使用。这个被记住的大小将会被与现在的大小进行比较，如果现在文件的大小超过了指定的百分比，重写将会被触发。并且，你需要指定要重写的  &lt;code&gt;AOF&lt;/code&gt;  文件的最小大小，这对于避免重写  &lt;code&gt;AOF&lt;/code&gt;  文件很有用，因为即使达到百分比增加但仍然很小。&lt;/p&gt;
&lt;p&gt;指定百分比为 0 可以禁用自动  &lt;code&gt;AOF&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;现在你可以指定  &lt;code&gt;auto-aof-rewrite-percentage&lt;/code&gt;  的值来指定百分比，指定  &lt;code&gt;auto-aof-rewrite-min-size&lt;/code&gt;  的值来指定最小的文件大小。&lt;/p&gt;
&lt;h4 id=&#34;手动重写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动重写&#34;&gt;#&lt;/a&gt; 手动重写&lt;/h4&gt;
&lt;p&gt;你可以主动使用  &lt;code&gt;BGREWRITEAOF&lt;/code&gt;  命令来执行重写操作，事实上，自动的重写操作也是由  &lt;code&gt;redis&lt;/code&gt;  客户端向  &lt;code&gt;redis&lt;/code&gt;  服务器发送这个命令完成的。&lt;/p&gt;
&lt;h3 id=&#34;数据检查-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#数据检查-2&#34;&gt;#&lt;/a&gt; 数据检查&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供了工具来检查  &lt;code&gt;AOF&lt;/code&gt;  文件的格式是否正确：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-check-aof &amp;lt;/path/to/aof&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果提示  &lt;code&gt;AOF&lt;/code&gt;  文件的格式出错，那么你可以通过添加  &lt;code&gt;--fix&lt;/code&gt;  选项来修复该文件：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-check-aof --fix &amp;lt;/path/to/aof&amp;gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;混合模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#混合模式&#34;&gt;#&lt;/a&gt; 混合模式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  支持  &lt;code&gt;RDB&lt;/code&gt;  和  &lt;code&gt;AOF&lt;/code&gt;  混合模式。&lt;/p&gt;
&lt;p&gt;如何开启混合模式，来到配置文件大概  &lt;code&gt;1516&lt;/code&gt;  行：&lt;/p&gt;
&lt;figure class=&#34;highlight routeros&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs routeros&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Redis can create append-only base files in either RDB or AOF formats. Using&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# the RDB format is always faster and more efficient, and disabling it is only&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# supported for backward compatibility purposes.&lt;/span&gt;&lt;br&gt;aof-use-rdb-preamble &lt;span class=&#34;hljs-literal&#34;&gt;yes&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;aof-use-rdb-preamble&lt;/code&gt;  用于开启混合模式，可见混合模式是默认开启的，代表着，如果你启用了  &lt;code&gt;RDB&lt;/code&gt;  和  &lt;code&gt;AOF&lt;/code&gt; ，那么将进入混合模式。&lt;/p&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;当你开启混合模式时，服务器启动时将会进行一次快照存储，然后使用  &lt;code&gt;AOF&lt;/code&gt;  记录每一次写操作。当  &lt;code&gt;AOF&lt;/code&gt;  达到重写条件时，将会将最新的数据存储为新的  &lt;code&gt;RDB&lt;/code&gt;  记录。这样的话，重启服务的时候会从  &lt;code&gt;RDB&lt;/code&gt;  和  &lt;code&gt;AOF&lt;/code&gt;  两部分恢复数据，既保证了数据完整性，又提高了恢复数据的性能。简单来说：混合持久化方式产生的文件一部分是  &lt;code&gt;RDB&lt;/code&gt;  格式，一部分是  &lt;code&gt;AOF&lt;/code&gt;  格式&lt;/p&gt;
&lt;h2 id=&#34;no-persistence&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#no-persistence&#34;&gt;#&lt;/a&gt; No persistence&lt;/h2&gt;
&lt;p&gt;禁用用  &lt;code&gt;AOF&lt;/code&gt;  和  &lt;code&gt;RDB&lt;/code&gt;  ，仅仅把  &lt;code&gt;redis&lt;/code&gt;  当作缓存来用。&lt;/p&gt;
&lt;h1 id=&#34;事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务&#34;&gt;#&lt;/a&gt; 事务&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  支持事务。在事务中  &lt;code&gt;redis&lt;/code&gt;  允许在一步中运行完所有的命令。整个事务围绕着 4 个命令： &lt;code&gt;exec&lt;/code&gt; 、 &lt;code&gt;multi&lt;/code&gt; 、 &lt;code&gt;discard&lt;/code&gt; 、 &lt;code&gt;watch&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  的事务有两个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有在事务中的命令将会被序列化并被顺序执行。在事务执行时其他客户端的请求将不会被处理。这个特点保证了事务中的所有命令将会以一个独立的单步操作的方式执行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;/code&gt;  命令会触发事务中命令的执行，所以如果客户端在命令执行前就失去连接，那么事务将不会开始执行。当你使用  &lt;code&gt;AOF&lt;/code&gt;  持久化时， &lt;code&gt;redis&lt;/code&gt;  在事务执行后会尝试把事务写进文件里。如果  &lt;code&gt;redis&lt;/code&gt;  服务器宕机了，那么可能只有一部分的事务命令写入文件。 &lt;code&gt;reids&lt;/code&gt;  服务器重新启动的时候会检查  &lt;code&gt;AOF&lt;/code&gt;  文件的格式，如果有错误将会退出。可以使用  &lt;code&gt;redis-check-aof&lt;/code&gt;  工具尝试移除一部分事务来修复  &lt;code&gt;AOF&lt;/code&gt;  文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开启事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#开启事务&#34;&gt;#&lt;/a&gt; 开启事务&lt;/h2&gt;
&lt;p&gt;使用  &lt;code&gt;multi&lt;/code&gt;  命令开启事务：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379&amp;gt; MULTI&lt;br&gt;OK&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;成功开启事务将会以  &lt;code&gt;ok&lt;/code&gt;  的形式返回&lt;/p&gt;
&lt;h3 id=&#34;序列化命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#序列化命令&#34;&gt;#&lt;/a&gt; 序列化命令&lt;/h3&gt;
&lt;p&gt;在事务的状态下，输入的所有命令将会以队列的形式进行记忆。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379(TX)&amp;gt; INCR foo&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; INCR bar&lt;br&gt;QUEUED&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每次命令的返回值  &lt;code&gt;queued&lt;/code&gt;  表示该命令已经加入队列，但此时该命令并没有执行。&lt;/p&gt;
&lt;h3 id=&#34;执行命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行命令&#34;&gt;#&lt;/a&gt; 执行命令&lt;/h3&gt;
&lt;p&gt;当完成了所有命令的输入后，使用  &lt;code&gt;exec&lt;/code&gt;  命令顺序执行事务中的所有命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379(TX)&amp;gt; EXEC&lt;br&gt;1) (integer) 1&lt;br&gt;2) (integer) 1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;每条命令的结果，将会以一个数组的形式进行返回。&lt;/p&gt;
&lt;h3 id=&#34;退出事务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#退出事务&#34;&gt;#&lt;/a&gt; 退出事务&lt;/h3&gt;
&lt;p&gt;在事务的状态下，如果你想退出事务可以使用  &lt;code&gt;discard&lt;/code&gt;  进行退出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;redis&lt;/code&gt;  中不支持回滚，因为回滚会影响  &lt;code&gt;redis&lt;/code&gt;  的表现和简单&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;错误&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#错误&#34;&gt;#&lt;/a&gt; 错误&lt;/h2&gt;
&lt;p&gt;在  &lt;code&gt;redis&lt;/code&gt;  的事务中有两个可能发生的错误：事务开始前的错误和事务开始后的错误。&lt;/p&gt;
&lt;h3 id=&#34;事务开始前&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务开始前&#34;&gt;#&lt;/a&gt; 事务开始前&lt;/h3&gt;
&lt;p&gt;在事务开始前，也就是正在将命令加入队列时，有些错误将会导致命令无法加入队列中。例如：错误的命令 (命令的参数不对或者命令本身的名字不对)、内存溢出的情况 (如果你配置了服务器的内存限制)。&lt;/p&gt;
&lt;p&gt;如果在事务执行前发生了错误，那么在执行  &lt;code&gt;exec&lt;/code&gt;  命令后， &lt;code&gt;redis&lt;/code&gt;  将会返回  &lt;code&gt;error&lt;/code&gt;  并拒绝执行事务，并退出事务状态：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379&amp;gt; multi&lt;br&gt;OK&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; set&lt;br&gt;(error) ERR wrong number of arguments for &amp;#x27;set&amp;#x27; command&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; exec&lt;br&gt;(error) EXECABORT Transaction discarded because of previous errors.&lt;br&gt;127.0.0.1:6379&amp;gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;事务开始后&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#事务开始后&#34;&gt;#&lt;/a&gt; 事务开始后&lt;/h3&gt;
&lt;p&gt;在调用了  &lt;code&gt;exec&lt;/code&gt;  命令执行事务后，如果某些命令执行发生了错误比如：让一个字符串进行自增，那么该命令将会返回  &lt;code&gt;error&lt;/code&gt;  ，但这并不会影响其他的命令的执行。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379(TX)&amp;gt; incr k1&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; incr k&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; exec&lt;br&gt;1) (error) ERR value is not an integer or out of range&lt;br&gt;2) (integer) 4&lt;br&gt;127.0.0.1:6379&amp;gt; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;上述结果得知： &lt;code&gt;redis&lt;/code&gt;  的事务并没有原子性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;乐观锁&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#乐观锁&#34;&gt;#&lt;/a&gt; 乐观锁&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  使用  &lt;code&gt;watch&lt;/code&gt;  命令来实现乐观锁。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;watch &amp;lt;key&amp;gt; [key...]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过  &lt;code&gt;watch&lt;/code&gt;  监控键，如果在命令入队时，该键的值发生了改变，那么事务不会执行，当你调用  &lt;code&gt;exec&lt;/code&gt;  后，事务将返回  &lt;code&gt;nil&lt;/code&gt;  并退出事务状态。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6379&amp;gt; get k #k当前的值发生了改变&lt;br&gt;&amp;quot;4&amp;quot;&lt;br&gt;127.0.0.1:6379&amp;gt; watch k #监控k&lt;br&gt;OK&lt;br&gt;127.0.0.1:6379&amp;gt; multi&lt;br&gt;OK&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; incr k #此时，另一个客户端修改了k的值为5&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; set k1 qweasd&lt;br&gt;QUEUED&lt;br&gt;127.0.0.1:6379(TX)&amp;gt; exec #执行事务后，发现返回nil&lt;br&gt;(nil)&lt;br&gt;127.0.0.1:6379&amp;gt; get k1 #发现所有键的值都没有被事务所修改&lt;br&gt;&amp;quot;hello&amp;quot;&lt;br&gt;127.0.0.1:6379&amp;gt; get k&lt;br&gt;&amp;quot;5&amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你在监控了某个键后，不想再监控了，可以使用  &lt;code&gt;unwatch&lt;/code&gt;  命令来取消监控。该命令没有任何参数，将会取消监控所有的键。&lt;/p&gt;
&lt;h1 id=&#34;管道&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#管道&#34;&gt;#&lt;/a&gt; 管道&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  是一种基于&lt;strong&gt;客户端 - 服务端模型&lt;/strong&gt;以及&lt;strong&gt;请求 / 响应协议&lt;/strong&gt;的 TCP 服务。一个请求会遵循以下步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向服务端发送命令分四步 (发送命令→命令排队→命令执行→返回结果)，并监听  &lt;code&gt;Socket&lt;/code&gt;  返回，通常以阻塞模式等待服务端响应。&lt;/li&gt;
&lt;li&gt;服务端处理命令，并将结果返回给客户端。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果同时需要执行大量的命令，那么就要等待上一条命令应答后再执行，这中间不仅仅多了&lt;strong&gt; RTT（Round Time Trip）&lt;/strong&gt;，而且还频繁调用系统 IO，发送网络请求，同时需要  &lt;code&gt;redis&lt;/code&gt;  调用多次  &lt;code&gt;read()&lt;/code&gt;  和  &lt;code&gt;write()&lt;/code&gt;  系统方法，系统方法会将数据从&lt;strong&gt;用户态&lt;/strong&gt;转移到&lt;strong&gt;内核态&lt;/strong&gt;，这样就会对进程上下文有比较大的影响了，性能不太好。&lt;/p&gt;
&lt;p&gt;管道用来优化客户端和服务端的&lt;strong&gt;网络时延 (RTT)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;管道(pipeline)&lt;/code&gt;  可以一次性发送多条命令给服务端，服务端依次处理完完毕后，通过一条响应一次性将结果返回，通过减少客户端与  &lt;code&gt;redis&lt;/code&gt;  的通信次数来实现降低往返延时时间。 &lt;code&gt;pipeline&lt;/code&gt;  实现的原理是队列，先进先出特性就保证数据的顺序性。&lt;/p&gt;
&lt;h1 id=&#34;主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主从复制&#34;&gt;#&lt;/a&gt; 主从复制&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  提供一个主从复制机制。&lt;strong&gt;主 (master) 库&lt;/strong&gt; 能够进行读写，&lt;strong&gt;从 (slave) 库&lt;/strong&gt; 只能读。当  &lt;code&gt;master&lt;/code&gt;  数据变化的时候，自动将新的数据异步同步到其它  &lt;code&gt;slave&lt;/code&gt;  数据库，保证主从之间的数据保持一致性。&lt;/p&gt;
&lt;h2 id=&#34;配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置&#34;&gt;#&lt;/a&gt; 配置&lt;/h2&gt;
&lt;p&gt;通过修改从库的配置，标识从库要复制的是哪个主库。前往配置文件大概 553 行：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# replicaof &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;masterip&amp;gt;&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;masterport&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过配置  &lt;code&gt;relicaof&lt;/code&gt;  的参数  &lt;code&gt;masterip&lt;/code&gt;  主库的  &lt;code&gt;ip&lt;/code&gt;  ， &lt;code&gt;masterport&lt;/code&gt;  主库的端口&lt;/p&gt;
&lt;p&gt;如果主库被设置了密码，那么需要修改另一个配置，前往配置文件大概 554 行：&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs cpp&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;# masterauth &lt;span class=&#34;hljs-string&#34;&gt;&amp;lt;master-password&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过配置  &lt;code&gt;masterauth&lt;/code&gt;  的参数  &lt;code&gt;master-password&lt;/code&gt;  指明主库的密码，从而能被验证通过。&lt;/p&gt;
&lt;p&gt;除上述配置之外，主库的配置文件不需要任何修改。&lt;/p&gt;
&lt;h2 id=&#34;连接主库&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#连接主库&#34;&gt;#&lt;/a&gt; 连接主库&lt;/h2&gt;
&lt;p&gt;我们使用一个主库，然后再使用两个从库。使整个架构呈现出：一个主库下面挂着三个从库的状态。&lt;/p&gt;
&lt;p&gt;假设我们的主库的套接字为：172.17.0.2:6376。从库的套接字为：172.17.0.3:6377、172.17.0.4:6378。密码都为：12345&lt;/p&gt;
&lt;p&gt;所以从库的配置文件呈现如下情况：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;172.17.0.3:6377&lt;/span&gt;&lt;br&gt;replicaof 172.0.2 6376&lt;br&gt;masterauth 12345&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;172.17.0.4:6378&lt;/span&gt;&lt;br&gt;replicaof 172.0.2 6376&lt;br&gt;masterauth 12345&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了更好的观察运行情况，我们对上述三个库，继续修改如下配置：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;以下配置路径均可以自定义&lt;/span&gt;&lt;br&gt;dir /usr/local/etc/redis #设置工作目录&lt;br&gt;log /usr/local/etc/redis/redis.log #设置日志路径&lt;br&gt;pid /usr/local/etc/redis/redis.pid #设置pid文件路径&lt;br&gt;appendonly no #关闭AOF持久化，可关可不关&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;配置完成后，我们首先启动主库，观察之前配置的日志文件，如果出现以下日志，说明启动成功：&lt;/p&gt;
&lt;figure class=&#34;highlight ada&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs ada&#34;&gt;Ready to &lt;span class=&#34;hljs-keyword&#34;&gt;accept&lt;/span&gt; connections tcp&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后，我们启动剩余两个从库，从库启动成功后会尝试连接主库，出现以下日志说明连接成功：&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;Connecting &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; MASTER &lt;span class=&#34;hljs-number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.2&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;6376&lt;/span&gt;&lt;br&gt;MASTER &amp;lt;-&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;REPLICA&lt;/span&gt; sync started&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想查看当前  &lt;code&gt;redis&lt;/code&gt;  实例的主从状态，可以使用如下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;info replication&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令会显示当前  &lt;code&gt;redis&lt;/code&gt;  实例处于的主从状态，如果是主库，那么也会显示当前主库挂载了哪些从库。&lt;/p&gt;
&lt;h3 id=&#34;手动配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动配置&#34;&gt;#&lt;/a&gt; 手动配置&lt;/h3&gt;
&lt;p&gt;上面的配置均基于配置文件，在  &lt;code&gt;redis&lt;/code&gt;  服务启动后，也可以手动配置：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;slaveof &amp;lt;masterip&amp;gt; &amp;lt;masterport&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;slaveof&lt;/code&gt;  命令对标  &lt;code&gt;replicaof&lt;/code&gt;  配置。可以在运行时进行配置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：如果主库仍然含有密码，仍需要在配置文件中配置  &lt;code&gt;masterauth&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果，你想要在运行时让从库变为主库同样可以使用  &lt;code&gt;slaveof&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;slaveof no one&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意手动配置仅仅在当此运行中有效，重新启动服务后，任然会使用配置文件的配置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步&#34;&gt;#&lt;/a&gt; 同步&lt;/h2&gt;
&lt;p&gt;尝试在主库中写入一些键，观察从库的状态。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:6376&amp;gt; set k1 v1 #我们在从库中设置一个数据&lt;br&gt;OK &lt;br&gt;127.0.0.3:6377&amp;gt; get k1 #切换至从库，获取改键，发现能够获取，且值和主库中的对应&lt;br&gt;&amp;quot;v1&amp;quot;&lt;br&gt;&lt;br&gt;127.0.0.3:6377&amp;gt; set k2 v2 #尝试在从库中进行写入，发现报错无法写入&lt;br&gt;(error) READONLY You can&amp;#x27;t write against a read only replica.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;从库没有写入的权力&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果运行时，主库宕机了怎么办？我们尝试  &lt;code&gt;shutdown&lt;/code&gt;  主库，观察从库的日志：&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;Connecting &lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt; MASTER &lt;span class=&#34;hljs-number&#34;&gt;172.17&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.0&lt;/span&gt;&lt;span class=&#34;hljs-number&#34;&gt;.2&lt;/span&gt;:&lt;span class=&#34;hljs-number&#34;&gt;6376&lt;/span&gt;&lt;br&gt;MASTER &amp;lt;-&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;REPLICA&lt;/span&gt; sync started&lt;br&gt;Error condition &lt;span class=&#34;hljs-keyword&#34;&gt;on&lt;/span&gt; socket &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; SYNC: &lt;span class=&#34;hljs-keyword&#34;&gt;Connection&lt;/span&gt; refused&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你会看到一场串的上面的内容，代表着当主库宕机后，从库其实一直在尝试连接主库。意味着，从库在主库宕机后选择发呆，什么事也不干，&lt;strong&gt;也不会从从库变为主库&lt;/strong&gt;，只是一味请求连接主库。同时如果你在从库查看数据，同步之后的数据任然存在。&lt;/p&gt;
&lt;p&gt;那此时的主库重启后仍然为主库吗？答案是，仍然是！&lt;/p&gt;
&lt;p&gt;如果从库宕机后，我们持续向主库中写入数据，从库再次启动后能否同步到主库的新数据？答案是也会！&lt;/p&gt;
&lt;h3 id=&#34;同步链&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#同步链&#34;&gt;#&lt;/a&gt; 同步链&lt;/h3&gt;
&lt;p&gt;上一个  &lt;code&gt;slave&lt;/code&gt;  可以是下一个  &lt;code&gt;slave&lt;/code&gt;  的  &lt;code&gt;master&lt;/code&gt; ,  &lt;code&gt;slave&lt;/code&gt;  同样可以接收其他  &lt;code&gt;slave&lt;/code&gt;  的连接和同步请求，那么该  &lt;code&gt;slave&lt;/code&gt;  作为了链条中下一个的  &lt;code&gt;master&lt;/code&gt; , 可以有效减轻主  &lt;code&gt;master&lt;/code&gt;  的写压力形成同步链。&lt;/p&gt;
&lt;p&gt;可以在配置文件中直接配置  &lt;code&gt;replicaof&lt;/code&gt;  或者在运行中使用  &lt;code&gt;slaveof&lt;/code&gt;  来暂时设置。&lt;/p&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;当主从库连接良好时，主库会向从库发送命令流来同步由于以下原因导致主库数据集发生改变的影响&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;客户端写入&lt;/li&gt;
&lt;li&gt;键过期或者删除&lt;/li&gt;
&lt;li&gt;更改主库数据集的任何其他操作，例如： &lt;code&gt;flushdb&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;当主从库因为网络问题或者命令流发送超时导致连接丢失后，从库会进行重连并尝试进行部分的重新同步：意味着从库会尝试获取一部分它在失去连接中丢失的命令流&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当部分重新同步不可能时， &lt;code&gt;slave&lt;/code&gt;  将请求完全重新同步，其中主服务器需要创建所有的数据快照，将其发送到从库，然后在数据集发生变化时继续发送命令流。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个主库都有一个 复制 ID ，这是一个超大伪随机的字符串用来标记一个给定数据集的状况。每个主库也拥有一个发送给从库且随着复制流字节增长的偏移量，使用主库的改变用来更新从库的状态。主库的偏移量在从库没有连接时也存在，下面给出的就是主库数据集版本的标识。&lt;/p&gt;
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;Replication&lt;/span&gt; ID, &lt;span class=&#34;hljs-keyword&#34;&gt;offset&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当从库连接至主库后，从库会使用  &lt;code&gt;PSYNC&lt;/code&gt;  命令用来发送他的旧主库的复制 ID 以及最近处理的的偏移量。这样主设备就可以只发送所需的增量部分。但是，如果主库缓冲区没有足够的  &lt;code&gt;backlog&lt;/code&gt;  或者从库正在参考的是一个历史的从来不知道的复制 ID，然后就会发生全量的重新同步：在这个情况下，从库会获得全量的数据集的复制。&lt;/p&gt;
&lt;p&gt;全量的重新同步的细节如下：&lt;/p&gt;
&lt;p&gt;主库会启动一个后台保存进程生产  &lt;code&gt;RDB&lt;/code&gt;  文件。同一时间，主库会开始缓存所有新收到的写命令。当后台保存完成后，主库会将数据库文件传输给从库，然后从库会将文件保存在硬盘上之后将它加载进内存。然后主库会发送所有缓存的命令到从库。这是以命令流的形式发送的。&lt;/p&gt;
&lt;p&gt;主库会使用心跳机制，默认每 10s 钟和从库进行通信保持长连接。&lt;/p&gt;
&lt;h2 id=&#34;缺点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点&lt;/h2&gt;
&lt;p&gt;由于所有的写操作都是先在  &lt;code&gt;Master&lt;/code&gt;  上操作，然后同步更新到  &lt;code&gt;Slave&lt;/code&gt;  上，所以从  &lt;code&gt;Master&lt;/code&gt;  同步到  &lt;code&gt;Slave&lt;/code&gt;  机器有一定的延迟，当系统很繁忙的时候，延迟问题会更加严重， &lt;code&gt;Slave&lt;/code&gt;  机器数量的增加也会使这个问题更加严重。&lt;/p&gt;
&lt;p&gt;默认情况下，当  &lt;code&gt;master&lt;/code&gt;  宕机后，不会在引  &lt;code&gt;slave&lt;/code&gt;  节点中自动重选一个  &lt;code&gt;master&lt;/code&gt; ，这意味着，你无法进行写入。&lt;/p&gt;
&lt;h1 id=&#34;哨兵&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哨兵&#34;&gt;#&lt;/a&gt; 哨兵&lt;/h1&gt;
&lt;p&gt;为了解决主从复制的痛点 ——  &lt;code&gt;master&lt;/code&gt;  宕机后， &lt;code&gt;slave&lt;/code&gt;  中并不会产生一个  &lt;code&gt;master&lt;/code&gt;  来进行写入。吹哨人巡查监控后台  &lt;code&gt;master&lt;/code&gt;  主机是否故障，如果故障了根据投票数自动将某一个从库转换为新主库，继续对外服务。&lt;/p&gt;
 &lt;img src=&#34;redis/sentinel.png&#34; alt=&#34;哨兵架构&#34; style=&#34;zoom: 50%;&#34; /&gt;
&lt;blockquote&gt;
&lt;p&gt;哨兵是在非集群状态下使用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下是哨兵提供的一系列功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;监控&lt;/strong&gt;：哨兵能持续不断地检查  &lt;code&gt;master&lt;/code&gt;  和  &lt;code&gt;slave&lt;/code&gt;  是否如期运行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通知&lt;/strong&gt;：哨兵能通过  &lt;code&gt;API&lt;/code&gt;  通知系统管理员，或者其他电脑程序，某一个被监控的  &lt;code&gt;redis&lt;/code&gt;  实例出问题了&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动的故障转移&lt;/strong&gt;：如果  &lt;code&gt;master&lt;/code&gt;  宕机了，哨兵会开始故障转移进程，将  &lt;code&gt;slave&lt;/code&gt;  提拔为  &lt;code&gt;master&lt;/code&gt;  ，其他的额外的  &lt;code&gt;slave&lt;/code&gt;  将会被&lt;strong&gt;重新配置&lt;/strong&gt;以使用新的  &lt;code&gt;master&lt;/code&gt;  ，并且使用  &lt;code&gt;reids&lt;/code&gt;  服务器的应用程序会在连接中被通知使用新的地址&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;配置提供者&lt;/strong&gt;：哨兵充当客户端服务发现的权威来源，客户端连接到哨兵以询问负责给定服务的  &lt;code&gt;master&lt;/code&gt;  的地址。如果发生故障转移，哨兵将报告新地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;哨兵在进行故障转移时，会动态的修改配置文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;哨兵架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哨兵架构&#34;&gt;#&lt;/a&gt; 哨兵架构&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;reids&lt;/code&gt;  的哨兵是&lt;strong&gt;分布式系统&lt;/strong&gt;。哨兵被设计来以&lt;strong&gt;多个哨兵进程共同合作&lt;/strong&gt;的配置运行。这样的好处有如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当多个哨兵都认同某个给定的  &lt;code&gt;master&lt;/code&gt;  已经宕机，那么故障检测将会被执行。这降低了&lt;strong&gt;假阳性&lt;/strong&gt;的可能性，也就是误判  &lt;code&gt;master&lt;/code&gt;  宕机。&lt;/li&gt;
&lt;li&gt;在所有的哨兵进程没有完全停止工作时哨兵也能发挥作用，这提高了对抗故障的&lt;strong&gt;健壮性&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;哨兵、 &lt;code&gt;Redis&lt;/code&gt;  实例（ &lt;code&gt;master&lt;/code&gt;  和  &lt;code&gt;slave&lt;/code&gt; ）以及连接到哨兵 和  &lt;code&gt;Redis&lt;/code&gt;  的客户端的总和，也是一个具有特定属性的更大的分布式系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;如何运行哨兵实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何运行哨兵实例&#34;&gt;#&lt;/a&gt; 如何运行哨兵实例&lt;/h2&gt;
&lt;p&gt;你可以使用  &lt;code&gt;redis&lt;/code&gt;  提供的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-sentinel /path/to/sentinel.conf&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也可以同样使用  &lt;code&gt;redis-server&lt;/code&gt;  命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-server /path/to/sentinel.conf --sentinel&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;哨兵被&lt;strong&gt;强制使用配置文件&lt;/strong&gt;，无法默认运行，因为该文件会被系统使用，用来保存当前的状态，并且会在重新启动时被重新加载。如果没有给出配置文件或者配置文件路径不可写，哨兵将简单地拒绝启动。&lt;/p&gt;
&lt;p&gt;哨兵运行&lt;strong&gt;默认监听端口 26379&lt;/strong&gt;，所以为了保证能够运行，必须让你的服务器打开&lt;strong&gt; 26379 端口&lt;/strong&gt;。否则，哨兵们将不能交流并且也无法就该做什么达成一致，所以故障转义将不会被执行。&lt;/p&gt;
&lt;h3 id=&#34;配置哨兵文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置哨兵文件&#34;&gt;#&lt;/a&gt; 配置哨兵文件&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  源代码发行版包含一个名为  &lt;code&gt;Sentinel.conf&lt;/code&gt;  的文件，它是一个自记录示例配置文件，可用于配置  &lt;code&gt;Sentinel&lt;/code&gt; ，但是典型的最小配置文件如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight smali&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs smali&#34;&gt;sentinel&lt;span class=&#34;hljs-built_in&#34;&gt; monitor &lt;/span&gt;mymaster 127.0.0.1 6379 2&lt;br&gt;sentinel down-after-milliseconds mymaster 60000&lt;br&gt;sentinel failover-timeout mymaster 180000&lt;br&gt;sentinel parallel-syncs mymaster 1&lt;br&gt;&lt;br&gt;sentinel&lt;span class=&#34;hljs-built_in&#34;&gt; monitor &lt;/span&gt;resque 192.168.1.3 6380 4&lt;br&gt;sentinel down-after-milliseconds resque 10000&lt;br&gt;sentinel failover-timeout resque 180000&lt;br&gt;sentinel parallel-syncs resque 5&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;您只需要指定要监视的  &lt;code&gt;master&lt;/code&gt; ，为每个单独的  &lt;code&gt;master&lt;/code&gt; （可能有任意数量的 &lt;code&gt;slave&lt;/code&gt; ）提供不同的名称，无需指定  &lt;code&gt;slave&lt;/code&gt; ， &lt;code&gt;slave&lt;/code&gt;  是自动发现的。 哨兵将使用有关 &lt;code&gt;slave&lt;/code&gt;  的附加信息自动更新配置（以便在重新启动时保留信息），每次在故障转移期间将  &lt;code&gt;slave&lt;/code&gt;  提升为  &lt;code&gt;master&lt;/code&gt;  以及每次发现新的哨兵时，配置也会被重写&lt;/p&gt;
&lt;p&gt;上面的示例配置基本上监视两组  &lt;code&gt;Redis&lt;/code&gt;  实例，每个实例由一个主实例和未定义数量的  &lt;code&gt;slave&lt;/code&gt;  组成。一组实例称为  &lt;code&gt;mymaster&lt;/code&gt; ，另一组实例称为  &lt;code&gt;resque&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sentinel monitor&lt;/code&gt;  语句的参数含义如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sentinel monitor &amp;lt;master-name&amp;gt; &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; &amp;lt;quorum&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们一行一行检查：&lt;/p&gt;
&lt;p&gt;第一行用于告诉  &lt;code&gt;Redis&lt;/code&gt;  监视一个名为  &lt;code&gt;mymaster&lt;/code&gt;  的主机，该主机位于地址  &lt;code&gt;127.0.0.1&lt;/code&gt;  和端口  &lt;code&gt;6379&lt;/code&gt; ，投票数 ( &lt;code&gt;quorum&lt;/code&gt; ) 为 2。一切都非常明显，但&lt;strong&gt; quorum 参数&lt;/strong&gt;除外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;投票数是需要就  &lt;code&gt;master&lt;/code&gt;  无法访问这一事实达成一致的哨兵数量，以便真正将主站标记为故障，并在可能的情况下最终启动故障转移过程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然而，投票数仅用于检测故障。为了实际执行故障转移，需要选举其中一个哨兵为故障转移的领导者并被授权继续进行。只有大多数哨兵进程投票才会发生这种情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，如果您有 5 个 哨兵进程，并且给定  &lt;code&gt;master&lt;/code&gt;  进程的投票数设置为 2，则会发生以下情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果两个哨兵同时同意主节点无法访问，则两者之一将尝试启动故障转移&lt;/li&gt;
&lt;li&gt;如果总共至少有三个哨兵可达，则故障转移将被授权并实际启动&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实际上，这意味着在故障期间，如果大多数哨兵进程无法通信（也称为少数分区中没有故障转移），则哨兵永远不会启动故障转移&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;除了上述配置之外，其余的哨兵配置遵从与以下格式：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sentinel &amp;lt;option_name&amp;gt; &amp;lt;master_name&amp;gt; &amp;lt;option_value&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;down-after-milliseconds &amp;lt;master-name&amp;gt; &amp;lt;milliseconds&amp;gt;&lt;/code&gt; ：是当哨兵开始认为实例&lt;strong&gt;主观下线&lt;/strong&gt;时，实例不应该可达的时间（要么不回复我们的  &lt;code&gt;PING&lt;/code&gt; ，要么回复错误）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parallel-syncs &amp;lt;master-name&amp;gt; &amp;lt;nums&amp;gt;&lt;/code&gt; ：设置故障转移后可以重新配置为同时使用新  &lt;code&gt;master&lt;/code&gt;  的  &lt;code&gt;slave&lt;/code&gt;  数量。数字越低，完成故障转移过程所需的时间越长。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth-pass &amp;lt;master-name&amp;gt; &amp;lt;password&amp;gt;&lt;/code&gt; ： &lt;code&gt;master&lt;/code&gt;  设置了密码，连接  &lt;code&gt;master&lt;/code&gt;  服务的密码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其余的可参照实例配置文件： &lt;code&gt;sentinel.conf&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  官方建议配置至少三个哨兵&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;主观下线和客观下线&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#主观下线和客观下线&#34;&gt;#&lt;/a&gt; 主观下线和客观下线&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  哨兵有两种下下线的判断：客观下线 (ODOWN) 和主观下线 (SDOWN)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主观下线 (SDOWN)：单独一个哨兵认为  &lt;code&gt;master&lt;/code&gt;  已经下线，这种情况由于， &lt;code&gt;master&lt;/code&gt;  没有在有效的时间正确回应哨兵的  &lt;code&gt;PING&lt;/code&gt;  命令。这个时间在配置文件中是  &lt;code&gt;is-master-down-after-milliseconds&lt;/code&gt;  参数。
&lt;ul&gt;
&lt;li&gt;仅仅通过  &lt;code&gt;SDOWN&lt;/code&gt;  无法判断  &lt;code&gt;master&lt;/code&gt;  是否下线。需要哨兵之间进行投票。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;客观下线 (ODOWN)：当哨兵之间的投票数达到之前设定的  &lt;code&gt;quorm&lt;/code&gt;  时， &lt;code&gt;master&lt;/code&gt;  进入客观下线状态。触发故障转移。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;故障转移流程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#故障转移流程&#34;&gt;#&lt;/a&gt; 故障转移流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主观下线&lt;/li&gt;
&lt;li&gt;客观下线&lt;/li&gt;
&lt;li&gt;选出领导者哨兵：当主节点被判断客观下线以后，各个哨兵节会进行协商，通过  &lt;code&gt;raft&lt;/code&gt;  算法 先选举出一个领导者 (leader) 哨兵节点并由该领导者节点，也即被选举出的兵王进行  &lt;code&gt;failover&lt;/code&gt;  (故障转移）&lt;/li&gt;
&lt;li&gt;由领导者 (leader) 开始推动故切流程并选出一个新  &lt;code&gt;master&lt;/code&gt; ：
&lt;ol&gt;
&lt;li&gt;在剩下的  &lt;code&gt;slave&lt;/code&gt;  中选出一个  &lt;code&gt;master&lt;/code&gt;  , 从节点选举过程评估从节点的下列信息来选举  &lt;code&gt;master&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;与主节点断开的时间&lt;/li&gt;
&lt;li&gt;从节点优先级：由  &lt;code&gt;replica-priority&lt;/code&gt;  参数指定，越低的优先级越高，但该参数指定为 0 时，该节点将不会参与选举。&lt;/li&gt;
&lt;li&gt;复制偏移处理：更新的偏移量越优先&lt;/li&gt;
&lt;li&gt;运行 ID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;切换剩下的  &lt;code&gt;slave&lt;/code&gt;  至新的  &lt;code&gt;master&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;执行  &lt;code&gt;slaveof no one&lt;/code&gt;  命令让选出来的从节成为新的主节点，并通过  &lt;code&gt;slaveof&lt;/code&gt;  命令让其他节点成为其从节点&lt;/li&gt;
&lt;li&gt;会修改  &lt;code&gt;slave&lt;/code&gt;  以及  &lt;code&gt;sentinel&lt;/code&gt;  的配置文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;此时，若旧的  &lt;code&gt;master&lt;/code&gt;  重新上线，仍然会成为新选举出来的  &lt;code&gt;master&lt;/code&gt;  的  &lt;code&gt;slave&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群&#34;&gt;#&lt;/a&gt; 集群&lt;/h1&gt;
&lt;h2 id=&#34;为什么要使用-redis-集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么要使用-redis-集群&#34;&gt;#&lt;/a&gt; 为什么要使用 redis 集群&lt;/h2&gt;
&lt;p&gt;使用主从复制 + 哨兵的模式能够很大程度上减轻   &lt;code&gt;redis&lt;/code&gt;   的读写压力，但归根结底，此模式仍有不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;接受请求的服务器从始至终只有一台   &lt;code&gt;redis&lt;/code&gt;  实例，无法适应高并发的场景。&lt;/li&gt;
&lt;li&gt;从节点的上位可能会导致写丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是redis集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#什么是redis集群&#34;&gt;#&lt;/a&gt; 什么是 redis 集群&lt;/h2&gt;
&lt;p&gt;由于数据量过大，单个   &lt;code&gt;master&lt;/code&gt;  复制集难以承担，因此需要对多个复制集进行集群，形成水平扩展每个复制集只负责存储整个数据集的一部分，这就是  &lt;code&gt;Redis&lt;/code&gt;  的集群，其作用是提供在多个  &lt;code&gt;Redis&lt;/code&gt;  节点间共享数据的程序集。&lt;/p&gt;
&lt;p&gt;形象的图像表示如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/cluster.png&#34; alt=&#34;cluster.png&#34; title=&#34;cluster架构&#34;&gt;&lt;/p&gt;
&lt;p&gt;当客户端请求来到  &lt;code&gt;redis&lt;/code&gt;  服务之后，将会根据规则将请求分散至不同的  &lt;code&gt;redis&lt;/code&gt;  实例中，以减少每台服务器的压力。每台   &lt;code&gt;redis&lt;/code&gt;  服务器仅仅存储数据集的一部分，且  &lt;code&gt;redis&lt;/code&gt;   服务间数据共享。&lt;/p&gt;
&lt;h2 id=&#34;如何确定键的落点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#如何确定键的落点&#34;&gt;#&lt;/a&gt; 如何确定键的落点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  通过哈希的方式找到键的落点。下面我们一一介绍常见的哈希方式以及  &lt;code&gt;redis&lt;/code&gt;   最终的使用方案。&lt;/p&gt;
&lt;h3 id=&#34;普通哈希&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#普通哈希&#34;&gt;#&lt;/a&gt; 普通哈希&lt;/h3&gt;
&lt;p&gt;通过简单的哈希函数来确定键的落点。例如，现在我有三个实例：A、B、C 组成了一个集群。那么，可能的哈希函数就可能如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight mathematica&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs mathematica&#34;&gt;&lt;span class=&#34;hljs-variable&#34;&gt;RES&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;KEY&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过键对 3 取余得到键的落点在哪个实例上。这样的方法看似非常简单且稳妥。但实际上却有很大的弊端：当其中某个实例宕机或者新加入一些实例后，哈希函数将会发生改变，之前的键的映射方式将会重新洗牌，将会有大量的键无法映射到对应的  &lt;code&gt;redis&lt;/code&gt;   的服务上。&lt;/p&gt;
&lt;h3 id=&#34;一致性哈希&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#一致性哈希&#34;&gt;#&lt;/a&gt; 一致性哈希&lt;/h3&gt;
&lt;p&gt;一致性哈希是为了解决普通哈希带来的问题 —— 当服务器个数发生变动时，尽量减少影响客户端到服务器的映射关系。一致性哈希算法将整个哈希值空间映射成一个虚拟的圆环。整个哈希空间的取值范围为 0~2&lt;sup&gt;32-1，按顺时针方向开始从 0~2&lt;/sup&gt;32-1 排列，最后的节点 2^32-1 在 0 开始位置重合，形成一个虚拟的圆环。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash.png&#34; alt=&#34;consistency-hash.png&#34; title=&#34;一致性哈希环&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;服务器映射到哈希环&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器映射到哈希环&#34;&gt;#&lt;/a&gt; 服务器映射到哈希环&lt;/h5&gt;
&lt;p&gt;接下来，将服务器节点映射到哈希环上对应的位置。我们可以对服务器 IP 地址进行哈希计算，哈希计算后的结果对 2&lt;sup&gt;32 取模，结果一定是一个 0 到 2&lt;/sup&gt;32-1 之间的整数。最后将这个整数映射在哈希环上，整数的值就代表了一个服务器节点的在哈希环上的位置。即：hash（服务器 ip）% 2^32。下面我们依次将 node0、node1、node2 三个缓存服务器映射到哈希环上，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-node.png&#34; alt=&#34;consistency-hash-node.png&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;对象key映射到服务器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#对象key映射到服务器&#34;&gt;#&lt;/a&gt; 对象 key 映射到服务器&lt;/h5&gt;
&lt;p&gt;当服务器接收到数据请求时，首先需要计算请求 Key 的哈希值；然后将计算的哈希值映射到哈希环上的具体位置；接下来，从这个位置沿着哈希环顺时针查找，遇到的第一个节点就是 key 对应的节点；最后，将请求发送到具体的服务器节点执行数据操作。&lt;/p&gt;
&lt;p&gt;假设我们有 “key-01：张三”、“key-02：李四”、“key-03：王五” 三条缓存数据。经过哈希算法计算后，映射到哈希环上的位置如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hah-map.png&#34; alt=&#34;consistency-hah-map.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，通过哈希计算后，key-01 顺时针寻找将找到 node0，key-02 顺时针寻找将找到 node1，key-03 顺时针寻找将找到 node2。最后，请求找到的服务器节点执行具体的业务操作。&lt;/p&gt;
&lt;p&gt;以上便是一致性哈希算法的工作原理。&lt;/p&gt;
&lt;h4 id=&#34;服务器扩容缩容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器扩容缩容&#34;&gt;#&lt;/a&gt; 服务器扩容 &amp;amp; 缩容&lt;/h4&gt;
&lt;p&gt;前面介绍了一致性哈希算法的工作原理，那么，一致性哈希算法如何避免服务器动态伸缩的问题的呢？&lt;/p&gt;
&lt;h5 id=&#34;服务器缩容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器缩容&#34;&gt;#&lt;/a&gt; 服务器缩容&lt;/h5&gt;
&lt;p&gt;服务器缩容就是减少集群中服务器节点的数量或是集群中某个节点故障。假设，集群中的某个节点故障，原本映射到该节点的请求，会找到哈希环中的下一个节点，数据也同样被重新分配至下一个节点，其它节点的数据和请求不受任何影响。这样就确保节点发生故障时，集群能保持正常稳定。如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-reduce.png&#34; alt=&#34;consistency-hash-reduce.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示：节点 node2 发生故障时，数据 key-01 和 key-02 不会受到影响，只有 key-03 的请求被重定位到 node0。在一致性哈希算法中，如果某个节点宕机不可用了，那么受影响的数据仅仅是会寻址到此节点和前一节点之间的数据。其他哈希环上的数据不会受到影响。&lt;/p&gt;
&lt;h5 id=&#34;服务器扩容&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#服务器扩容&#34;&gt;#&lt;/a&gt; 服务器扩容&lt;/h5&gt;
&lt;p&gt;服务器扩容就是集群中需要增加一个新的数据节点，假设，由于需要缓存的数据量太大，必须对集群进行扩容增加一个新的数据节点。此时，只需要计算新节点的哈希值并将新的节点加入到哈希环中，然后将哈希环中从上一个节点到新节点的数据映射到新的数据节点即可。其他节点数据不受影响，具体如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-scall.png&#34; alt=&#34;consistency-hash-scall.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，加入新的 node3 节点后，key-01、key-02 不受影响，只有 key-03 的寻址被重定位到新节点 node3，受影响的数据仅仅是会寻址到新节点和前一节点之间的数据。&lt;/p&gt;
&lt;p&gt;通过一致性哈希算法，集群扩容或缩容时，只需要重新定位哈希环空间内的一小部分数据。其他数据保持不变。当节点数越多的时候，使用哈希算法时，需要迁移的数据就越多，使用一致哈希时，需要迁移的数据就越少。所以，一致哈希算法具有较好的容错性和可扩展性。&lt;/p&gt;
&lt;h4 id=&#34;缺点-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#缺点-2&#34;&gt;#&lt;/a&gt; 缺点&lt;/h4&gt;
&lt;p&gt;一致性哈希也并不是那么完美，它有一个很致命的弱点 —— 数据倾斜。由于哈希计算的随机性，我们无法保证所有的节点都能完美地均匀地分散在哈希环上，特别是在节点太少的情况下，会导致大量的键会集中映射至少量几个节点的情况，造成数据访问的冷热不均，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/consistency-hash-short.png&#34; alt=&#34;consistency-hash-short.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，key-1、key-2、key-3 可能被映射到同一个节点 node0 上。导致 node0 负载过大，而 node1 和 node2 却很空闲的情况。这有可能导致个别服务器数据和请求压力过大和崩溃，进而引起集群的崩溃。&lt;/p&gt;
&lt;h3 id=&#34;哈希槽&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#哈希槽&#34;&gt;#&lt;/a&gt; 哈希槽&lt;/h3&gt;
&lt;p&gt;为了解决一致性哈希的数据倾斜问题， &lt;code&gt;redis&lt;/code&gt;  使用了名为&lt;strong&gt;哈希槽&lt;/strong&gt;的技术来实现集群。 &lt;code&gt;redis&lt;/code&gt;  通过将键映射至&lt;strong&gt;哈希槽&lt;/strong&gt;而不是节点来规避底层节点的变动带来的数据问题。使用如下的公式来计算哈希槽：&lt;/p&gt;
&lt;figure class=&#34;highlight mathematica&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs mathematica&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;HASH_SLOT&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;CRC16&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;hljs-variable&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;16384&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过  &lt;code&gt;CRC16&lt;/code&gt;  算法计算  &lt;code&gt;key&lt;/code&gt;  的哈希值，该哈希值总共有 16 位，也就是哈希值的范围为 0~65535。但在  &lt;code&gt;redis&lt;/code&gt;  中哈希槽的个数被设定为 0~16383&lt;/p&gt;
&lt;h4 id=&#34;分片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#分片&#34;&gt;#&lt;/a&gt; 分片&lt;/h4&gt;
&lt;p&gt;每个节点分配一定数量哈希槽，哈希槽被&lt;strong&gt;分片&lt;/strong&gt;至集群中的节点上。也就是每个节点就是哈希槽的&lt;strong&gt;分片&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假如，现在我有 A，B，C 三台节点并组成一个集群，三台机器的分片可能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点 A 包含哈希槽 0~5500&lt;/li&gt;
&lt;li&gt;节点 B 包含哈希槽 5501 到 11000&lt;/li&gt;
&lt;li&gt;节点 C 包含哈希槽 11001 至 16383&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们使用上面提到的哈希槽计算公式计算给定键的哈希槽，根据每个节点的分片将其分配至对应的节点上。&lt;/p&gt;
&lt;p&gt;哈希槽均匀地分布在各个节点上，这样数据倾斜问题就解决了。&lt;/p&gt;
&lt;p&gt;实际上，键的映射只和哈希槽有关。我们可以形象地将哈希槽和节点理解为：座位和教室的关系。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;教室 (节点)&lt;strong&gt; 包含&lt;/strong&gt;座位 (哈希槽)&lt;/strong&gt;。同学 (键) 寻找的永远是座位，不管如何移动教室，同学最终只会根据其座位坐上他应在的位置上。只不过，座位可能会从属于不同的教室，即哈希槽位可能会从属于不同的节点。&lt;/p&gt;
&lt;h5 id=&#34;优点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h5&gt;
&lt;p&gt;使用哈希槽的技术可以可以很方便地添加和移除节点。例如，现在有 A、B、C 三台节点，现在我向里面添加一个新的节点 D，那么我们只需要从 A、B、C 三个节点中移走部分的哈希槽至节点 D 即可。同样的，如果我移除节点 C，那么我们只需要将 C 的哈希槽移动到 A、B 节点上，一旦节点 C 的哈希槽空了，那么删除 C 即可。&lt;/p&gt;
&lt;p&gt;同时哈希槽的移动并不会停止集群对外服务，这意味着无论是修改分片占比还是移动哈希槽都不会让集群下线。&lt;/p&gt;
&lt;h4 id=&#34;为什么使用16384个槽位&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#为什么使用16384个槽位&#34;&gt;#&lt;/a&gt; 为什么使用 16384 个槽位&lt;/h4&gt;
&lt;p&gt;前面提到 CRC16 计算的哈希位数有 16 位，即范围为 0~65535，但   &lt;code&gt;redis&lt;/code&gt;   只使用了 14 位，即哈希槽范围为 0~16383。为什么这样设计能？我目前的水平不足以理解背后的原因，但究其原因是因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;集群之间发送的心跳包包含  &lt;code&gt;redis&lt;/code&gt;  所有的配置，包括哈希槽，且哈希槽占据心跳包的大部分空间，为了减小心跳包占用的带宽，所以缩小哈希槽的范围，14 位是折中的选择&lt;/li&gt;
&lt;li&gt;官方建议的集群节点数不超过 1000 个，所以不需要太大的哈希槽范围&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集群配置参数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#集群配置参数&#34;&gt;#&lt;/a&gt; 集群配置参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;cluster-enabled  &lt;code&gt;&amp;lt;yes/no&amp;gt;&lt;/code&gt; &lt;/strong&gt;：如果设置为 yes，那么这个配置文件所代表的  &lt;code&gt;redis&lt;/code&gt;  实例将会支持集群。否则，该实例将会以普通的方式启动。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster-config-file  &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; &lt;/strong&gt;：设置集群的配置文件，该文件是无法写入的，集群节点会在每次配置改变时自动将配置持久化进该文件里，为了当重新启动时读取该文件。该文件会列举像是集群中的节点、他们的状态、持久化变量等等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster-node-timeout &lt;milliseconds&gt;&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cluster-allow-reads-when-down&lt;/strong&gt;  &lt;code&gt;&amp;lt;yes/no&amp;gt;&lt;/code&gt; ：&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建集群&#34;&gt;#&lt;/a&gt; 创建集群&lt;/h2&gt;
&lt;p&gt;在创建集群之间，我们必须首先进行配置以让  &lt;code&gt;redis&lt;/code&gt;  实例支持以集群模式运行。最小的配置如下：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;port 7000 #redis的端口&lt;br&gt;cluster-enabled yes #声明该实例支持集群模式&lt;br&gt;cluster-config-file nodes.conf #设置该实例的集群配置文件&lt;br&gt;cluster-node-timeout 5000 #超时时间&lt;br&gt;appendonly yes #支持AOF持久化&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最小的集群必须至少含有 3 台   &lt;code&gt;master&lt;/code&gt;  节点。官方推荐部署时，使用六台节点的集群，3 台   &lt;code&gt;master&lt;/code&gt;  节点和 3 台   &lt;code&gt;slave&lt;/code&gt;  节点。现在我们以这个场景进行创建集群的演示：&lt;/p&gt;
&lt;h3 id=&#34;运行集群节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行集群节点&#34;&gt;#&lt;/a&gt; 运行集群节点&lt;/h3&gt;
&lt;p&gt;首先我们必须让所有的在集群中工作的节点都支持以集群的模式运行。注意，此时不用单独配置主从复制的关系。 &lt;code&gt;redis&lt;/code&gt;  会自动为我们搭建主从复制关系。我们规定 6 个节点的端口分别为：7000，7001，7002，7003，7004，7005。那么每个节点的配置文件的内容如下所示：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;bind 0.0.0.0&lt;br&gt;daemonize yes&lt;br&gt;protected-mode no&lt;br&gt;port 7000 #端口自定&lt;br&gt;dir /usr/local/etc/redis #工作路径自定&lt;br&gt;logfile 7000.log #日志文件自定&lt;br&gt;pidfile 7000.pid #pid文件自定&lt;br&gt;appendonly yes&lt;br&gt;appendfilename &amp;quot;7000.aof&amp;quot; #aof文件前缀自定&lt;br&gt;masterauth 12345 #如果由密码，则必须配置该项，用于建立自从复制关系时的认证&lt;br&gt;requirepass 12345 #密码，可要可不要&lt;br&gt;&lt;br&gt;cluster-enabled yes&lt;br&gt;cluster-config-file node-7000.conf #集群配置文件自定&lt;br&gt;cluster-node-timeout 5000&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请确保每个节点都包含了属于该节点的配置文件。随后我们使用命令启动着 6 个节点：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-server /path/to/config.conf&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;启动完成后，你会在日志中发现下面这句话：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;[82462] 26 Nov 11:56:55.329 * No cluster configuration found, I&amp;#x27;m 97a3a64667477371c4479320d683e4c8db5858b1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;ID&lt;/code&gt;  会在集群中被永久使用以代表唯一的实例名字。节点会使用  &lt;code&gt;ID&lt;/code&gt;  来记住其他节点。随后你会在工作目录下，看见新创建的集群配置文件。&lt;/p&gt;
&lt;h3 id=&#34;创建真正的集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建真正的集群&#34;&gt;#&lt;/a&gt; 创建真正的集群&lt;/h3&gt;
&lt;p&gt;现在我们已经有了正在运行的实例了，现在你可以使用以下的命令来创建你的集群：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster create &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; [ip:port....] --cluster-replicas 1&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里使用的命令是 create，因为我们要创建一个新的集群。选项 --cluster-replicas 1 意味着我们希望为每个创建的主节点创建一个副本。其他参数是我想要用来创建新集群的实例的地址列表。&lt;/p&gt;
&lt;p&gt;redis-cli 将为一个配置提出建议。随机分配主从关系。输入 yes 接受建议的配置。集群将被配置并被加入。这意味着实例将被引导以相互通信。最后，如果一切顺利，您将看到如下消息：&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-attr&#34;&gt;[OK]&lt;/span&gt; &lt;span class=&#34;hljs-attribute&#34;&gt;All&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;16384&lt;/span&gt; slots covered&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在你已经构建起三主三从的集群架构了。如果你这时候前往集群配置文件，你能观察到此时的配置文件已经被写入该集群的一些信息了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  之间通信的端口默认为，port + 10000。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;查看集群信息&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查看集群信息&#34;&gt;#&lt;/a&gt; 查看集群信息&lt;/h4&gt;
&lt;p&gt;现在你可以查看你之前创建好地集群的信息。我们可以从端口为 7000 的这台实例入手，通过以下命令进入客户端并查看节点的信息：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; -p 7000&lt;br&gt;&lt;br&gt;127.0.0.1:7000&amp;gt; info replication&lt;br&gt;127.0.0.1:7000&amp;gt; cluster info&lt;br&gt;127.0.0.1:7000&amp;gt; cluster slots&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;读写&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#读写&#34;&gt;#&lt;/a&gt; 读写&lt;/h3&gt;
&lt;p&gt;现在进入某一个实例尝试读写吧。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;$ &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;redis-cli -c -p 7000&lt;/span&gt;&lt;br&gt;redis 127.0.0.1:7000&amp;gt; set foo bar&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [12182] located at 127.0.0.1:7002&lt;/span&gt;&lt;br&gt;OK&lt;br&gt;redis 127.0.0.1:7002&amp;gt; set hello world&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [866] located at 127.0.0.1:7000&lt;/span&gt;&lt;br&gt;OK&lt;br&gt;redis 127.0.0.1:7000&amp;gt; get foo&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [12182] located at 127.0.0.1:7002&lt;/span&gt;&lt;br&gt;&amp;quot;bar&amp;quot;&lt;br&gt;redis 127.0.0.1:7002&amp;gt; get hello&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;-&amp;gt; &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;Redirected to slot [866] located at 127.0.0.1:7000&lt;/span&gt;&lt;br&gt;&amp;quot;world&amp;quot;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-c&lt;/code&gt;  选项代表该客户端以集群模式连接服务端。你可能已经看见了上面结果的  &lt;code&gt;redirected&lt;/code&gt;  提示且观察到客户端连接到的服务端发生了变化。下面我们来介绍一下。该提示信息被称为 ——Moved 重定向错误。每当客户端的请求被某个节点接受后，会计算键的哈希槽，当判断该哈希槽不属于该节点，则会查找哈希槽和节点的映射集。然后回复客户端，让其重定向至指定的节点。&lt;/p&gt;
&lt;h3 id=&#34;重新分片&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重新分片&#34;&gt;#&lt;/a&gt; 重新分片&lt;/h3&gt;
&lt;p&gt;这个操作将会让某一个节点的的分片被重新划分。让其他节点的部分哈希槽移动至该节点，使用如下的命令进行重新分片：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-clit -a &amp;lt;passowrd&amp;gt; --cluster reshard &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们以端口为 7000 的节点为例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster reshard 127.0.0.1:7000&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你只需要指定这个集群的单个节点， &lt;code&gt;redis&lt;/code&gt;  将会自动寻找剩余的节点。&lt;/p&gt;
&lt;p&gt;目前 redis-cli 只能在管理员支持下重新分片，你不能只是说将 5% 的槽从这个节点移动到另一个节点（但这实现起来非常简单）。所以它会一个问题开始。第一个问题是是您想要移动的哈希槽的个数：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;How many slots do you want to move (from 1 to 16384)?&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你确认后，会询问你接受这些哈希槽的   &lt;code&gt;master&lt;/code&gt;  节点 ID：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;What is the receiving node ID? &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当你执行分片时，该集群中的所有节点包括 ID 等一切信息均以展示，所以你可以直接从上方查阅。&lt;/p&gt;
&lt;p&gt;当你确认后，会继续询问你哈希槽来源的 IDs。你有两个选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt; ：哈希槽来自于除该节点外的所有节点&lt;/li&gt;
&lt;li&gt;随着 node #1、node #2、node #3… 写入来源节点的 id，随后以  &lt;code&gt;done&lt;/code&gt;  结束输入&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Please enter all the source node IDs.&lt;br&gt;  Type &amp;#x27;all&amp;#x27; to use all the nodes as source nodes for the hash slots.&lt;br&gt;  Type &amp;#x27;done&amp;#x27; once you entered all the source nodes IDs.&lt;br&gt;Source node #1: 2280954adfacc87e6f776bcb2684ea1be1b46567&lt;br&gt;Source node #2: done&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，会询问你是否执行重新分片：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;Do you want to proceed with the proposed reshard plan (yes/no)?&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输入 yes 即可开始重新分片&lt;/p&gt;
&lt;p&gt;分片完成成后可以使用如下的命令检查节点的健康状态：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster check &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;重新分片可以自动进行，无需以交互方式手动输入参数。这可以使用如下的命令行来实现：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli --cluster reshard &amp;lt;host&amp;gt;:&amp;lt;port&amp;gt; --cluster-from &amp;lt;node-id&amp;gt; --cluster-to &amp;lt;node-id&amp;gt; --cluster-slots &amp;lt;number of slots&amp;gt; --cluster-yes&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;故障转移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#故障转移&#34;&gt;#&lt;/a&gt; 故障转移&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt;  集群不用使用哨兵的支持则可以自动触发故障转移。现在，尝试使某一台  &lt;code&gt;master&lt;/code&gt;  宕机：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; -p &amp;lt;port&amp;gt; shutdown&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;随后我们使用，如下命令查看其中一个节点：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a 12345 -p 7001 cluster nodes&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以发现指定的那台节点已经宕机。但仍有三台  &lt;code&gt;master&lt;/code&gt;   节点。可以确定，从节点已经上位为主节点。&lt;/p&gt;
&lt;p&gt;现在让之前的主节点重新上线，仍然使用上面的命令可以发现，之前的宕机的主节点上线后变为从节点。&lt;/p&gt;
&lt;h4 id=&#34;手动故障转移&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#手动故障转移&#34;&gt;#&lt;/a&gt; 手动故障转移&lt;/h4&gt;
&lt;p&gt;如果你想手动切换主从节点的状态，可以使用如下命令，进行手动的故障转移：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a 12345 -p 7000 cluster failover&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;添加新节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加新节点&#34;&gt;#&lt;/a&gt; 添加新节点&lt;/h3&gt;
&lt;p&gt;添加一个新的主节点非常简单，你只需要添加一个空的节点，并且移动一些哈希槽到这个新的主节点。而添加一个从节点只需要告诉这个节点以从节点的身份启动，就能添加一个从节点。&lt;/p&gt;
&lt;p&gt;下面我们从添加主节点开始。&lt;/p&gt;
&lt;h4 id=&#34;添加主节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加主节点&#34;&gt;#&lt;/a&gt; 添加主节点&lt;/h4&gt;
&lt;p&gt;我们以端口为 7006 的节点为例子。（注意，你之前已经创建了以 7000 到 7 005 端口的共六个节点的集群。）现在请确保你已经按照之前的步骤，创建了一个端口为 7006 的   &lt;code&gt;redis&lt;/code&gt;  配置文件。让我们启动他。&lt;/p&gt;
&lt;p&gt;当你启动完成后，你会发现该实例的集群配置文件只有它自己，是因为该节点还未加入原来的集群中，现在让我们使用下面的命令来加入他：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster add-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数代表着新加入集群的节点的套接字，第二个参数代表着集群中任意节点的套接字，用于标识新加入的节点加入的是哪个集群中。你只需要标识其中一个节点的套接字，其他的节点将会被自动寻找。&lt;/p&gt;
&lt;p&gt;现在你可以链接任何节点使用  &lt;code&gt;cluster nodes&lt;/code&gt;  查看节点状况。你会发现，新加入的节点默认为主节点。&lt;/p&gt;
&lt;h5 id=&#34;重新分片-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重新分片-2&#34;&gt;#&lt;/a&gt; 重新分片&lt;/h5&gt;
&lt;p&gt;当你将节点成功加入集群中后，该节点就能正确的将查询进行重定向，该新节点和其他的节点有如下的不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该节点没有数据且没有被分配哈希槽&lt;/li&gt;
&lt;li&gt;因为该节点是没有分配哈希槽的主节点，所有该节点无法在从节点想提拔为主节点时参与选举&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以现在可以使用如下的命令进行重新分片：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;reids-cli -a &amp;lt;passowrd&amp;gt; --cluster reshard &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;添加从节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#添加从节点&#34;&gt;#&lt;/a&gt; 添加从节点&lt;/h4&gt;
&lt;p&gt;添加从节点有两种途径，一种是像之前我们添加主节点那样，但是在末尾添加一个   &lt;code&gt;--cluster-slave&lt;/code&gt;  参数：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster add-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; --cluster-slave&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用这个命令，我们并没有指定我们目标的主节点，所以  &lt;code&gt;redis-cli&lt;/code&gt;  会随机挑选一个主节点。但是如果你想明确指定一个目标主节点你可以使用如下的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;password&amp;gt; --cluster add-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; --cluster-slave --cluster-mster-id &amp;lt;id&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过指定目标主节点的 id，我们可以指定我们想要的目标主节点。&lt;/p&gt;
&lt;p&gt;另外的一种方式就是，你可以先添加一个空的主节点，然后让他变成某个主节点的从节点，我们以端口为 7006 的节点为例：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;127.0.0.1:7006&amp;gt;cluster replicate &amp;lt;id&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数 id 为某个主节点的 id。执行完这个命令后即可让该节点变为指定主节点的从节点&lt;/p&gt;
&lt;h2 id=&#34;删除节点&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#删除节点&#34;&gt;#&lt;/a&gt; 删除节点&lt;/h2&gt;
&lt;p&gt;使用如下命令删除一个节点：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;redis-cli -a &amp;lt;passowrd&amp;gt; --cluster del-node &amp;lt;ip&amp;gt;:&amp;lt;port&amp;gt; &amp;lt;node-id&amp;gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个参数代表着集群中的一个节点，用于寻找集群中的其他节点。第二个参数时你想要删除的那个节点。&lt;/p&gt;
&lt;p&gt;你能使用这个命令删除主从节点，但是如果你想删除一个主节点，请确保这个主节点是空的。如果这个主节点不是空的，你需要在删除前将这个节点上的所有数据重新分片至其他的节点上。&lt;/p&gt;
&lt;p&gt;其他的删除主节点的替代方法就是你可以进行手动的故障转移，当这个节点转换为从节点后即可删除。但显然的，这个方法并不会帮你减少主节点的数量，所以当你想减少主节点的数量时，重新分片是必要的。&lt;/p&gt;
&lt;p&gt;还有一个特殊的方法当你想移除一个的宕机的节点时，你不应该使用   &lt;code&gt;del-node &lt;/code&gt;  命令因为他会尝试连接所有节点。所有你将会面对一个 —— &lt;code&gt;connection refused error&lt;/code&gt;  (连接拒绝错误)，相反的，你应该使用如下的命令：&lt;/p&gt;
&lt;figure class=&#34;highlight vim&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs vim&#34;&gt;redis-cli --cluster &lt;span class=&#34;hljs-keyword&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;hljs-symbol&#34;&gt;&amp;lt;ip&amp;gt;&lt;/span&gt;:&lt;span class=&#34;hljs-symbol&#34;&gt;&amp;lt;port&amp;gt;&lt;/span&gt; cluster forget &lt;span class=&#34;hljs-symbol&#34;&gt;&amp;lt;node-id&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个命令将会在任何节点上执行  &lt;code&gt;cluster forget&lt;/code&gt;  命令&lt;/p&gt;
&lt;h2 id=&#34;hash-tag&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hash-tag&#34;&gt;#&lt;/a&gt; hash tag&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;hash tag&lt;/code&gt;  用于将多个键分配至同一个哈希槽。这用于在集群中实现多键操作。&lt;/p&gt;
&lt;p&gt;为了实现  &lt;code&gt;hash tag&lt;/code&gt;  ，键的哈希槽和其他的键的计算在某种情况下有细微的差别。如果一个键包含一个  &lt;code&gt;&amp;quot;&amp;#123;...&amp;#125;&lt;/code&gt; &amp;quot; 那么只有  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  里的子串会被哈希，以获取哈希槽。但是也有可能会有大量的  &lt;code&gt;&amp;#123;&lt;/code&gt; 或} 出现。所以该算法被指定遵循以下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;键包含一个  &lt;code&gt;&amp;#123;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;并且有一个  &lt;code&gt;&amp;#125;&lt;/code&gt;  在  &lt;code&gt;&amp;#123;&lt;/code&gt;  右边&lt;/li&gt;
&lt;li&gt;有一个或多个字符在第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间字符串会被哈希。&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;两个键，{user1000}.forllowing 和 {user1000}.forllowers 会被分配至一个哈希槽。因为只有唯一的字串 user1000 会被哈希&lt;/li&gt;
&lt;li&gt;键 foo {}{bar}，整个键会被哈希因为第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间没有字符&lt;/li&gt;
&lt;li&gt;键  &lt;code&gt;foo&amp;#123;&amp;#123;bar&amp;#125;&amp;#125;zap&lt;/code&gt;  的字串  &lt;code&gt;&amp;#123;bar&lt;/code&gt;  会被哈希，因为这是一个在第一个  &lt;code&gt;&amp;#123;&lt;/code&gt;  和  &lt;code&gt;&amp;#125;&lt;/code&gt;  的中间的字符子串&lt;/li&gt;
&lt;li&gt;键   &lt;code&gt;foo&amp;#123;bar&amp;#125;&amp;#123;zap&amp;#125;&lt;/code&gt;  的 子串  &lt;code&gt;bar&lt;/code&gt;  会被哈希&lt;/li&gt;
&lt;li&gt;如果键以  &lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;  开头，则保证它作为一个整体进行哈希处理。当使用二进制数据作为键名时这很有用&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="redis" />
        <updated>2024-03-18T13:20:07.000Z</updated>
    </entry>
</feed>
